package Parse;

action code {: static Symbol.Symbol sym(String s) {
	         return Symbol.Symbol.symbol(s);
	        }
	    :};

parser code  {: 
  Lexer lexer;

  public void syntax_error(java_cup.runtime.Symbol current) {
   report_error("Syntax error (" + current.sym + " ASCII: " + (char)current.sym + ")", current);
  }

  ErrorMsg.ErrorMsg errorMsg;

  public void report_error(String message, java_cup.runtime.Symbol info) {
      errorMsg.error(info.left, message);
  }

  public Grm(Lexer l, ErrorMsg.ErrorMsg err) {
    this();
    errorMsg=err;
    lexer=l;
  }
:};

scan with {: return lexer.nextToken(); :};

terminal String ID, STRING;
terminal Integer INT;
terminal COMMA, COLON, SEMICOLON, LPAREN, RPAREN, LBRACK, RBRACK, 
	LBRACE, RBRACE, DOT, PLUS, MINUS, TIMES, DIVIDE, EQ, NEQ, LT, LE, 
	GT, GE, AND, OR, ASSIGN, ARRAY, IF, THEN, ELSE, WHILE, FOR, TO,
	DO, LET, IN, END, OF, BREAK, NIL, VAR, UMINUS, TYPEDEF;

/* add more non terminal grammar definitions to make it less ambiguous */
non terminal Absyn.Exp          Exp;
non terminal Absyn.AssignExp    AssignExp;
non terminal Absyn.Exp          If;
non terminal Absyn.ExpList      Head;
non terminal Absyn.ExpList      Rest;
non terminal Absyn.FieldExpList ExpListH;
non terminal Absyn.FieldExpList ExpList;
non terminal Absyn.FieldExpList Tail;
non terminal Absyn.Exp          ExpSeq;
non terminal Absyn.Var          Var;
non terminal Absyn.Ty           Ty;
non terminal Absyn.FieldList    TyFields;
non terminal Absyn.NameTy       NameTy;
non terminal Absyn.Dec          Dec;
non terminal Absyn.DecList      decs;
non terminal Absyn.VarDec       vardec;
non terminal Absyn.TypeDec      tydecs;
non terminal Absyn.TypeDec      tydec;
non terminal Absyn.FunctionDec  fundec;
non terminal Absyn.FunctionDec  fundecs;

/* Precedences */
precedence nonassoc ASSIGN;
precedence left AND, OR;
precedence nonassoc EQ, NEQ, LT, GT, LE, GE;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence left UMINUS; /* greatest presidence, followed by mult/div and finally add/sub */

start with Exp;

Exp ::= error:e
	      {: RESULT = new Absyn.SeqExp(eleft, null); :}
	    | Var:v
	      {: RESULT = new Absyn.VarExp(vleft, v); :}
      | INT:e
        {: RESULT = new Absyn.IntExp(eleft, e.intValue()); :}
      | Exp:l MINUS:o Exp:r
        {: RESULT = new Absyn.OpExp(oleft, l, Absyn.OpExp.MINUS, r); :}
      | Exp:l PLUS:o Exp:r
        {: RESULT = new Absyn.OpExp(oleft, l, Absyn.OpExp.PLUS, r); :}
      | Exp:l TIMES:o Exp:r
        {: RESULT = new Absyn.OpExp(oleft, l, Absyn.OpExp.MUL, r); :}
      | Exp:l DIVIDE:o Exp:r
        {: RESULT = new Absyn.OpExp(oleft, l, Absyn.OpExp.DIV, r); :}
      | MINUS Exp %prec UMINUS
      | Var:v ASSIGN Exp:e
        {: RESULT = new Absyn.AssignExp(vleft, v, e); :}
      | Exp:l EQ:o Exp:r
        {: RESULT = new Absyn.OpExp(oleft, l, Absyn.OpExp.EQ, r); :}
      | Exp:l NEQ:o Exp:r
        {: RESULT = new Absyn.OpExp(oleft, l, Absyn.OpExp.NE, r); :}
      | Exp:l LT:o Exp:r
        {: RESULT = new Absyn.OpExp(oleft, l, Absyn.OpExp.LT, r); :}
      | Exp:l LE:o Exp:r
        {: RESULT = new Absyn.OpExp(oleft, l, Absyn.OpExp.LE, r); :}
      | Exp:l GT:o Exp:r
        {: RESULT = new Absyn.OpExp(oleft, l, Absyn.OpExp.GT, r); :}
      | Exp:l GE:o Exp:r 
        {: RESULT = new Absyn.OpExp(oleft, l, Absyn.OpExp.GE, r); :}
      | STRING:s
        {: RESULT = new Absyn.StringExp(sleft, s); :}
      | NIL:n
        {: RESULT = new Absyn.NilExp(nleft); :}
      | WHILE:w Exp:exp1 DO Exp:exp2
        {: RESULT = new Absyn.WhileExp(wleft, exp1, exp2); :}
      | ID:n LBRACK Exp:exp1 RBRACK OF Exp:exp2
        {: RESULT = new Absyn.ArrayExp(nleft, sym(n), exp1, exp2); :}
      | BREAK:b SEMICOLON
        {: RESULT = new Absyn.BreakExp(bleft); :}
      | LET decs:d IN ExpSeq:b END
        {: RESULT = new Absyn.LetExp(dleft, d, b); :}
      | FOR:f AssignExp:ae TO Exp:exp1 DO Exp:exp2
        {: RESULT = new Absyn.ForExp(fleft, ae, exp1, exp2); 
        /* exp1 is either 
        ID:type-id ID:id ASSIGN Exp:e
        or
        ID:id ASSIGN Exp:e
        */ :}
      | FOR:f vardec:v TO Exp:exp2 DO Exp:exp3
        {: RESULT = new Absyn.ForExp(fleft, v, exp2, exp3); :}
      | If
      | LPAREN ExpSeq:l RPAREN
        {: RESULT = l; :}
	;

ExpListH ::= ID:n LPAREN Exp:i ExpList:t RPAREN
              {: RESULT = new Absyn.FieldExpList(nleft, sym(n), i, t); :}
           | ID:n LPAREN RPAREN
              {: RESULT = new Absyn.FieldExpList(nleft, sym(n), null, null); :}
  ;

/* separated by commas (used for param values of a func) */
ExpList ::= COMMA Tail:t
            {: RESULT = t; :}
          |
            {: RESULT = null; :}
  ;

Tail ::= Exp:h ExpList:t
          {: RESULT = new Absyn.FieldExpList(hleft, null, h, t); :}
  ;

/*
ExpSeq --> Needs an ExpList in grammar to construct SeqExp
*/
ExpSeq ::= Rest:l
          {: RESULT = new Absyn.SeqExp(lleft, l); :}
         |
          {: RESULT = null; :}
  ;

Rest ::= Exp:h SEMICOLON Rest:t
        {: RESULT = new Absyn.ExpList(h, t); :}
       | Exp:end
        {: RESULT = new Absyn.ExpList(end, null); :}
  ;

If ::= IF Exp:t THEN Exp:b
        {: RESULT = new Absyn.IfExp(tleft, t, b); 
        /* still need to fix S/R conflict */ :}
      | IF Exp:t THEN Exp:b ELSE Exp:e
        {: RESULT = new Absyn.IfExp(tleft, t, b, e); /* is this ambiguous? */:}
  ;

Var ::= ID:n
	      {: RESULT = new Absyn.SimpleVar(nleft, sym(n)); :}
      | ID:v LBRACK Exp:i RBRACK
        {: RESULT = new Absyn.SubscriptVar(vleft, new Absyn.SimpleVar(vleft, sym(v)), i); 
        /* TODO: see if this works later */ :}
      | Var:v DOT ID:f
        {: RESULT = new Absyn.FieldVar(vleft, v, sym(f)); :}
	;

/* Var and Ty both can have ID's. Need to decipher between the two */
Ty ::= ID:n
     {: RESULT = new Absyn.NameTy(nleft, sym(n)); :}
     | ARRAY OF ID:n
     {: RESULT = new Absyn.ArrayTy(nleft, sym(n)); :}
     | TyFields:f
     {: RESULT = new Absyn.RecordTy(fleft, f); :}
  ;

TyFields ::= 
            {: RESULT = null; :}
          | ID:n COLON ID:t TyFields:f
            {: RESULT = new Absyn.FieldList(nleft, sym(n), sym(t), f); :}
  ; 

decs ::= Dec:h decs:t
        {: RESULT = new Absyn.DecList(h, t); :}
       |
        {: RESULT = null; :}
  ;

Dec ::= vardec:vd
  ;

vardec ::= VAR ID:n ASSIGN Exp:i
          {: RESULT = new Absyn.VarDec(nleft, sym(n), null, i); :}
         | VAR ID:n COLON NameTy:t ASSIGN Exp:i
          {: RESULT = new Absyn.VarDec(nleft, sym(n), t, i); :}
  ;