package Parse;

action code {: static Symbol.Symbol sym(String s) {
	         return Symbol.Symbol.symbol(s);
	        }
	    :};

parser code  {: 
  Lexer lexer;

  public void syntax_error(java_cup.runtime.Symbol current) {
   report_error("Syntax error (" + current.sym + ")", current);
  }

  ErrorMsg.ErrorMsg errorMsg;

  public void report_error(String message, java_cup.runtime.Symbol info) {
      errorMsg.error(info.left, message);
  }

  public Grm(Lexer l, ErrorMsg.ErrorMsg err) {
    this();
    errorMsg=err;
    lexer=l;
  }
:};

scan with {: return lexer.nextToken(); :};

terminal String ID, STRING;
terminal Integer INT;
terminal COMMA, COLON, SEMICOLON, LPAREN, RPAREN, LBRACK, RBRACK, 
	LBRACE, RBRACE, DOT, PLUS, MINUS, TIMES, DIVIDE, EQ, NEQ, LT, LE, 
	GT, GE, AND, OR, ASSIGN, ARRAY, IF, THEN, ELSE, WHILE, FOR, TO,
	DO, LET, IN, END, OF, BREAK, NIL, FUNCTION, VAR, TYPE, UMINUS, TYPEDEF;

/* add more non terminal grammar definitions to make it less ambiguous */
non terminal Absyn.Exp          Exp;
non terminal Absyn.Var          Var;
non terminal Absyn.Ty           Ty;
non terminal Absyn.Ty           TyFields;
non terminal Absyn.Dec          Dec;
non terminal Absyn.Dec          tydec;
non terminal Absyn.Dec          vardec;
non terminal Absyn.Dec          fundec;

/* Precedences */
precedence nonassoc ASSIGN;
precedence left AND, OR;
precedence nonassoc EQ, NEQ, LT, GT, LE, GE;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence right Exp;
precedence left UMINUS; /* greatest presidence, followed by mult/div and finally add/sub */

start with Exp;

Exp ::= error:e
	      {: RESULT = new Absyn.SeqExp(eleft, null); :}
	    | Var:v
	      {: RESULT = new Absyn.VarExp(vleft, v); :}
      | INT:e
        {: RESULT = new Absyn.IntExp(eleft, e.intValue()); :}
      | Exp:l MINUS:o Exp:r
        {: RESULT = new Absyn.OpExp(oleft, l, Absyn.OpExp.MINUS, r); :}
      | Exp:l PLUS:o Exp:r
        {: RESULT = new Absyn.OpExp(oleft, l, Absyn.OpExp.PLUS, r); :}
      | Exp:l TIMES:o Exp:r
        {: RESULT = new Absyn.OpExp(oleft, l, Absyn.OpExp.MUL, r); :}
      | Exp:l DIVIDE:o Exp:r
        {: RESULT = new Absyn.OpExp(oleft, l, Absyn.OpExp.DIV, r); :}
      | MINUS Exp %prec UMINUS
      | Var:v ASSIGN Exp:e
        {: RESULT = new Absyn.AssignExp(vleft, v, e); :}
      | Exp:l EQ:o Exp:r
        {: RESULT = new Absyn.OpExp(oleft, l, Absyn.OpExp.EQ, r); :}
      | Exp:l NEQ:o Exp:r
        {: RESULT = new Absyn.OpExp(oleft, l, Absyn.OpExp.NE, r); :}
      | Exp:l LT:o Exp:r
        {: RESULT = new Absyn.OpExp(oleft, l, Absyn.OpExp.LT, r); :}
      | Exp:l LE:o Exp:r
        {: RESULT = new Absyn.OpExp(oleft, l, Absyn.OpExp.LE, r); :}
      | Exp:l GT:o Exp:r
        {: RESULT = new Absyn.OpExp(oleft, l, Absyn.OpExp.GT, r); :}
      | Exp:l GE:o Exp:r 
        {: RESULT = new Absyn.OpExp(oleft, l, Absyn.OpExp.GE, r); :}
      | STRING:s
        {: RESULT = new Absyn.StringExp(sleft, s); :}
      | WHILE:w Exp:exp1 DO Exp:exp2
        {: Result = new Absyn.WhileExp(wleft, exp1, exp2); :}
      | ID:n LBRACE Exp:exp1 RBRACE OF Exp:exp2
        {: RESULT = new Absyn.ArrayExp(nleft, sym(n), exp1, exp2); :}
      | BREAK:b IN ARRAY:a OR WHILE:w 
        {: RESULT = new Absyn.BreakExp(bleft); :}
      | Var:l ASSIGN Exp:eleft
        {: Result = new Absyn.AssignExp(lleft, l, exp); :}
      | FOR:f ID:n ASSIGN Exp:exp1 to Exp:exp2 DO Exp:exp3
        {: RESULT = new Absyn.ForExp(fleft, new Absyn.VarDec(nleft, sym(n), f, exp1), exp1, exp2); :}
      | 
	;

Var ::= ID:n
	      {: RESULT = new Absyn.SimpleVar(nleft, sym(n)); :}
      | Var:v LBRACK Exp:i RBRACK
        {: RESULT = new Absyn.SubscriptVar(vleft, v, i); :}
      | Var:v DOT ID:f
        {: RESULT = new Absyn.FieldVar(vleft, v, sym(f)); :}
	;

Ty ::= ID:n
     {: RESULT = new Absyn.NameTy(nleft, sym(n); :}
     | ARRAY: arr OF ID:n
     {: RESULT = new Absyn.ArrayTy(nleft, sym(n)); :}
     | LBRACE Tyfields:f RBRACE
     {: RESULT = new Absyn.RecordTy(lleft, sym(f)); :}
  ;

TyFields ::= 
          {: RESULT = NIL; :}
          | ID:n COLON TyFields:t
          {: RESULT = new Absyn.FieldList(nleft, sym(n), t); :}

Dec ::= tydec
      | vardec
      | fundec
  ;

tydec ::= TYPEDEF ty:t ID:n
          {: RESULT = new Absyn.TypeDec(tleft, sym(n), t, null); :}

vardec ::= VAR ID:n ASSIGN Exp:i
          {: RESULT = new Absyn.VarDec(nleft, sym(n), null, i); :}
         | VAR ID:n COLON NameTy:t ASSIGN Exp:i
          {: RESULT = new Absyn.VarDec(nleft, sym(n), t, i); :}

fundec ::= FUNCTION ID:n LPAREN TyFields:f RPAREN ASSIGN Exp:exp
          {: RESULT = new Absyn.FunctionDec(fleft, n, f, null, exp); :}
          | FUNCTION ID:n LPAREN TyFields:f RPAREN COLON typedec:t ASSIGN Exp:exp
          {:RESULT = new Absyn.FunctionDec(fleft, sym(n), f, null, exp); :}
