Opening files...
Parsing specification from standard input...
Checking specification...
Warning: Terminal "AND" was declared but never used
Warning: Terminal "OR" was declared but never used
Warning: Terminal "COMMA" was declared but never used
Warning: Non terminal "ExpListH" was declared but never used
Warning: Non terminal "Head" was declared but never used
Warning: Non terminal "Tail" was declared but never used
Building parse tables...
  Computing non-terminal nullability...
  Computing first sets...
  Building state machine...
  Filling in tables...
*** Shift/Reduce conflict found in state #71
  between fundecs ::= (*) 
  and     fundecs ::= (*) ID LPAREN TyFields RPAREN SEMICOLON fundecs 
  and     NameTy ::= (*) ID 
  and     fundecs ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fundecs 
  under symbol ID
  Resolved in favor of shifting.

*** Reduce/Reduce conflict found in state #94
  between fundec ::= NameTy ID LPAREN TyFields RPAREN SEMICOLON (*) 
  and     fundecs ::= (*) 
  under symbols: {ID, IN, VAR, TYPEDEF}
  Resolved in favor of the first production.

*** Shift/Reduce conflict found in state #94
  between fundec ::= NameTy ID LPAREN TyFields RPAREN SEMICOLON (*) 
  and     fundecs ::= (*) ID LPAREN TyFields RPAREN SEMICOLON fundecs 
  and     NameTy ::= (*) ID 
  and     fundecs ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fundecs 
  under symbol ID
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #94
  between fundec ::= NameTy ID LPAREN TyFields RPAREN SEMICOLON (*) 
  under symbol IN
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #94
  between fundec ::= NameTy ID LPAREN TyFields RPAREN SEMICOLON (*) 
  under symbol VAR
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #94
  between fundec ::= NameTy ID LPAREN TyFields RPAREN SEMICOLON (*) 
  under symbol TYPEDEF
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #94
  between fundecs ::= (*) 
  and     fundecs ::= (*) ID LPAREN TyFields RPAREN SEMICOLON fundecs 
  and     NameTy ::= (*) ID 
  and     fundecs ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fundecs 
  under symbol ID
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #94
  between fundecs ::= (*) 
  under symbol IN
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #94
  between fundecs ::= (*) 
  under symbol VAR
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #94
  between fundecs ::= (*) 
  under symbol TYPEDEF
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #116
  between tydecs ::= (*) 
  and     tydecs ::= (*) TYPEDEF Ty ID tydecs 
  under symbol TYPEDEF
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #132
  between If ::= IF Exp THEN Exp (*) 
  and     If ::= IF Exp THEN Exp (*) ELSE Exp 
  under symbol ELSE
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #74
  between fundecs ::= (*) 
  and     fundecs ::= (*) ID LPAREN TyFields RPAREN SEMICOLON fundecs 
  and     NameTy ::= (*) ID 
  and     fundecs ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fundecs 
  under symbol ID
  Resolved in favor of shifting.

*** Reduce/Reduce conflict found in state #112
  between tydecs ::= (*) 
  and     tydec ::= TYPEDEF Ty ID (*) 
  under symbols: {ID, IN, VAR, TYPEDEF}
  Resolved in favor of the second production.

*** Shift/Reduce conflict found in state #112
  between tydecs ::= (*) 
  under symbol ID
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #112
  between tydecs ::= (*) 
  under symbol IN
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #112
  between tydecs ::= (*) 
  under symbol VAR
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #112
  between tydecs ::= (*) 
  and     tydecs ::= (*) TYPEDEF Ty ID tydecs 
  under symbol TYPEDEF
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #112
  between tydec ::= TYPEDEF Ty ID (*) 
  under symbol ID
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #112
  between tydec ::= TYPEDEF Ty ID (*) 
  under symbol IN
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #112
  between tydec ::= TYPEDEF Ty ID (*) 
  under symbol VAR
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #112
  between tydec ::= TYPEDEF Ty ID (*) 
  and     tydecs ::= (*) TYPEDEF Ty ID tydecs 
  under symbol TYPEDEF
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #87
  between TyFields ::= (*) 
  and     TyFields ::= (*) ID COLON ID TyFields 
  under symbol ID
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #51
  between TyFields ::= (*) 
  and     TyFields ::= (*) ID COLON ID TyFields 
  and     NameTy ::= (*) ID 
  under symbol ID
  Resolved in favor of shifting.

*** Reduce/Reduce conflict found in state #49
  between fundecs ::= (*) 
  and     decs ::= (*) 
  under symbols: {IN}
  Resolved in favor of the second production.

*** Shift/Reduce conflict found in state #49
  between fundecs ::= (*) 
  and     fundec ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE 
  and     fundecs ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fundecs 
  and     NameTy ::= (*) ID 
  and     fundec ::= (*) ID LPAREN TyFields RPAREN SEMICOLON 
  and     fundecs ::= (*) ID LPAREN TyFields RPAREN SEMICOLON fundecs 
  under symbol ID
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #49
  between fundecs ::= (*) 
  under symbol IN
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #49
  between fundecs ::= (*) 
  and     vardec ::= (*) VAR ID COLON NameTy ASSIGN Exp 
  and     vardec ::= (*) VAR ID ASSIGN Exp 
  under symbol VAR
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #49
  between fundecs ::= (*) 
  and     tydec ::= (*) TYPEDEF Ty ID tydecs 
  and     tydec ::= (*) TYPEDEF Ty ID 
  under symbol TYPEDEF
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #49
  between decs ::= (*) 
  and     fundec ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE 
  and     fundecs ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fundecs 
  and     NameTy ::= (*) ID 
  and     fundec ::= (*) ID LPAREN TyFields RPAREN SEMICOLON 
  and     fundecs ::= (*) ID LPAREN TyFields RPAREN SEMICOLON fundecs 
  under symbol ID
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #49
  between decs ::= (*) 
  under symbol IN
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #49
  between decs ::= (*) 
  and     vardec ::= (*) VAR ID COLON NameTy ASSIGN Exp 
  and     vardec ::= (*) VAR ID ASSIGN Exp 
  under symbol VAR
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #49
  between decs ::= (*) 
  and     tydec ::= (*) TYPEDEF Ty ID tydecs 
  and     tydec ::= (*) TYPEDEF Ty ID 
  under symbol TYPEDEF
  Resolved in favor of shifting.

*** Reduce/Reduce conflict found in state #12
  between fundecs ::= (*) 
  and     decs ::= (*) 
  under symbols: {IN}
  Resolved in favor of the second production.

*** Shift/Reduce conflict found in state #12
  between fundecs ::= (*) 
  and     fundec ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE 
  and     fundecs ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fundecs 
  and     NameTy ::= (*) ID 
  and     fundec ::= (*) ID LPAREN TyFields RPAREN SEMICOLON 
  and     fundecs ::= (*) ID LPAREN TyFields RPAREN SEMICOLON fundecs 
  under symbol ID
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #12
  between fundecs ::= (*) 
  under symbol IN
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #12
  between fundecs ::= (*) 
  and     vardec ::= (*) VAR ID COLON NameTy ASSIGN Exp 
  and     vardec ::= (*) VAR ID ASSIGN Exp 
  under symbol VAR
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #12
  between fundecs ::= (*) 
  and     tydec ::= (*) TYPEDEF Ty ID tydecs 
  and     tydec ::= (*) TYPEDEF Ty ID 
  under symbol TYPEDEF
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #12
  between decs ::= (*) 
  and     fundec ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE 
  and     fundecs ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fundecs 
  and     NameTy ::= (*) ID 
  and     fundec ::= (*) ID LPAREN TyFields RPAREN SEMICOLON 
  and     fundecs ::= (*) ID LPAREN TyFields RPAREN SEMICOLON fundecs 
  under symbol ID
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #12
  between decs ::= (*) 
  under symbol IN
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #12
  between decs ::= (*) 
  and     vardec ::= (*) VAR ID COLON NameTy ASSIGN Exp 
  and     vardec ::= (*) VAR ID ASSIGN Exp 
  under symbol VAR
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #12
  between decs ::= (*) 
  and     tydec ::= (*) TYPEDEF Ty ID tydecs 
  and     tydec ::= (*) TYPEDEF Ty ID 
  under symbol TYPEDEF
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #114
  between TyFields ::= (*) 
  and     TyFields ::= (*) ID COLON ID TyFields 
  and     NameTy ::= (*) ID 
  under symbol ID
  Resolved in favor of shifting.

*** Reduce/Reduce conflict found in state #96
  between fundec ::= NameTy ID LPAREN TyFields RPAREN LBRACE Exp RBRACE (*) 
  and     fundecs ::= (*) 
  under symbols: {ID, IN, VAR, TYPEDEF}
  Resolved in favor of the first production.

*** Shift/Reduce conflict found in state #96
  between fundec ::= NameTy ID LPAREN TyFields RPAREN LBRACE Exp RBRACE (*) 
  and     fundecs ::= (*) ID LPAREN TyFields RPAREN SEMICOLON fundecs 
  and     NameTy ::= (*) ID 
  and     fundecs ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fundecs 
  under symbol ID
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #96
  between fundec ::= NameTy ID LPAREN TyFields RPAREN LBRACE Exp RBRACE (*) 
  under symbol IN
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #96
  between fundec ::= NameTy ID LPAREN TyFields RPAREN LBRACE Exp RBRACE (*) 
  under symbol VAR
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #96
  between fundec ::= NameTy ID LPAREN TyFields RPAREN LBRACE Exp RBRACE (*) 
  under symbol TYPEDEF
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #96
  between fundecs ::= (*) 
  and     fundecs ::= (*) ID LPAREN TyFields RPAREN SEMICOLON fundecs 
  and     NameTy ::= (*) ID 
  and     fundecs ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fundecs 
  under symbol ID
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #96
  between fundecs ::= (*) 
  under symbol IN
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #96
  between fundecs ::= (*) 
  under symbol VAR
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #96
  between fundecs ::= (*) 
  under symbol TYPEDEF
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #82
  between fundecs ::= (*) 
  and     fundecs ::= (*) ID LPAREN TyFields RPAREN SEMICOLON fundecs 
  and     NameTy ::= (*) ID 
  and     fundecs ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fundecs 
  under symbol ID
  Resolved in favor of shifting.

*** Reduce/Reduce conflict found in state #85
  between fundecs ::= (*) 
  and     fundec ::= ID LPAREN TyFields RPAREN LBRACE Exp RBRACE (*) 
  under symbols: {ID, IN, VAR, TYPEDEF}
  Resolved in favor of the second production.

*** Shift/Reduce conflict found in state #85
  between fundecs ::= (*) 
  and     fundecs ::= (*) ID LPAREN TyFields RPAREN SEMICOLON fundecs 
  and     NameTy ::= (*) ID 
  and     fundecs ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fundecs 
  under symbol ID
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #85
  between fundecs ::= (*) 
  under symbol IN
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #85
  between fundecs ::= (*) 
  under symbol VAR
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #85
  between fundecs ::= (*) 
  under symbol TYPEDEF
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #85
  between fundec ::= ID LPAREN TyFields RPAREN LBRACE Exp RBRACE (*) 
  and     fundecs ::= (*) ID LPAREN TyFields RPAREN SEMICOLON fundecs 
  and     NameTy ::= (*) ID 
  and     fundecs ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fundecs 
  under symbol ID
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #85
  between fundec ::= ID LPAREN TyFields RPAREN LBRACE Exp RBRACE (*) 
  under symbol IN
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #85
  between fundec ::= ID LPAREN TyFields RPAREN LBRACE Exp RBRACE (*) 
  under symbol VAR
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #85
  between fundec ::= ID LPAREN TyFields RPAREN LBRACE Exp RBRACE (*) 
  under symbol TYPEDEF
  Resolved in favor of shifting.

*** Reduce/Reduce conflict found in state #62
  between fundecs ::= (*) 
  and     fundec ::= ID LPAREN TyFields RPAREN SEMICOLON (*) 
  under symbols: {ID, IN, VAR, TYPEDEF}
  Resolved in favor of the second production.

*** Shift/Reduce conflict found in state #62
  between fundecs ::= (*) 
  and     fundecs ::= (*) ID LPAREN TyFields RPAREN SEMICOLON fundecs 
  and     NameTy ::= (*) ID 
  and     fundecs ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fundecs 
  under symbol ID
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #62
  between fundecs ::= (*) 
  under symbol IN
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #62
  between fundecs ::= (*) 
  under symbol VAR
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #62
  between fundecs ::= (*) 
  under symbol TYPEDEF
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #62
  between fundec ::= ID LPAREN TyFields RPAREN SEMICOLON (*) 
  and     fundecs ::= (*) ID LPAREN TyFields RPAREN SEMICOLON fundecs 
  and     NameTy ::= (*) ID 
  and     fundecs ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fundecs 
  under symbol ID
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #62
  between fundec ::= ID LPAREN TyFields RPAREN SEMICOLON (*) 
  under symbol IN
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #62
  between fundec ::= ID LPAREN TyFields RPAREN SEMICOLON (*) 
  under symbol VAR
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #62
  between fundec ::= ID LPAREN TyFields RPAREN SEMICOLON (*) 
  under symbol TYPEDEF
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #80
  between fundecs ::= (*) 
  and     fundecs ::= (*) ID LPAREN TyFields RPAREN SEMICOLON fundecs 
  and     NameTy ::= (*) ID 
  and     fundecs ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fundecs 
  under symbol ID
  Resolved in favor of shifting.

  Checking for non-reduced productions...
*** More conflicts encountered than expected -- parser generation aborted
===== Terminals =====
DIVIDE GE UMINUS LPAREN INT 
ARRAY FOR MINUS RPAREN SEMICOLON 
AND LT NIL IN OR 
COMMA TYPEDEF PLUS ASSIGN IF 
DOT ID LE OF EOF 
error NEQ BREAK EQ LBRACK 
TIMES COLON LBRACE ELSE RBRACK 
TO WHILE LET THEN RBRACE 
END STRING GT VAR DO 


===== Non terminals =====
Ty decs ExpListH Var tydec 
NameTy $START ExpSeq Head Tail 
fundec Exp If fundecs AssignExp 
TyFields Rest Dec tydecs vardec 
ExpList 

===== Productions =====
fundecs ::= 
fundecs ::= ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fundecs 
fundecs ::= NameTy ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fundecs 
fundecs ::= ID LPAREN TyFields RPAREN SEMICOLON fundecs 
fundecs ::= NameTy ID LPAREN TyFields RPAREN SEMICOLON fundecs 
fundec ::= fundecs 
fundec ::= ID LPAREN TyFields RPAREN LBRACE Exp RBRACE 
fundec ::= NameTy ID LPAREN TyFields RPAREN LBRACE Exp RBRACE 
fundec ::= ID LPAREN TyFields RPAREN SEMICOLON 
fundec ::= NameTy ID LPAREN TyFields RPAREN SEMICOLON 
tydecs ::= 
tydecs ::= TYPEDEF Ty ID tydecs 
tydec ::= TYPEDEF Ty ID tydecs 
tydec ::= TYPEDEF Ty ID 
vardec ::= VAR ID COLON NameTy ASSIGN Exp 
vardec ::= VAR ID ASSIGN Exp 
Dec ::= fundec 
Dec ::= tydec 
Dec ::= vardec 
decs ::= 
decs ::= Dec decs 
TyFields ::= ID COLON ID TyFields 
TyFields ::= 
NameTy ::= ID 
Ty ::= TyFields 
Ty ::= ARRAY OF ID 
Ty ::= NameTy 
Var ::= Var DOT ID 
Var ::= ID LBRACK Exp RBRACK 
Var ::= ID 
If ::= IF Exp THEN Exp ELSE Exp 
If ::= IF Exp THEN Exp 
Rest ::= 
Rest ::= Exp 
Rest ::= Exp SEMICOLON Rest 
ExpSeq ::= Rest 
Exp ::= ID LPAREN ExpList RPAREN 
Exp ::= LPAREN ExpSeq RPAREN 
Exp ::= If 
Exp ::= FOR vardec TO Exp DO Exp 
Exp ::= FOR AssignExp TO Exp DO Exp 
Exp ::= LET decs IN ExpSeq END 
Exp ::= BREAK SEMICOLON 
Exp ::= ID LBRACK Exp RBRACK OF Exp 
Exp ::= WHILE Exp DO Exp 
Exp ::= NIL 
Exp ::= STRING 
Exp ::= Exp GE Exp 
Exp ::= Exp GT Exp 
Exp ::= Exp LE Exp 
Exp ::= Exp LT Exp 
Exp ::= Exp NEQ Exp 
Exp ::= Exp EQ Exp 
Exp ::= Var ASSIGN Exp 
Exp ::= MINUS Exp 
Exp ::= Exp DIVIDE Exp 
Exp ::= Exp TIMES Exp 
Exp ::= Exp PLUS Exp 
Exp ::= Exp MINUS Exp 
Exp ::= INT 
Exp ::= Var 
Exp ::= error 
$START ::= Exp EOF 

===== Viable Prefix Recognizer =====
START lalr_state [0]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp EQ Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp GE Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= (*) Var DOT ID , {EOF DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
  [Exp ::= (*) INT , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) MINUS Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp LE Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= (*) ID , {EOF DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
  [Exp ::= (*) error , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp TIMES Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp NEQ Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) STRING , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) LET decs IN ExpSeq END , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) ID LPAREN ExpList RPAREN , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [If ::= (*) IF Exp THEN Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp MINUS Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp GT Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) If , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= (*) ID LBRACK Exp RBRACK , {EOF DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
  [Exp ::= (*) Var , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp LT Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) NIL , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) FOR AssignExp TO Exp DO Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [$START ::= (*) Exp EOF , {EOF }]
}
transition on BREAK to state [15]
transition on Var to state [14]
transition on LPAREN to state [13]
transition on LET to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [7]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [1]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp EQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp GE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Var ::= (*) Var DOT ID , {EOF ID SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) INT , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= MINUS (*) Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) MINUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp LE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Var ::= (*) ID , {EOF ID SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) error , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp TIMES Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp NEQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) STRING , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) LET decs IN ExpSeq END , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) ID LPAREN ExpList RPAREN , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [If ::= (*) IF Exp THEN Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp MINUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp GT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) If , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Var ::= (*) ID LBRACK Exp RBRACK , {EOF ID SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Var , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp LT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) NIL , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) FOR AssignExp TO Exp DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
}
transition on BREAK to state [15]
transition on Var to state [14]
transition on LPAREN to state [13]
transition on LET to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [149]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [2]: {
  [Exp ::= INT (*) , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
}

-------------------
lalr_state [3]: {
  [Exp ::= (*) Exp PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) BREAK SEMICOLON , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Var ::= (*) Var DOT ID , {DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN DO }]
  [Exp ::= (*) INT , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= WHILE (*) Exp DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) WHILE Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Var ::= (*) ID , {DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN DO }]
  [Exp ::= (*) error , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) STRING , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) LET decs IN ExpSeq END , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) ID LPAREN ExpList RPAREN , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [If ::= (*) IF Exp THEN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Var ASSIGN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) If , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Var ::= (*) ID LBRACK Exp RBRACK , {DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN DO }]
  [Exp ::= (*) Var , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) NIL , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) FOR AssignExp TO Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
}
transition on BREAK to state [15]
transition on Var to state [14]
transition on LPAREN to state [13]
transition on LET to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [146]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [4]: {
  [Exp ::= If (*) , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
}

-------------------
lalr_state [5]: {
  [vardec ::= (*) VAR ID COLON NameTy ASSIGN Exp , {TO }]
  [Exp ::= FOR (*) vardec TO Exp DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [vardec ::= (*) VAR ID ASSIGN Exp , {TO }]
  [Exp ::= FOR (*) AssignExp TO Exp DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
}
transition on AssignExp to state [137]
transition on vardec to state [136]
transition on VAR to state [52]

-------------------
lalr_state [6]: {
  [Exp ::= NIL (*) , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
}

-------------------
lalr_state [7]: {
  [Exp ::= Exp (*) GT Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) NEQ Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) PLUS Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) LE Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) EQ Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) MINUS Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) GE Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) LT Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) TIMES Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [$START ::= Exp (*) EOF , {EOF }]
}
transition on LT to state [30]
transition on TIMES to state [29]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on EOF to state [135]
transition on NEQ to state [24]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on MINUS to state [21]

-------------------
lalr_state [8]: {
  [Exp ::= STRING (*) , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
}

-------------------
lalr_state [9]: {
  [Exp ::= (*) Exp PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) Exp EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) Exp GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) BREAK SEMICOLON , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Var ::= (*) Var DOT ID , {DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN }]
  [Exp ::= (*) INT , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) Exp LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) WHILE Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Var ::= (*) ID , {DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN }]
  [Exp ::= (*) error , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) Exp TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) Exp NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) STRING , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) LET decs IN ExpSeq END , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) ID LPAREN ExpList RPAREN , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [If ::= IF (*) Exp THEN Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [If ::= (*) IF Exp THEN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) Exp MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) Var ASSIGN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) Exp GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) If , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Var ::= (*) ID LBRACK Exp RBRACK , {DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN }]
  [Exp ::= (*) Var , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) Exp DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) Exp LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) NIL , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) FOR AssignExp TO Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [If ::= IF (*) Exp THEN Exp ELSE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
}
transition on BREAK to state [15]
transition on Var to state [14]
transition on LPAREN to state [13]
transition on LET to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [130]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [10]: {
  [Exp ::= ID (*) LPAREN ExpList RPAREN , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Var ::= ID (*) LBRACK Exp RBRACK , {EOF ID SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Var ::= ID (*) , {EOF ID SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= ID (*) LBRACK Exp RBRACK OF Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
}
transition on LPAREN to state [123]
transition on LBRACK to state [122]

-------------------
lalr_state [11]: {
  [Exp ::= error (*) , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
}

-------------------
lalr_state [12]: {
  [fundec ::= (*) fundecs , {ID IN VAR TYPEDEF }]
  [fundecs ::= (*) , {ID IN VAR TYPEDEF }]
  [Dec ::= (*) tydec , {ID IN VAR TYPEDEF }]
  [tydec ::= (*) TYPEDEF Ty ID tydecs , {ID IN VAR TYPEDEF }]
  [fundec ::= (*) NameTy ID LPAREN TyFields RPAREN LBRACE Exp RBRACE , {ID IN VAR TYPEDEF }]
  [fundecs ::= (*) NameTy ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fundecs , {ID IN VAR TYPEDEF }]
  [decs ::= (*) , {IN }]
  [vardec ::= (*) VAR ID COLON NameTy ASSIGN Exp , {ID IN VAR TYPEDEF }]
  [fundec ::= (*) NameTy ID LPAREN TyFields RPAREN SEMICOLON , {ID IN VAR TYPEDEF }]
  [fundecs ::= (*) NameTy ID LPAREN TyFields RPAREN SEMICOLON fundecs , {ID IN VAR TYPEDEF }]
  [Exp ::= LET (*) decs IN ExpSeq END , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Dec ::= (*) fundec , {ID IN VAR TYPEDEF }]
  [fundec ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE , {ID IN VAR TYPEDEF }]
  [fundecs ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fundecs , {ID IN VAR TYPEDEF }]
  [NameTy ::= (*) ID , {ID }]
  [Dec ::= (*) vardec , {ID IN VAR TYPEDEF }]
  [tydec ::= (*) TYPEDEF Ty ID , {ID IN VAR TYPEDEF }]
  [fundec ::= (*) ID LPAREN TyFields RPAREN SEMICOLON , {ID IN VAR TYPEDEF }]
  [fundecs ::= (*) ID LPAREN TyFields RPAREN SEMICOLON fundecs , {ID IN VAR TYPEDEF }]
  [decs ::= (*) Dec decs , {IN }]
  [vardec ::= (*) VAR ID ASSIGN Exp , {ID IN VAR TYPEDEF }]
}
transition on fundec to state [56]
transition on ID to state [55]
transition on tydec to state [54]
transition on NameTy to state [53]
transition on VAR to state [52]
transition on TYPEDEF to state [51]
transition on decs to state [50]
transition on Dec to state [49]
transition on vardec to state [48]
transition on fundecs to state [47]

-------------------
lalr_state [13]: {
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp GT Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp PLUS Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Rest ::= (*) Exp SEMICOLON Rest , {RPAREN }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp EQ Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) error , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= (*) ID , {SEMICOLON RPAREN DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
  [Exp ::= (*) If , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp GE Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp TIMES Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Rest ::= (*) Exp , {RPAREN }]
  [Exp ::= (*) BREAK SEMICOLON , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp NEQ Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Var , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= (*) ID LBRACK Exp RBRACK , {SEMICOLON RPAREN DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
  [Exp ::= LPAREN (*) ExpSeq RPAREN , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) STRING , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp DIVIDE Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Rest ::= (*) , {RPAREN }]
  [Exp ::= (*) LET decs IN ExpSeq END , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp LT Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) INT , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= (*) Var DOT ID , {SEMICOLON RPAREN DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
  [Exp ::= (*) ID LPAREN ExpList RPAREN , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) NIL , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) MINUS Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [If ::= (*) IF Exp THEN Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) FOR AssignExp TO Exp DO Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp LE Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp MINUS Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [ExpSeq ::= (*) Rest , {RPAREN }]
  [Exp ::= (*) WHILE Exp DO Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Var ASSIGN Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
}
transition on BREAK to state [15]
transition on Var to state [14]
transition on LPAREN to state [13]
transition on LET to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on Rest to state [43]
transition on STRING to state [8]
transition on Exp to state [42]
transition on ExpSeq to state [41]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on INT to state [2]
transition on WHILE to state [3]
transition on MINUS to state [1]

-------------------
lalr_state [14]: {
  [Exp ::= Var (*) , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Var ::= Var (*) DOT ID , {EOF ID SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Var (*) ASSIGN Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
}
transition on DOT to state [18]
transition on ASSIGN to state [17]

-------------------
lalr_state [15]: {
  [Exp ::= BREAK (*) SEMICOLON , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
}
transition on SEMICOLON to state [16]

-------------------
lalr_state [16]: {
  [Exp ::= BREAK SEMICOLON (*) , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
}

-------------------
lalr_state [17]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp EQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp GE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Var ::= (*) Var DOT ID , {EOF ID SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) INT , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) MINUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp LE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Var ::= (*) ID , {EOF ID SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) error , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp TIMES Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp NEQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) STRING , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) LET decs IN ExpSeq END , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) ID LPAREN ExpList RPAREN , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [If ::= (*) IF Exp THEN Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Var ASSIGN (*) Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp MINUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp GT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) If , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Var ::= (*) ID LBRACK Exp RBRACK , {EOF ID SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Var , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp LT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) NIL , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) FOR AssignExp TO Exp DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
}
transition on BREAK to state [15]
transition on Var to state [14]
transition on LPAREN to state [13]
transition on LET to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [20]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [18]: {
  [Var ::= Var DOT (*) ID , {EOF ID SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR TYPEDEF }]
}
transition on ID to state [19]

-------------------
lalr_state [19]: {
  [Var ::= Var DOT ID (*) , {EOF ID SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR TYPEDEF }]
}

-------------------
lalr_state [20]: {
  [Exp ::= Exp (*) GT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) NEQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) PLUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) LE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) EQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) MINUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) GE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Var ASSIGN Exp (*) , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) LT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) TIMES Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
}
transition on LT to state [30]
transition on TIMES to state [29]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on MINUS to state [21]

-------------------
lalr_state [21]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp EQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp GE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Var ::= (*) Var DOT ID , {EOF ID SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) INT , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) MINUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp LE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Var ::= (*) ID , {EOF ID SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) error , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp TIMES Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp NEQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) STRING , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) LET decs IN ExpSeq END , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) ID LPAREN ExpList RPAREN , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [If ::= (*) IF Exp THEN Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp MINUS (*) Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp MINUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp GT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) If , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Var ::= (*) ID LBRACK Exp RBRACK , {EOF ID SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Var , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp LT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) NIL , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) FOR AssignExp TO Exp DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
}
transition on BREAK to state [15]
transition on Var to state [14]
transition on LPAREN to state [13]
transition on LET to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [40]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [22]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp EQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp GE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Var ::= (*) Var DOT ID , {EOF ID SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) INT , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) MINUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp LE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Var ::= (*) ID , {EOF ID SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) error , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp TIMES Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp NEQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) STRING , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) LET decs IN ExpSeq END , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) ID LPAREN ExpList RPAREN , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [If ::= (*) IF Exp THEN Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp MINUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp GT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) If , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Var ::= (*) ID LBRACK Exp RBRACK , {EOF ID SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp DIVIDE (*) Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Var , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp LT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) NIL , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) FOR AssignExp TO Exp DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
}
transition on BREAK to state [15]
transition on Var to state [14]
transition on LPAREN to state [13]
transition on LET to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [39]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [23]: {
  [Exp ::= Exp GE (*) Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp PLUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp EQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp GE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Var ::= (*) Var DOT ID , {EOF ID SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) INT , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) MINUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp LE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Var ::= (*) ID , {EOF ID SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) error , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp TIMES Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp NEQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) STRING , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) LET decs IN ExpSeq END , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) ID LPAREN ExpList RPAREN , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [If ::= (*) IF Exp THEN Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp MINUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp GT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) If , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Var ::= (*) ID LBRACK Exp RBRACK , {EOF ID SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Var , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp LT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) NIL , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) FOR AssignExp TO Exp DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
}
transition on BREAK to state [15]
transition on Var to state [14]
transition on LPAREN to state [13]
transition on LET to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [38]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [24]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp EQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp GE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Var ::= (*) Var DOT ID , {EOF ID SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) INT , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) MINUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp LE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Var ::= (*) ID , {EOF ID SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) error , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp NEQ (*) Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp TIMES Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp NEQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) STRING , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) LET decs IN ExpSeq END , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) ID LPAREN ExpList RPAREN , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [If ::= (*) IF Exp THEN Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp MINUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp GT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) If , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Var ::= (*) ID LBRACK Exp RBRACK , {EOF ID SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Var , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp LT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) NIL , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) FOR AssignExp TO Exp DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
}
transition on BREAK to state [15]
transition on Var to state [14]
transition on LPAREN to state [13]
transition on LET to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [37]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [25]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp EQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp GE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Var ::= (*) Var DOT ID , {EOF ID SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) INT , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) MINUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp LE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Var ::= (*) ID , {EOF ID SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) error , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp TIMES Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp NEQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) STRING , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) LET decs IN ExpSeq END , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) ID LPAREN ExpList RPAREN , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [If ::= (*) IF Exp THEN Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp MINUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp GT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) If , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Var ::= (*) ID LBRACK Exp RBRACK , {EOF ID SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Var , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp LT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) NIL , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) FOR AssignExp TO Exp DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp PLUS (*) Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
}
transition on BREAK to state [15]
transition on Var to state [14]
transition on LPAREN to state [13]
transition on LET to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [36]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [26]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp EQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp GE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Var ::= (*) Var DOT ID , {EOF ID SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) INT , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) MINUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp LE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Var ::= (*) ID , {EOF ID SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) error , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp TIMES Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp NEQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) STRING , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) LET decs IN ExpSeq END , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) ID LPAREN ExpList RPAREN , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [If ::= (*) IF Exp THEN Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp MINUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp GT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) If , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Var ::= (*) ID LBRACK Exp RBRACK , {EOF ID SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Var , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp LT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) NIL , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) FOR AssignExp TO Exp DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp EQ (*) Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
}
transition on BREAK to state [15]
transition on Var to state [14]
transition on LPAREN to state [13]
transition on LET to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [35]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [27]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp EQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp GE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Var ::= (*) Var DOT ID , {EOF ID SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) INT , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp LE (*) Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) MINUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp LE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Var ::= (*) ID , {EOF ID SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) error , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp TIMES Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp NEQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) STRING , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) LET decs IN ExpSeq END , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) ID LPAREN ExpList RPAREN , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [If ::= (*) IF Exp THEN Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp MINUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp GT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) If , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Var ::= (*) ID LBRACK Exp RBRACK , {EOF ID SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Var , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp LT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) NIL , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) FOR AssignExp TO Exp DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
}
transition on BREAK to state [15]
transition on Var to state [14]
transition on LPAREN to state [13]
transition on LET to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [34]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [28]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp EQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp GE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Var ::= (*) Var DOT ID , {EOF ID SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) INT , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) MINUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp LE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Var ::= (*) ID , {EOF ID SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) error , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp TIMES Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp NEQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) STRING , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) LET decs IN ExpSeq END , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) ID LPAREN ExpList RPAREN , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [If ::= (*) IF Exp THEN Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp MINUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp GT (*) Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp GT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) If , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Var ::= (*) ID LBRACK Exp RBRACK , {EOF ID SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Var , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp LT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) NIL , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) FOR AssignExp TO Exp DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
}
transition on BREAK to state [15]
transition on Var to state [14]
transition on LPAREN to state [13]
transition on LET to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [33]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [29]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp EQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp GE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Var ::= (*) Var DOT ID , {EOF ID SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) INT , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) MINUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp LE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Var ::= (*) ID , {EOF ID SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp TIMES (*) Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) error , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp TIMES Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp NEQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) STRING , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) LET decs IN ExpSeq END , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) ID LPAREN ExpList RPAREN , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [If ::= (*) IF Exp THEN Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp MINUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp GT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) If , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Var ::= (*) ID LBRACK Exp RBRACK , {EOF ID SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Var , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp LT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) NIL , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) FOR AssignExp TO Exp DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
}
transition on BREAK to state [15]
transition on Var to state [14]
transition on LPAREN to state [13]
transition on LET to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [32]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [30]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp EQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp GE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Var ::= (*) Var DOT ID , {EOF ID SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) INT , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) MINUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp LE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Var ::= (*) ID , {EOF ID SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) error , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp TIMES Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp NEQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) STRING , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) LET decs IN ExpSeq END , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) ID LPAREN ExpList RPAREN , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [If ::= (*) IF Exp THEN Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp MINUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp GT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) If , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Var ::= (*) ID LBRACK Exp RBRACK , {EOF ID SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp LT (*) Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Var , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp LT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) NIL , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) FOR AssignExp TO Exp DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
}
transition on BREAK to state [15]
transition on Var to state [14]
transition on LPAREN to state [13]
transition on LET to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [31]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [31]: {
  [Exp ::= Exp (*) GT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) NEQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) PLUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) LE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) EQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) MINUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp LT Exp (*) , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) GE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) LT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) TIMES Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
}
transition on LT to state [30]
transition on TIMES to state [29]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on MINUS to state [21]

-------------------
lalr_state [32]: {
  [Exp ::= Exp (*) GT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) NEQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) PLUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) LE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) EQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) MINUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) GE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) LT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp TIMES Exp (*) , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) TIMES Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
}
transition on LT to state [30]
transition on TIMES to state [29]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on MINUS to state [21]

-------------------
lalr_state [33]: {
  [Exp ::= Exp (*) GT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) NEQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) PLUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) LE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) EQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) MINUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) GE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) LT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) TIMES Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp GT Exp (*) , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
}
transition on LT to state [30]
transition on TIMES to state [29]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on MINUS to state [21]

-------------------
lalr_state [34]: {
  [Exp ::= Exp (*) GT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) NEQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) PLUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp LE Exp (*) , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) LE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) EQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) MINUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) GE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) LT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) TIMES Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
}
transition on LT to state [30]
transition on TIMES to state [29]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on MINUS to state [21]

-------------------
lalr_state [35]: {
  [Exp ::= Exp (*) GT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) NEQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) PLUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp EQ Exp (*) , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) LE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) EQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) MINUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) GE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) LT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) TIMES Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
}
transition on LT to state [30]
transition on TIMES to state [29]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on MINUS to state [21]

-------------------
lalr_state [36]: {
  [Exp ::= Exp (*) GT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp PLUS Exp (*) , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) NEQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) PLUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) LE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) EQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) MINUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) GE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) LT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) TIMES Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
}
transition on LT to state [30]
transition on TIMES to state [29]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on MINUS to state [21]

-------------------
lalr_state [37]: {
  [Exp ::= Exp NEQ Exp (*) , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) GT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) NEQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) PLUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) LE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) EQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) MINUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) GE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) LT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) TIMES Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
}
transition on LT to state [30]
transition on TIMES to state [29]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on MINUS to state [21]

-------------------
lalr_state [38]: {
  [Exp ::= Exp (*) GT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) NEQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) PLUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) LE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) EQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) MINUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp GE Exp (*) , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) GE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) LT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) TIMES Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
}
transition on LT to state [30]
transition on TIMES to state [29]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on MINUS to state [21]

-------------------
lalr_state [39]: {
  [Exp ::= Exp (*) GT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) NEQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) PLUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp DIVIDE Exp (*) , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) LE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) EQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) MINUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) GE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) LT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) TIMES Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
}
transition on LT to state [30]
transition on TIMES to state [29]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on MINUS to state [21]

-------------------
lalr_state [40]: {
  [Exp ::= Exp (*) GT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) NEQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) PLUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) LE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) EQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp MINUS Exp (*) , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) MINUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) GE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) LT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) TIMES Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
}
transition on LT to state [30]
transition on TIMES to state [29]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on MINUS to state [21]

-------------------
lalr_state [41]: {
  [Exp ::= LPAREN ExpSeq (*) RPAREN , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
}
transition on RPAREN to state [46]

-------------------
lalr_state [42]: {
  [Exp ::= Exp (*) GT Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= Exp (*) NEQ Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Rest ::= Exp (*) SEMICOLON Rest , {RPAREN END }]
  [Exp ::= Exp (*) PLUS Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= Exp (*) LE Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= Exp (*) EQ Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= Exp (*) DIVIDE Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= Exp (*) MINUS Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= Exp (*) GE Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= Exp (*) LT Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= Exp (*) TIMES Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Rest ::= Exp (*) , {RPAREN END }]
}
transition on LT to state [30]
transition on TIMES to state [29]
transition on SEMICOLON to state [44]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on MINUS to state [21]

-------------------
lalr_state [43]: {
  [ExpSeq ::= Rest (*) , {RPAREN END }]
}

-------------------
lalr_state [44]: {
  [Exp ::= (*) Exp PLUS Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) Exp EQ Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) Exp GE Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) BREAK SEMICOLON , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Rest ::= (*) , {RPAREN END }]
  [Var ::= (*) Var DOT ID , {SEMICOLON RPAREN DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN END }]
  [Exp ::= (*) INT , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) MINUS Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) Exp LE Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) WHILE Exp DO Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Rest ::= Exp SEMICOLON (*) Rest , {RPAREN END }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Rest ::= (*) Exp SEMICOLON Rest , {RPAREN END }]
  [Var ::= (*) ID , {SEMICOLON RPAREN DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN END }]
  [Exp ::= (*) error , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) Exp TIMES Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) Exp NEQ Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) STRING , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) LET decs IN ExpSeq END , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) ID LPAREN ExpList RPAREN , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [If ::= (*) IF Exp THEN Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) Exp MINUS Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) Var ASSIGN Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) Exp GT Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) If , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Rest ::= (*) Exp , {RPAREN END }]
  [Var ::= (*) ID LBRACK Exp RBRACK , {SEMICOLON RPAREN DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN END }]
  [Exp ::= (*) Var , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) Exp DIVIDE Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) Exp LT Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) NIL , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) FOR AssignExp TO Exp DO Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
}
transition on BREAK to state [15]
transition on Var to state [14]
transition on LPAREN to state [13]
transition on LET to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on Rest to state [45]
transition on STRING to state [8]
transition on Exp to state [42]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [45]: {
  [Rest ::= Exp SEMICOLON Rest (*) , {RPAREN END }]
}

-------------------
lalr_state [46]: {
  [Exp ::= LPAREN ExpSeq RPAREN (*) , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
}

-------------------
lalr_state [47]: {
  [fundec ::= fundecs (*) , {ID IN VAR TYPEDEF }]
}

-------------------
lalr_state [48]: {
  [Dec ::= vardec (*) , {ID IN VAR TYPEDEF }]
}

-------------------
lalr_state [49]: {
  [fundec ::= (*) fundecs , {ID IN VAR TYPEDEF }]
  [fundecs ::= (*) , {ID IN VAR TYPEDEF }]
  [Dec ::= (*) tydec , {ID IN VAR TYPEDEF }]
  [tydec ::= (*) TYPEDEF Ty ID tydecs , {ID IN VAR TYPEDEF }]
  [fundec ::= (*) NameTy ID LPAREN TyFields RPAREN LBRACE Exp RBRACE , {ID IN VAR TYPEDEF }]
  [fundecs ::= (*) NameTy ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fundecs , {ID IN VAR TYPEDEF }]
  [decs ::= (*) , {IN }]
  [vardec ::= (*) VAR ID COLON NameTy ASSIGN Exp , {ID IN VAR TYPEDEF }]
  [fundec ::= (*) NameTy ID LPAREN TyFields RPAREN SEMICOLON , {ID IN VAR TYPEDEF }]
  [fundecs ::= (*) NameTy ID LPAREN TyFields RPAREN SEMICOLON fundecs , {ID IN VAR TYPEDEF }]
  [Dec ::= (*) fundec , {ID IN VAR TYPEDEF }]
  [fundec ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE , {ID IN VAR TYPEDEF }]
  [fundecs ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fundecs , {ID IN VAR TYPEDEF }]
  [NameTy ::= (*) ID , {ID }]
  [Dec ::= (*) vardec , {ID IN VAR TYPEDEF }]
  [tydec ::= (*) TYPEDEF Ty ID , {ID IN VAR TYPEDEF }]
  [fundec ::= (*) ID LPAREN TyFields RPAREN SEMICOLON , {ID IN VAR TYPEDEF }]
  [fundecs ::= (*) ID LPAREN TyFields RPAREN SEMICOLON fundecs , {ID IN VAR TYPEDEF }]
  [decs ::= Dec (*) decs , {IN }]
  [decs ::= (*) Dec decs , {IN }]
  [vardec ::= (*) VAR ID ASSIGN Exp , {ID IN VAR TYPEDEF }]
}
transition on fundec to state [56]
transition on ID to state [55]
transition on tydec to state [54]
transition on NameTy to state [53]
transition on VAR to state [52]
transition on TYPEDEF to state [51]
transition on decs to state [121]
transition on Dec to state [49]
transition on vardec to state [48]
transition on fundecs to state [47]

-------------------
lalr_state [50]: {
  [Exp ::= LET decs (*) IN ExpSeq END , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
}
transition on IN to state [118]

-------------------
lalr_state [51]: {
  [TyFields ::= (*) ID COLON ID TyFields , {ID }]
  [tydec ::= TYPEDEF (*) Ty ID , {ID IN VAR TYPEDEF }]
  [Ty ::= (*) TyFields , {ID }]
  [TyFields ::= (*) , {ID }]
  [Ty ::= (*) ARRAY OF ID , {ID }]
  [tydec ::= TYPEDEF (*) Ty ID tydecs , {ID IN VAR TYPEDEF }]
  [NameTy ::= (*) ID , {ID }]
  [Ty ::= (*) NameTy , {ID }]
}
transition on ARRAY to state [109]
transition on NameTy to state [108]
transition on Ty to state [107]
transition on TyFields to state [106]
transition on ID to state [105]

-------------------
lalr_state [52]: {
  [vardec ::= VAR (*) ID COLON NameTy ASSIGN Exp , {ID TO IN VAR TYPEDEF }]
  [vardec ::= VAR (*) ID ASSIGN Exp , {ID TO IN VAR TYPEDEF }]
}
transition on ID to state [97]

-------------------
lalr_state [53]: {
  [fundecs ::= NameTy (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fundecs , {ID IN VAR TYPEDEF }]
  [fundec ::= NameTy (*) ID LPAREN TyFields RPAREN SEMICOLON , {ID IN VAR TYPEDEF }]
  [fundecs ::= NameTy (*) ID LPAREN TyFields RPAREN SEMICOLON fundecs , {ID IN VAR TYPEDEF }]
  [fundec ::= NameTy (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE , {ID IN VAR TYPEDEF }]
}
transition on ID to state [89]

-------------------
lalr_state [54]: {
  [Dec ::= tydec (*) , {ID IN VAR TYPEDEF }]
}

-------------------
lalr_state [55]: {
  [fundec ::= ID (*) LPAREN TyFields RPAREN SEMICOLON , {ID IN VAR TYPEDEF }]
  [fundecs ::= ID (*) LPAREN TyFields RPAREN SEMICOLON fundecs , {ID IN VAR TYPEDEF }]
  [fundec ::= ID (*) LPAREN TyFields RPAREN LBRACE Exp RBRACE , {ID IN VAR TYPEDEF }]
  [NameTy ::= ID (*) , {ID }]
  [fundecs ::= ID (*) LPAREN TyFields RPAREN LBRACE Exp RBRACE fundecs , {ID IN VAR TYPEDEF }]
}
transition on LPAREN to state [57]

-------------------
lalr_state [56]: {
  [Dec ::= fundec (*) , {ID IN VAR TYPEDEF }]
}

-------------------
lalr_state [57]: {
  [TyFields ::= (*) ID COLON ID TyFields , {RPAREN }]
  [fundec ::= ID LPAREN (*) TyFields RPAREN SEMICOLON , {ID IN VAR TYPEDEF }]
  [fundecs ::= ID LPAREN (*) TyFields RPAREN SEMICOLON fundecs , {ID IN VAR TYPEDEF }]
  [TyFields ::= (*) , {RPAREN }]
  [fundec ::= ID LPAREN (*) TyFields RPAREN LBRACE Exp RBRACE , {ID IN VAR TYPEDEF }]
  [fundecs ::= ID LPAREN (*) TyFields RPAREN LBRACE Exp RBRACE fundecs , {ID IN VAR TYPEDEF }]
}
transition on TyFields to state [59]
transition on ID to state [58]

-------------------
lalr_state [58]: {
  [TyFields ::= ID (*) COLON ID TyFields , {ID RPAREN }]
}
transition on COLON to state [86]

-------------------
lalr_state [59]: {
  [fundec ::= ID LPAREN TyFields (*) RPAREN SEMICOLON , {ID IN VAR TYPEDEF }]
  [fundecs ::= ID LPAREN TyFields (*) RPAREN SEMICOLON fundecs , {ID IN VAR TYPEDEF }]
  [fundec ::= ID LPAREN TyFields (*) RPAREN LBRACE Exp RBRACE , {ID IN VAR TYPEDEF }]
  [fundecs ::= ID LPAREN TyFields (*) RPAREN LBRACE Exp RBRACE fundecs , {ID IN VAR TYPEDEF }]
}
transition on RPAREN to state [60]

-------------------
lalr_state [60]: {
  [fundecs ::= ID LPAREN TyFields RPAREN (*) SEMICOLON fundecs , {ID IN VAR TYPEDEF }]
  [fundec ::= ID LPAREN TyFields RPAREN (*) LBRACE Exp RBRACE , {ID IN VAR TYPEDEF }]
  [fundecs ::= ID LPAREN TyFields RPAREN (*) LBRACE Exp RBRACE fundecs , {ID IN VAR TYPEDEF }]
  [fundec ::= ID LPAREN TyFields RPAREN (*) SEMICOLON , {ID IN VAR TYPEDEF }]
}
transition on SEMICOLON to state [62]
transition on LBRACE to state [61]

-------------------
lalr_state [61]: {
  [Exp ::= (*) Exp PLUS Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp EQ Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp GE Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) BREAK SEMICOLON , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= (*) Var DOT ID , {RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
  [Exp ::= (*) INT , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) MINUS Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp LE Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) WHILE Exp DO Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= (*) ID , {RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
  [Exp ::= (*) error , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp TIMES Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp NEQ Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) STRING , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) LET decs IN ExpSeq END , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) ID LPAREN ExpList RPAREN , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [If ::= (*) IF Exp THEN Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [fundec ::= ID LPAREN TyFields RPAREN LBRACE (*) Exp RBRACE , {ID IN VAR TYPEDEF }]
  [fundecs ::= ID LPAREN TyFields RPAREN LBRACE (*) Exp RBRACE fundecs , {ID IN VAR TYPEDEF }]
  [Exp ::= (*) Exp MINUS Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Var ASSIGN Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp GT Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) If , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= (*) ID LBRACK Exp RBRACK , {RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
  [Exp ::= (*) Var , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp DIVIDE Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp LT Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) NIL , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) FOR AssignExp TO Exp DO Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
}
transition on BREAK to state [15]
transition on Var to state [14]
transition on LPAREN to state [13]
transition on LET to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [84]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [62]: {
  [fundecs ::= ID LPAREN TyFields RPAREN SEMICOLON (*) fundecs , {ID IN VAR TYPEDEF }]
  [fundecs ::= (*) NameTy ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fundecs , {ID IN VAR TYPEDEF }]
  [fundecs ::= (*) , {ID IN VAR TYPEDEF }]
  [fundecs ::= (*) ID LPAREN TyFields RPAREN SEMICOLON fundecs , {ID IN VAR TYPEDEF }]
  [NameTy ::= (*) ID , {ID }]
  [fundecs ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fundecs , {ID IN VAR TYPEDEF }]
  [fundecs ::= (*) NameTy ID LPAREN TyFields RPAREN SEMICOLON fundecs , {ID IN VAR TYPEDEF }]
  [fundec ::= ID LPAREN TyFields RPAREN SEMICOLON (*) , {ID IN VAR TYPEDEF }]
}
transition on NameTy to state [65]
transition on fundecs to state [64]
transition on ID to state [63]

-------------------
lalr_state [63]: {
  [fundecs ::= ID (*) LPAREN TyFields RPAREN SEMICOLON fundecs , {ID IN VAR TYPEDEF }]
  [fundecs ::= ID (*) LPAREN TyFields RPAREN LBRACE Exp RBRACE fundecs , {ID IN VAR TYPEDEF }]
  [NameTy ::= ID (*) , {ID }]
}
transition on LPAREN to state [76]

-------------------
lalr_state [64]: {
  [fundecs ::= ID LPAREN TyFields RPAREN SEMICOLON fundecs (*) , {ID IN VAR TYPEDEF }]
}

-------------------
lalr_state [65]: {
  [fundecs ::= NameTy (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fundecs , {ID IN VAR TYPEDEF }]
  [fundecs ::= NameTy (*) ID LPAREN TyFields RPAREN SEMICOLON fundecs , {ID IN VAR TYPEDEF }]
}
transition on ID to state [66]

-------------------
lalr_state [66]: {
  [fundecs ::= NameTy ID (*) LPAREN TyFields RPAREN SEMICOLON fundecs , {ID IN VAR TYPEDEF }]
  [fundecs ::= NameTy ID (*) LPAREN TyFields RPAREN LBRACE Exp RBRACE fundecs , {ID IN VAR TYPEDEF }]
}
transition on LPAREN to state [67]

-------------------
lalr_state [67]: {
  [TyFields ::= (*) ID COLON ID TyFields , {RPAREN }]
  [TyFields ::= (*) , {RPAREN }]
  [fundecs ::= NameTy ID LPAREN (*) TyFields RPAREN SEMICOLON fundecs , {ID IN VAR TYPEDEF }]
  [fundecs ::= NameTy ID LPAREN (*) TyFields RPAREN LBRACE Exp RBRACE fundecs , {ID IN VAR TYPEDEF }]
}
transition on TyFields to state [68]
transition on ID to state [58]

-------------------
lalr_state [68]: {
  [fundecs ::= NameTy ID LPAREN TyFields (*) RPAREN SEMICOLON fundecs , {ID IN VAR TYPEDEF }]
  [fundecs ::= NameTy ID LPAREN TyFields (*) RPAREN LBRACE Exp RBRACE fundecs , {ID IN VAR TYPEDEF }]
}
transition on RPAREN to state [69]

-------------------
lalr_state [69]: {
  [fundecs ::= NameTy ID LPAREN TyFields RPAREN (*) SEMICOLON fundecs , {ID IN VAR TYPEDEF }]
  [fundecs ::= NameTy ID LPAREN TyFields RPAREN (*) LBRACE Exp RBRACE fundecs , {ID IN VAR TYPEDEF }]
}
transition on SEMICOLON to state [71]
transition on LBRACE to state [70]

-------------------
lalr_state [70]: {
  [Exp ::= (*) Exp PLUS Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp EQ Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp GE Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) BREAK SEMICOLON , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [fundecs ::= NameTy ID LPAREN TyFields RPAREN LBRACE (*) Exp RBRACE fundecs , {ID IN VAR TYPEDEF }]
  [Var ::= (*) Var DOT ID , {RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
  [Exp ::= (*) INT , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) MINUS Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp LE Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) WHILE Exp DO Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= (*) ID , {RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
  [Exp ::= (*) error , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp TIMES Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp NEQ Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) STRING , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) LET decs IN ExpSeq END , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) ID LPAREN ExpList RPAREN , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [If ::= (*) IF Exp THEN Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp MINUS Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Var ASSIGN Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp GT Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) If , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= (*) ID LBRACK Exp RBRACK , {RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
  [Exp ::= (*) Var , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp DIVIDE Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp LT Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) NIL , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) FOR AssignExp TO Exp DO Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
}
transition on BREAK to state [15]
transition on Var to state [14]
transition on LPAREN to state [13]
transition on LET to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [73]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [71]: {
  [fundecs ::= (*) NameTy ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fundecs , {ID IN VAR TYPEDEF }]
  [fundecs ::= NameTy ID LPAREN TyFields RPAREN SEMICOLON (*) fundecs , {ID IN VAR TYPEDEF }]
  [fundecs ::= (*) , {ID IN VAR TYPEDEF }]
  [fundecs ::= (*) ID LPAREN TyFields RPAREN SEMICOLON fundecs , {ID IN VAR TYPEDEF }]
  [NameTy ::= (*) ID , {ID }]
  [fundecs ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fundecs , {ID IN VAR TYPEDEF }]
  [fundecs ::= (*) NameTy ID LPAREN TyFields RPAREN SEMICOLON fundecs , {ID IN VAR TYPEDEF }]
}
transition on NameTy to state [65]
transition on fundecs to state [72]
transition on ID to state [63]

-------------------
lalr_state [72]: {
  [fundecs ::= NameTy ID LPAREN TyFields RPAREN SEMICOLON fundecs (*) , {ID IN VAR TYPEDEF }]
}

-------------------
lalr_state [73]: {
  [Exp ::= Exp (*) GT Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) NEQ Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) PLUS Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) LE Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) EQ Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) DIVIDE Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) MINUS Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) GE Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) LT Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [fundecs ::= NameTy ID LPAREN TyFields RPAREN LBRACE Exp (*) RBRACE fundecs , {ID IN VAR TYPEDEF }]
  [Exp ::= Exp (*) TIMES Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
}
transition on LT to state [30]
transition on RBRACE to state [74]
transition on TIMES to state [29]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on MINUS to state [21]

-------------------
lalr_state [74]: {
  [fundecs ::= (*) NameTy ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fundecs , {ID IN VAR TYPEDEF }]
  [fundecs ::= (*) , {ID IN VAR TYPEDEF }]
  [fundecs ::= NameTy ID LPAREN TyFields RPAREN LBRACE Exp RBRACE (*) fundecs , {ID IN VAR TYPEDEF }]
  [fundecs ::= (*) ID LPAREN TyFields RPAREN SEMICOLON fundecs , {ID IN VAR TYPEDEF }]
  [NameTy ::= (*) ID , {ID }]
  [fundecs ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fundecs , {ID IN VAR TYPEDEF }]
  [fundecs ::= (*) NameTy ID LPAREN TyFields RPAREN SEMICOLON fundecs , {ID IN VAR TYPEDEF }]
}
transition on NameTy to state [65]
transition on fundecs to state [75]
transition on ID to state [63]

-------------------
lalr_state [75]: {
  [fundecs ::= NameTy ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fundecs (*) , {ID IN VAR TYPEDEF }]
}

-------------------
lalr_state [76]: {
  [TyFields ::= (*) ID COLON ID TyFields , {RPAREN }]
  [fundecs ::= ID LPAREN (*) TyFields RPAREN SEMICOLON fundecs , {ID IN VAR TYPEDEF }]
  [TyFields ::= (*) , {RPAREN }]
  [fundecs ::= ID LPAREN (*) TyFields RPAREN LBRACE Exp RBRACE fundecs , {ID IN VAR TYPEDEF }]
}
transition on TyFields to state [77]
transition on ID to state [58]

-------------------
lalr_state [77]: {
  [fundecs ::= ID LPAREN TyFields (*) RPAREN SEMICOLON fundecs , {ID IN VAR TYPEDEF }]
  [fundecs ::= ID LPAREN TyFields (*) RPAREN LBRACE Exp RBRACE fundecs , {ID IN VAR TYPEDEF }]
}
transition on RPAREN to state [78]

-------------------
lalr_state [78]: {
  [fundecs ::= ID LPAREN TyFields RPAREN (*) SEMICOLON fundecs , {ID IN VAR TYPEDEF }]
  [fundecs ::= ID LPAREN TyFields RPAREN (*) LBRACE Exp RBRACE fundecs , {ID IN VAR TYPEDEF }]
}
transition on SEMICOLON to state [80]
transition on LBRACE to state [79]

-------------------
lalr_state [79]: {
  [Exp ::= (*) Exp PLUS Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp EQ Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp GE Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) BREAK SEMICOLON , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= (*) Var DOT ID , {RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
  [Exp ::= (*) INT , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) MINUS Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp LE Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) WHILE Exp DO Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= (*) ID , {RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
  [Exp ::= (*) error , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp TIMES Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp NEQ Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) STRING , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) LET decs IN ExpSeq END , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) ID LPAREN ExpList RPAREN , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [If ::= (*) IF Exp THEN Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [fundecs ::= ID LPAREN TyFields RPAREN LBRACE (*) Exp RBRACE fundecs , {ID IN VAR TYPEDEF }]
  [Exp ::= (*) Exp MINUS Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Var ASSIGN Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp GT Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) If , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= (*) ID LBRACK Exp RBRACK , {RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
  [Exp ::= (*) Var , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp DIVIDE Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp LT Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) NIL , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) FOR AssignExp TO Exp DO Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
}
transition on BREAK to state [15]
transition on Var to state [14]
transition on LPAREN to state [13]
transition on LET to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [81]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [80]: {
  [fundecs ::= ID LPAREN TyFields RPAREN SEMICOLON (*) fundecs , {ID IN VAR TYPEDEF }]
  [fundecs ::= (*) NameTy ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fundecs , {ID IN VAR TYPEDEF }]
  [fundecs ::= (*) , {ID IN VAR TYPEDEF }]
  [fundecs ::= (*) ID LPAREN TyFields RPAREN SEMICOLON fundecs , {ID IN VAR TYPEDEF }]
  [NameTy ::= (*) ID , {ID }]
  [fundecs ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fundecs , {ID IN VAR TYPEDEF }]
  [fundecs ::= (*) NameTy ID LPAREN TyFields RPAREN SEMICOLON fundecs , {ID IN VAR TYPEDEF }]
}
transition on NameTy to state [65]
transition on fundecs to state [64]
transition on ID to state [63]

-------------------
lalr_state [81]: {
  [Exp ::= Exp (*) GT Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) NEQ Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) PLUS Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) LE Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) EQ Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) DIVIDE Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [fundecs ::= ID LPAREN TyFields RPAREN LBRACE Exp (*) RBRACE fundecs , {ID IN VAR TYPEDEF }]
  [Exp ::= Exp (*) MINUS Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) GE Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) LT Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) TIMES Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
}
transition on RBRACE to state [82]
transition on LT to state [30]
transition on TIMES to state [29]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on MINUS to state [21]

-------------------
lalr_state [82]: {
  [fundecs ::= (*) NameTy ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fundecs , {ID IN VAR TYPEDEF }]
  [fundecs ::= ID LPAREN TyFields RPAREN LBRACE Exp RBRACE (*) fundecs , {ID IN VAR TYPEDEF }]
  [fundecs ::= (*) , {ID IN VAR TYPEDEF }]
  [fundecs ::= (*) ID LPAREN TyFields RPAREN SEMICOLON fundecs , {ID IN VAR TYPEDEF }]
  [NameTy ::= (*) ID , {ID }]
  [fundecs ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fundecs , {ID IN VAR TYPEDEF }]
  [fundecs ::= (*) NameTy ID LPAREN TyFields RPAREN SEMICOLON fundecs , {ID IN VAR TYPEDEF }]
}
transition on NameTy to state [65]
transition on fundecs to state [83]
transition on ID to state [63]

-------------------
lalr_state [83]: {
  [fundecs ::= ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fundecs (*) , {ID IN VAR TYPEDEF }]
}

-------------------
lalr_state [84]: {
  [Exp ::= Exp (*) GT Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) NEQ Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) PLUS Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [fundec ::= ID LPAREN TyFields RPAREN LBRACE Exp (*) RBRACE , {ID IN VAR TYPEDEF }]
  [Exp ::= Exp (*) LE Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) EQ Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) DIVIDE Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [fundecs ::= ID LPAREN TyFields RPAREN LBRACE Exp (*) RBRACE fundecs , {ID IN VAR TYPEDEF }]
  [Exp ::= Exp (*) MINUS Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) GE Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) LT Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) TIMES Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
}
transition on RBRACE to state [85]
transition on LT to state [30]
transition on TIMES to state [29]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on MINUS to state [21]

-------------------
lalr_state [85]: {
  [fundecs ::= (*) NameTy ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fundecs , {ID IN VAR TYPEDEF }]
  [fundecs ::= ID LPAREN TyFields RPAREN LBRACE Exp RBRACE (*) fundecs , {ID IN VAR TYPEDEF }]
  [fundecs ::= (*) , {ID IN VAR TYPEDEF }]
  [fundecs ::= (*) ID LPAREN TyFields RPAREN SEMICOLON fundecs , {ID IN VAR TYPEDEF }]
  [NameTy ::= (*) ID , {ID }]
  [fundecs ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fundecs , {ID IN VAR TYPEDEF }]
  [fundecs ::= (*) NameTy ID LPAREN TyFields RPAREN SEMICOLON fundecs , {ID IN VAR TYPEDEF }]
  [fundec ::= ID LPAREN TyFields RPAREN LBRACE Exp RBRACE (*) , {ID IN VAR TYPEDEF }]
}
transition on NameTy to state [65]
transition on fundecs to state [83]
transition on ID to state [63]

-------------------
lalr_state [86]: {
  [TyFields ::= ID COLON (*) ID TyFields , {ID RPAREN }]
}
transition on ID to state [87]

-------------------
lalr_state [87]: {
  [TyFields ::= (*) ID COLON ID TyFields , {ID RPAREN }]
  [TyFields ::= (*) , {ID RPAREN }]
  [TyFields ::= ID COLON ID (*) TyFields , {ID RPAREN }]
}
transition on TyFields to state [88]
transition on ID to state [58]

-------------------
lalr_state [88]: {
  [TyFields ::= ID COLON ID TyFields (*) , {ID RPAREN }]
}

-------------------
lalr_state [89]: {
  [fundec ::= NameTy ID (*) LPAREN TyFields RPAREN SEMICOLON , {ID IN VAR TYPEDEF }]
  [fundecs ::= NameTy ID (*) LPAREN TyFields RPAREN SEMICOLON fundecs , {ID IN VAR TYPEDEF }]
  [fundec ::= NameTy ID (*) LPAREN TyFields RPAREN LBRACE Exp RBRACE , {ID IN VAR TYPEDEF }]
  [fundecs ::= NameTy ID (*) LPAREN TyFields RPAREN LBRACE Exp RBRACE fundecs , {ID IN VAR TYPEDEF }]
}
transition on LPAREN to state [90]

-------------------
lalr_state [90]: {
  [TyFields ::= (*) ID COLON ID TyFields , {RPAREN }]
  [TyFields ::= (*) , {RPAREN }]
  [fundec ::= NameTy ID LPAREN (*) TyFields RPAREN SEMICOLON , {ID IN VAR TYPEDEF }]
  [fundecs ::= NameTy ID LPAREN (*) TyFields RPAREN SEMICOLON fundecs , {ID IN VAR TYPEDEF }]
  [fundec ::= NameTy ID LPAREN (*) TyFields RPAREN LBRACE Exp RBRACE , {ID IN VAR TYPEDEF }]
  [fundecs ::= NameTy ID LPAREN (*) TyFields RPAREN LBRACE Exp RBRACE fundecs , {ID IN VAR TYPEDEF }]
}
transition on TyFields to state [91]
transition on ID to state [58]

-------------------
lalr_state [91]: {
  [fundec ::= NameTy ID LPAREN TyFields (*) RPAREN SEMICOLON , {ID IN VAR TYPEDEF }]
  [fundecs ::= NameTy ID LPAREN TyFields (*) RPAREN SEMICOLON fundecs , {ID IN VAR TYPEDEF }]
  [fundec ::= NameTy ID LPAREN TyFields (*) RPAREN LBRACE Exp RBRACE , {ID IN VAR TYPEDEF }]
  [fundecs ::= NameTy ID LPAREN TyFields (*) RPAREN LBRACE Exp RBRACE fundecs , {ID IN VAR TYPEDEF }]
}
transition on RPAREN to state [92]

-------------------
lalr_state [92]: {
  [fundec ::= NameTy ID LPAREN TyFields RPAREN (*) SEMICOLON , {ID IN VAR TYPEDEF }]
  [fundecs ::= NameTy ID LPAREN TyFields RPAREN (*) SEMICOLON fundecs , {ID IN VAR TYPEDEF }]
  [fundec ::= NameTy ID LPAREN TyFields RPAREN (*) LBRACE Exp RBRACE , {ID IN VAR TYPEDEF }]
  [fundecs ::= NameTy ID LPAREN TyFields RPAREN (*) LBRACE Exp RBRACE fundecs , {ID IN VAR TYPEDEF }]
}
transition on SEMICOLON to state [94]
transition on LBRACE to state [93]

-------------------
lalr_state [93]: {
  [Exp ::= (*) Exp PLUS Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp EQ Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp GE Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) BREAK SEMICOLON , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [fundec ::= NameTy ID LPAREN TyFields RPAREN LBRACE (*) Exp RBRACE , {ID IN VAR TYPEDEF }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [fundecs ::= NameTy ID LPAREN TyFields RPAREN LBRACE (*) Exp RBRACE fundecs , {ID IN VAR TYPEDEF }]
  [Var ::= (*) Var DOT ID , {RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
  [Exp ::= (*) INT , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) MINUS Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp LE Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) WHILE Exp DO Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= (*) ID , {RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
  [Exp ::= (*) error , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp TIMES Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp NEQ Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) STRING , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) LET decs IN ExpSeq END , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) ID LPAREN ExpList RPAREN , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [If ::= (*) IF Exp THEN Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp MINUS Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Var ASSIGN Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp GT Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) If , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= (*) ID LBRACK Exp RBRACK , {RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
  [Exp ::= (*) Var , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp DIVIDE Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp LT Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) NIL , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) FOR AssignExp TO Exp DO Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
}
transition on BREAK to state [15]
transition on Var to state [14]
transition on LPAREN to state [13]
transition on LET to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [95]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [94]: {
  [fundecs ::= (*) NameTy ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fundecs , {ID IN VAR TYPEDEF }]
  [fundec ::= NameTy ID LPAREN TyFields RPAREN SEMICOLON (*) , {ID IN VAR TYPEDEF }]
  [fundecs ::= NameTy ID LPAREN TyFields RPAREN SEMICOLON (*) fundecs , {ID IN VAR TYPEDEF }]
  [fundecs ::= (*) , {ID IN VAR TYPEDEF }]
  [fundecs ::= (*) ID LPAREN TyFields RPAREN SEMICOLON fundecs , {ID IN VAR TYPEDEF }]
  [NameTy ::= (*) ID , {ID }]
  [fundecs ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fundecs , {ID IN VAR TYPEDEF }]
  [fundecs ::= (*) NameTy ID LPAREN TyFields RPAREN SEMICOLON fundecs , {ID IN VAR TYPEDEF }]
}
transition on NameTy to state [65]
transition on fundecs to state [72]
transition on ID to state [63]

-------------------
lalr_state [95]: {
  [Exp ::= Exp (*) GT Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) NEQ Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) PLUS Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) LE Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) EQ Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) DIVIDE Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) MINUS Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [fundec ::= NameTy ID LPAREN TyFields RPAREN LBRACE Exp (*) RBRACE , {ID IN VAR TYPEDEF }]
  [Exp ::= Exp (*) GE Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) LT Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [fundecs ::= NameTy ID LPAREN TyFields RPAREN LBRACE Exp (*) RBRACE fundecs , {ID IN VAR TYPEDEF }]
  [Exp ::= Exp (*) TIMES Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
}
transition on RBRACE to state [96]
transition on LT to state [30]
transition on TIMES to state [29]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on MINUS to state [21]

-------------------
lalr_state [96]: {
  [fundecs ::= (*) NameTy ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fundecs , {ID IN VAR TYPEDEF }]
  [fundec ::= NameTy ID LPAREN TyFields RPAREN LBRACE Exp RBRACE (*) , {ID IN VAR TYPEDEF }]
  [fundecs ::= (*) , {ID IN VAR TYPEDEF }]
  [fundecs ::= NameTy ID LPAREN TyFields RPAREN LBRACE Exp RBRACE (*) fundecs , {ID IN VAR TYPEDEF }]
  [fundecs ::= (*) ID LPAREN TyFields RPAREN SEMICOLON fundecs , {ID IN VAR TYPEDEF }]
  [NameTy ::= (*) ID , {ID }]
  [fundecs ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fundecs , {ID IN VAR TYPEDEF }]
  [fundecs ::= (*) NameTy ID LPAREN TyFields RPAREN SEMICOLON fundecs , {ID IN VAR TYPEDEF }]
}
transition on NameTy to state [65]
transition on fundecs to state [75]
transition on ID to state [63]

-------------------
lalr_state [97]: {
  [vardec ::= VAR ID (*) COLON NameTy ASSIGN Exp , {ID TO IN VAR TYPEDEF }]
  [vardec ::= VAR ID (*) ASSIGN Exp , {ID TO IN VAR TYPEDEF }]
}
transition on ASSIGN to state [99]
transition on COLON to state [98]

-------------------
lalr_state [98]: {
  [vardec ::= VAR ID COLON (*) NameTy ASSIGN Exp , {ID TO IN VAR TYPEDEF }]
  [NameTy ::= (*) ID , {ASSIGN }]
}
transition on NameTy to state [102]
transition on ID to state [101]

-------------------
lalr_state [99]: {
  [Exp ::= (*) Exp PLUS Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Exp ::= (*) Exp EQ Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Exp ::= (*) Exp GE Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Exp ::= (*) BREAK SEMICOLON , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Var ::= (*) Var DOT ID , {ID DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN TO IN VAR TYPEDEF }]
  [Exp ::= (*) INT , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Exp ::= (*) MINUS Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Exp ::= (*) Exp LE Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Exp ::= (*) WHILE Exp DO Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Var ::= (*) ID , {ID DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN TO IN VAR TYPEDEF }]
  [Exp ::= (*) error , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Exp ::= (*) Exp TIMES Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Exp ::= (*) Exp NEQ Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Exp ::= (*) STRING , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Exp ::= (*) LET decs IN ExpSeq END , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Exp ::= (*) ID LPAREN ExpList RPAREN , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [If ::= (*) IF Exp THEN Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Exp ::= (*) Exp MINUS Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Exp ::= (*) Var ASSIGN Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Exp ::= (*) Exp GT Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Exp ::= (*) If , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Var ::= (*) ID LBRACK Exp RBRACK , {ID DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN TO IN VAR TYPEDEF }]
  [Exp ::= (*) Var , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Exp ::= (*) Exp DIVIDE Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Exp ::= (*) Exp LT Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Exp ::= (*) NIL , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Exp ::= (*) FOR AssignExp TO Exp DO Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [vardec ::= VAR ID ASSIGN (*) Exp , {ID TO IN VAR TYPEDEF }]
}
transition on BREAK to state [15]
transition on Var to state [14]
transition on LPAREN to state [13]
transition on LET to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [100]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [100]: {
  [Exp ::= Exp (*) GT Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Exp ::= Exp (*) NEQ Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Exp ::= Exp (*) PLUS Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Exp ::= Exp (*) LE Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [vardec ::= VAR ID ASSIGN Exp (*) , {ID TO IN VAR TYPEDEF }]
  [Exp ::= Exp (*) EQ Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Exp ::= Exp (*) DIVIDE Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Exp ::= Exp (*) MINUS Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Exp ::= Exp (*) GE Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Exp ::= Exp (*) LT Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Exp ::= Exp (*) TIMES Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
}
transition on LT to state [30]
transition on TIMES to state [29]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on MINUS to state [21]

-------------------
lalr_state [101]: {
  [NameTy ::= ID (*) , {ASSIGN }]
}

-------------------
lalr_state [102]: {
  [vardec ::= VAR ID COLON NameTy (*) ASSIGN Exp , {ID TO IN VAR TYPEDEF }]
}
transition on ASSIGN to state [103]

-------------------
lalr_state [103]: {
  [Exp ::= (*) Exp PLUS Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Exp ::= (*) Exp EQ Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Exp ::= (*) Exp GE Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Exp ::= (*) BREAK SEMICOLON , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Var ::= (*) Var DOT ID , {ID DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN TO IN VAR TYPEDEF }]
  [Exp ::= (*) INT , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Exp ::= (*) MINUS Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Exp ::= (*) Exp LE Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Exp ::= (*) WHILE Exp DO Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [vardec ::= VAR ID COLON NameTy ASSIGN (*) Exp , {ID TO IN VAR TYPEDEF }]
  [Var ::= (*) ID , {ID DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN TO IN VAR TYPEDEF }]
  [Exp ::= (*) error , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Exp ::= (*) Exp TIMES Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Exp ::= (*) Exp NEQ Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Exp ::= (*) STRING , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Exp ::= (*) LET decs IN ExpSeq END , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Exp ::= (*) ID LPAREN ExpList RPAREN , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [If ::= (*) IF Exp THEN Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Exp ::= (*) Exp MINUS Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Exp ::= (*) Var ASSIGN Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Exp ::= (*) Exp GT Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Exp ::= (*) If , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Var ::= (*) ID LBRACK Exp RBRACK , {ID DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN TO IN VAR TYPEDEF }]
  [Exp ::= (*) Var , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Exp ::= (*) Exp DIVIDE Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Exp ::= (*) Exp LT Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Exp ::= (*) NIL , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Exp ::= (*) FOR AssignExp TO Exp DO Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
}
transition on BREAK to state [15]
transition on Var to state [14]
transition on LPAREN to state [13]
transition on LET to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [104]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [104]: {
  [vardec ::= VAR ID COLON NameTy ASSIGN Exp (*) , {ID TO IN VAR TYPEDEF }]
  [Exp ::= Exp (*) GT Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Exp ::= Exp (*) NEQ Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Exp ::= Exp (*) PLUS Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Exp ::= Exp (*) LE Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Exp ::= Exp (*) EQ Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Exp ::= Exp (*) DIVIDE Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Exp ::= Exp (*) MINUS Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Exp ::= Exp (*) GE Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Exp ::= Exp (*) LT Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
  [Exp ::= Exp (*) TIMES Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR TYPEDEF }]
}
transition on LT to state [30]
transition on TIMES to state [29]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on MINUS to state [21]

-------------------
lalr_state [105]: {
  [NameTy ::= ID (*) , {ID }]
  [TyFields ::= ID (*) COLON ID TyFields , {ID }]
}
transition on COLON to state [86]

-------------------
lalr_state [106]: {
  [Ty ::= TyFields (*) , {ID }]
}

-------------------
lalr_state [107]: {
  [tydec ::= TYPEDEF Ty (*) ID tydecs , {ID IN VAR TYPEDEF }]
  [tydec ::= TYPEDEF Ty (*) ID , {ID IN VAR TYPEDEF }]
}
transition on ID to state [112]

-------------------
lalr_state [108]: {
  [Ty ::= NameTy (*) , {ID }]
}

-------------------
lalr_state [109]: {
  [Ty ::= ARRAY (*) OF ID , {ID }]
}
transition on OF to state [110]

-------------------
lalr_state [110]: {
  [Ty ::= ARRAY OF (*) ID , {ID }]
}
transition on ID to state [111]

-------------------
lalr_state [111]: {
  [Ty ::= ARRAY OF ID (*) , {ID }]
}

-------------------
lalr_state [112]: {
  [tydecs ::= (*) , {ID IN VAR TYPEDEF }]
  [tydecs ::= (*) TYPEDEF Ty ID tydecs , {ID IN VAR TYPEDEF }]
  [tydec ::= TYPEDEF Ty ID (*) tydecs , {ID IN VAR TYPEDEF }]
  [tydec ::= TYPEDEF Ty ID (*) , {ID IN VAR TYPEDEF }]
}
transition on TYPEDEF to state [114]
transition on tydecs to state [113]

-------------------
lalr_state [113]: {
  [tydec ::= TYPEDEF Ty ID tydecs (*) , {ID IN VAR TYPEDEF }]
}

-------------------
lalr_state [114]: {
  [TyFields ::= (*) ID COLON ID TyFields , {ID }]
  [Ty ::= (*) TyFields , {ID }]
  [tydecs ::= TYPEDEF (*) Ty ID tydecs , {ID IN VAR TYPEDEF }]
  [TyFields ::= (*) , {ID }]
  [Ty ::= (*) ARRAY OF ID , {ID }]
  [NameTy ::= (*) ID , {ID }]
  [Ty ::= (*) NameTy , {ID }]
}
transition on ARRAY to state [109]
transition on NameTy to state [108]
transition on Ty to state [115]
transition on TyFields to state [106]
transition on ID to state [105]

-------------------
lalr_state [115]: {
  [tydecs ::= TYPEDEF Ty (*) ID tydecs , {ID IN VAR TYPEDEF }]
}
transition on ID to state [116]

-------------------
lalr_state [116]: {
  [tydecs ::= (*) , {ID IN VAR TYPEDEF }]
  [tydecs ::= TYPEDEF Ty ID (*) tydecs , {ID IN VAR TYPEDEF }]
  [tydecs ::= (*) TYPEDEF Ty ID tydecs , {ID IN VAR TYPEDEF }]
}
transition on TYPEDEF to state [114]
transition on tydecs to state [117]

-------------------
lalr_state [117]: {
  [tydecs ::= TYPEDEF Ty ID tydecs (*) , {ID IN VAR TYPEDEF }]
}

-------------------
lalr_state [118]: {
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) Exp GT Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) Exp PLUS Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Rest ::= (*) Exp SEMICOLON Rest , {END }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) Exp EQ Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) error , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Var ::= (*) ID , {SEMICOLON DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN END }]
  [Exp ::= (*) If , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) Exp GE Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) Exp TIMES Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Rest ::= (*) Exp , {END }]
  [Exp ::= (*) BREAK SEMICOLON , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) Exp NEQ Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) Var , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Var ::= (*) ID LBRACK Exp RBRACK , {SEMICOLON DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN END }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) STRING , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) Exp DIVIDE Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= LET decs IN (*) ExpSeq END , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Rest ::= (*) , {END }]
  [Exp ::= (*) LET decs IN ExpSeq END , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) Exp LT Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) INT , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Var ::= (*) Var DOT ID , {SEMICOLON DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN END }]
  [Exp ::= (*) ID LPAREN ExpList RPAREN , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) NIL , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) MINUS Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [If ::= (*) IF Exp THEN Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) FOR AssignExp TO Exp DO Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) Exp LE Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) Exp MINUS Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [ExpSeq ::= (*) Rest , {END }]
  [Exp ::= (*) WHILE Exp DO Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) Var ASSIGN Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
}
transition on BREAK to state [15]
transition on Var to state [14]
transition on LPAREN to state [13]
transition on LET to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on Rest to state [43]
transition on STRING to state [8]
transition on Exp to state [42]
transition on ExpSeq to state [119]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on INT to state [2]
transition on WHILE to state [3]
transition on MINUS to state [1]

-------------------
lalr_state [119]: {
  [Exp ::= LET decs IN ExpSeq (*) END , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
}
transition on END to state [120]

-------------------
lalr_state [120]: {
  [Exp ::= LET decs IN ExpSeq END (*) , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
}

-------------------
lalr_state [121]: {
  [decs ::= Dec decs (*) , {IN }]
}

-------------------
lalr_state [122]: {
  [Exp ::= (*) Exp PLUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp EQ Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp GE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) BREAK SEMICOLON , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= (*) Var DOT ID , {RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
  [Exp ::= (*) INT , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) MINUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp LE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) WHILE Exp DO Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= (*) ID , {RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
  [Exp ::= (*) error , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp TIMES Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp NEQ Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) STRING , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) LET decs IN ExpSeq END , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) ID LPAREN ExpList RPAREN , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [If ::= (*) IF Exp THEN Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp MINUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Var ASSIGN Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= ID LBRACK (*) Exp RBRACK OF Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp GT Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) If , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= ID LBRACK (*) Exp RBRACK , {EOF ID SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Var ::= (*) ID LBRACK Exp RBRACK , {RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
  [Exp ::= (*) Var , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp DIVIDE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp LT Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) NIL , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) FOR AssignExp TO Exp DO Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
}
transition on BREAK to state [15]
transition on Var to state [14]
transition on LPAREN to state [13]
transition on LET to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [126]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [123]: {
  [Exp ::= ID LPAREN (*) ExpList RPAREN , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
}
transition on ExpList to state [124]

-------------------
lalr_state [124]: {
  [Exp ::= ID LPAREN ExpList (*) RPAREN , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
}
transition on RPAREN to state [125]

-------------------
lalr_state [125]: {
  [Exp ::= ID LPAREN ExpList RPAREN (*) , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
}

-------------------
lalr_state [126]: {
  [Var ::= ID LBRACK Exp (*) RBRACK , {EOF ID SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) GT Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) NEQ Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) PLUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= ID LBRACK Exp (*) RBRACK OF Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) LE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) EQ Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) DIVIDE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) MINUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) GE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) LT Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) TIMES Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
}
transition on LT to state [30]
transition on TIMES to state [29]
transition on RBRACK to state [127]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on MINUS to state [21]

-------------------
lalr_state [127]: {
  [Var ::= ID LBRACK Exp RBRACK (*) , {EOF ID SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= ID LBRACK Exp RBRACK (*) OF Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
}
transition on OF to state [128]

-------------------
lalr_state [128]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp EQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp GE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Var ::= (*) Var DOT ID , {EOF ID SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) INT , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) MINUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp LE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Var ::= (*) ID , {EOF ID SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) error , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp TIMES Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp NEQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) STRING , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) LET decs IN ExpSeq END , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) ID LPAREN ExpList RPAREN , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [If ::= (*) IF Exp THEN Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= ID LBRACK Exp RBRACK OF (*) Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp MINUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp GT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) If , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Var ::= (*) ID LBRACK Exp RBRACK , {EOF ID SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Var , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp LT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) NIL , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) FOR AssignExp TO Exp DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
}
transition on BREAK to state [15]
transition on Var to state [14]
transition on LPAREN to state [13]
transition on LET to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [129]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [129]: {
  [Exp ::= Exp (*) GT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) NEQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= ID LBRACK Exp RBRACK OF Exp (*) , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) PLUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) LE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) EQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) MINUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) GE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) LT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) TIMES Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
}
transition on LT to state [30]
transition on TIMES to state [29]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on MINUS to state [21]

-------------------
lalr_state [130]: {
  [Exp ::= Exp (*) GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= Exp (*) NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [If ::= IF Exp (*) THEN Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= Exp (*) LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= Exp (*) EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= Exp (*) DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= Exp (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= Exp (*) GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [If ::= IF Exp (*) THEN Exp ELSE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= Exp (*) TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
}
transition on LT to state [30]
transition on TIMES to state [29]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on THEN to state [131]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on MINUS to state [21]

-------------------
lalr_state [131]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp EQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp GE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Var ::= (*) Var DOT ID , {EOF ID SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) INT , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) MINUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp LE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Var ::= (*) ID , {EOF ID SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) error , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp TIMES Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp NEQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) STRING , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [If ::= IF Exp THEN (*) Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) LET decs IN ExpSeq END , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) ID LPAREN ExpList RPAREN , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [If ::= (*) IF Exp THEN Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp MINUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp GT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) If , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Var ::= (*) ID LBRACK Exp RBRACK , {EOF ID SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Var , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp LT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [If ::= IF Exp THEN (*) Exp ELSE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) NIL , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) FOR AssignExp TO Exp DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
}
transition on BREAK to state [15]
transition on Var to state [14]
transition on LPAREN to state [13]
transition on LET to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [132]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [132]: {
  [If ::= IF Exp THEN Exp (*) , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) GT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) NEQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) PLUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) LE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) EQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) MINUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [If ::= IF Exp THEN Exp (*) ELSE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) GE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) LT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) TIMES Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
}
transition on LT to state [30]
transition on TIMES to state [29]
transition on GT to state [28]
transition on ELSE to state [133]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on MINUS to state [21]

-------------------
lalr_state [133]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp EQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp GE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Var ::= (*) Var DOT ID , {EOF ID SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) INT , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) MINUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp LE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Var ::= (*) ID , {EOF ID SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) error , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp TIMES Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp NEQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) STRING , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) LET decs IN ExpSeq END , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) ID LPAREN ExpList RPAREN , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [If ::= (*) IF Exp THEN Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp MINUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp GT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) If , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Var ::= (*) ID LBRACK Exp RBRACK , {EOF ID SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Var , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [If ::= IF Exp THEN Exp ELSE (*) Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp LT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) NIL , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) FOR AssignExp TO Exp DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
}
transition on BREAK to state [15]
transition on Var to state [14]
transition on LPAREN to state [13]
transition on LET to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [134]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [134]: {
  [Exp ::= Exp (*) GT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) NEQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) PLUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) LE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) EQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) MINUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [If ::= IF Exp THEN Exp ELSE Exp (*) , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) GE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) LT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) TIMES Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
}
transition on LT to state [30]
transition on TIMES to state [29]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on MINUS to state [21]

-------------------
lalr_state [135]: {
  [$START ::= Exp EOF (*) , {EOF }]
}

-------------------
lalr_state [136]: {
  [Exp ::= FOR vardec (*) TO Exp DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
}
transition on TO to state [142]

-------------------
lalr_state [137]: {
  [Exp ::= FOR AssignExp (*) TO Exp DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
}
transition on TO to state [138]

-------------------
lalr_state [138]: {
  [Exp ::= (*) Exp PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) BREAK SEMICOLON , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Var ::= (*) Var DOT ID , {DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN DO }]
  [Exp ::= (*) INT , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) WHILE Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Var ::= (*) ID , {DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN DO }]
  [Exp ::= (*) error , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) STRING , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) LET decs IN ExpSeq END , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) ID LPAREN ExpList RPAREN , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [If ::= (*) IF Exp THEN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Var ASSIGN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) If , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Var ::= (*) ID LBRACK Exp RBRACK , {DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN DO }]
  [Exp ::= (*) Var , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= FOR AssignExp TO (*) Exp DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) NIL , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) FOR AssignExp TO Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
}
transition on BREAK to state [15]
transition on Var to state [14]
transition on LPAREN to state [13]
transition on LET to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [139]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [139]: {
  [Exp ::= Exp (*) GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= FOR AssignExp TO Exp (*) DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
}
transition on DO to state [140]
transition on LT to state [30]
transition on TIMES to state [29]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on MINUS to state [21]

-------------------
lalr_state [140]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp EQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp GE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Var ::= (*) Var DOT ID , {EOF ID SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) INT , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) MINUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp LE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Var ::= (*) ID , {EOF ID SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) error , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp TIMES Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp NEQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) STRING , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) LET decs IN ExpSeq END , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) ID LPAREN ExpList RPAREN , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [If ::= (*) IF Exp THEN Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp MINUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp GT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) If , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Var ::= (*) ID LBRACK Exp RBRACK , {EOF ID SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= FOR AssignExp TO Exp DO (*) Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Var , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp LT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) NIL , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) FOR AssignExp TO Exp DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
}
transition on BREAK to state [15]
transition on Var to state [14]
transition on LPAREN to state [13]
transition on LET to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [141]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [141]: {
  [Exp ::= FOR AssignExp TO Exp DO Exp (*) , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) GT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) NEQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) PLUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) LE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) EQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) MINUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) GE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) LT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) TIMES Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
}
transition on LT to state [30]
transition on TIMES to state [29]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on MINUS to state [21]

-------------------
lalr_state [142]: {
  [Exp ::= (*) Exp PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) BREAK SEMICOLON , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Var ::= (*) Var DOT ID , {DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN DO }]
  [Exp ::= (*) INT , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= FOR vardec TO (*) Exp DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) WHILE Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Var ::= (*) ID , {DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN DO }]
  [Exp ::= (*) error , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) STRING , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) LET decs IN ExpSeq END , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) ID LPAREN ExpList RPAREN , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [If ::= (*) IF Exp THEN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Var ASSIGN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) If , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Var ::= (*) ID LBRACK Exp RBRACK , {DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN DO }]
  [Exp ::= (*) Var , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) NIL , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) FOR AssignExp TO Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
}
transition on BREAK to state [15]
transition on Var to state [14]
transition on LPAREN to state [13]
transition on LET to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [143]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [143]: {
  [Exp ::= Exp (*) GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= FOR vardec TO Exp (*) DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
}
transition on LT to state [30]
transition on DO to state [144]
transition on TIMES to state [29]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on MINUS to state [21]

-------------------
lalr_state [144]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp EQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp GE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Var ::= (*) Var DOT ID , {EOF ID SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= FOR vardec TO Exp DO (*) Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) INT , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) MINUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp LE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Var ::= (*) ID , {EOF ID SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) error , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp TIMES Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp NEQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) STRING , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) LET decs IN ExpSeq END , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) ID LPAREN ExpList RPAREN , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [If ::= (*) IF Exp THEN Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp MINUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp GT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) If , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Var ::= (*) ID LBRACK Exp RBRACK , {EOF ID SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Var , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp LT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) NIL , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) FOR AssignExp TO Exp DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
}
transition on BREAK to state [15]
transition on Var to state [14]
transition on LPAREN to state [13]
transition on LET to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [145]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [145]: {
  [Exp ::= Exp (*) GT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) NEQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) PLUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) LE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) EQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) MINUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) GE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= FOR vardec TO Exp DO Exp (*) , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) LT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) TIMES Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
}
transition on LT to state [30]
transition on TIMES to state [29]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on MINUS to state [21]

-------------------
lalr_state [146]: {
  [Exp ::= Exp (*) GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= WHILE Exp (*) DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
}
transition on DO to state [147]
transition on LT to state [30]
transition on TIMES to state [29]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on MINUS to state [21]

-------------------
lalr_state [147]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp EQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp GE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Var ::= (*) Var DOT ID , {EOF ID SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) INT , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= WHILE Exp DO (*) Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) MINUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp LE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Var ::= (*) ID , {EOF ID SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) error , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp TIMES Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp NEQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) STRING , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) LET decs IN ExpSeq END , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) ID LPAREN ExpList RPAREN , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [If ::= (*) IF Exp THEN Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp MINUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp GT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) If , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Var ::= (*) ID LBRACK Exp RBRACK , {EOF ID SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Var , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) Exp LT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) NIL , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= (*) FOR AssignExp TO Exp DO Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
}
transition on BREAK to state [15]
transition on Var to state [14]
transition on LPAREN to state [13]
transition on LET to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [148]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [148]: {
  [Exp ::= Exp (*) GT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) NEQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) PLUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) LE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) EQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) MINUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= WHILE Exp DO Exp (*) , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) GE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) LT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) TIMES Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
}
transition on LT to state [30]
transition on TIMES to state [29]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on MINUS to state [21]

-------------------
lalr_state [149]: {
  [Exp ::= Exp (*) GT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= MINUS Exp (*) , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) NEQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) PLUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) LE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) EQ Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) MINUS Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) GE Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) LT Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
  [Exp ::= Exp (*) TIMES Exp , {EOF ID SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR TYPEDEF }]
}
transition on LT to state [30]
transition on TIMES to state [29]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on MINUS to state [21]

-------------------
------- CUP v0.10g Parser Generation Summary -------
  1 error and 78 warnings
  45 terminals, 21 non terminals, and 63 productions declared, 
  producing 150 unique parse states.
  6 terminals declared but not used.
  0 non terminals declared but not used.
  0 productions never reduced.
  72 conflicts detected (3 expected).
  No code produced.
---------------------------------------------------- (v0.10g)
