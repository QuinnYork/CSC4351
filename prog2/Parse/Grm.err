Opening files...
Parsing specification from standard input...
Precedence declaration: Can't find terminal Exp
Checking specification...
Warning: Terminal "FUNCTION" was declared but never used
Warning: Terminal "AND" was declared but never used
Warning: Terminal "OR" was declared but never used
Warning: Terminal "COMMA" was declared but never used
Building parse tables...
  Computing non-terminal nullability...
  Computing first sets...
  Building state machine...
  Filling in tables...
*** Shift/Reduce conflict found in state #57
  between Dec ::= vardec (*) 
  and     Exp ::= FOR vardec (*) TO Exp DO Exp 
  under symbol TO
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #126
  between If ::= IF Exp THEN Exp (*) 
  and     If ::= IF Exp THEN Exp (*) ELSE Exp 
  under symbol ELSE
  Resolved in favor of shifting.

*** Reduce/Reduce conflict found in state #7
  between fdef ::= NIL (*) 
  and     fdec ::= NIL (*) 
  under symbols: {EOF, RBRACK, RBRACE, PLUS, MINUS, TIMES, DIVIDE, EQ, NEQ, LT, LE, GT, GE, THEN, ELSE, TO, DO, END}
  Resolved in favor of the second production.

*** Reduce/Reduce conflict found in state #7
  between fdef ::= NIL (*) 
  and     tydec ::= NIL (*) 
  under symbols: {EOF, RBRACK, RBRACE, PLUS, MINUS, TIMES, DIVIDE, EQ, NEQ, LT, LE, GT, GE, THEN, ELSE, TO, DO, END}
  Resolved in favor of the second production.

*** Shift/Reduce conflict found in state #7
  between fdef ::= NIL (*) 
  under symbol EOF
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #7
  between fdef ::= NIL (*) 
  under symbol RBRACK
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #7
  between fdef ::= NIL (*) 
  under symbol RBRACE
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #7
  between fdef ::= NIL (*) 
  under symbol PLUS
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #7
  between fdef ::= NIL (*) 
  under symbol MINUS
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #7
  between fdef ::= NIL (*) 
  under symbol TIMES
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #7
  between fdef ::= NIL (*) 
  under symbol DIVIDE
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #7
  between fdef ::= NIL (*) 
  under symbol EQ
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #7
  between fdef ::= NIL (*) 
  under symbol NEQ
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #7
  between fdef ::= NIL (*) 
  under symbol LT
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #7
  between fdef ::= NIL (*) 
  under symbol LE
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #7
  between fdef ::= NIL (*) 
  under symbol GT
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #7
  between fdef ::= NIL (*) 
  under symbol GE
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #7
  between fdef ::= NIL (*) 
  under symbol THEN
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #7
  between fdef ::= NIL (*) 
  under symbol ELSE
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #7
  between fdef ::= NIL (*) 
  under symbol TO
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #7
  between fdef ::= NIL (*) 
  under symbol DO
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #7
  between fdef ::= NIL (*) 
  under symbol END
  Resolved in favor of shifting.

*** Reduce/Reduce conflict found in state #7
  between fdec ::= NIL (*) 
  and     tydec ::= NIL (*) 
  under symbols: {EOF, RBRACK, RBRACE, PLUS, MINUS, TIMES, DIVIDE, EQ, NEQ, LT, LE, GT, GE, THEN, ELSE, TO, DO, END}
  Resolved in favor of the second production.

*** Shift/Reduce conflict found in state #7
  between fdec ::= NIL (*) 
  under symbol EOF
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #7
  between fdec ::= NIL (*) 
  under symbol RBRACK
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #7
  between fdec ::= NIL (*) 
  under symbol RBRACE
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #7
  between fdec ::= NIL (*) 
  under symbol PLUS
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #7
  between fdec ::= NIL (*) 
  under symbol MINUS
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #7
  between fdec ::= NIL (*) 
  under symbol TIMES
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #7
  between fdec ::= NIL (*) 
  under symbol DIVIDE
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #7
  between fdec ::= NIL (*) 
  under symbol EQ
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #7
  between fdec ::= NIL (*) 
  under symbol NEQ
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #7
  between fdec ::= NIL (*) 
  under symbol LT
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #7
  between fdec ::= NIL (*) 
  under symbol LE
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #7
  between fdec ::= NIL (*) 
  under symbol GT
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #7
  between fdec ::= NIL (*) 
  under symbol GE
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #7
  between fdec ::= NIL (*) 
  under symbol THEN
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #7
  between fdec ::= NIL (*) 
  under symbol ELSE
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #7
  between fdec ::= NIL (*) 
  under symbol TO
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #7
  between fdec ::= NIL (*) 
  under symbol DO
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #7
  between fdec ::= NIL (*) 
  under symbol END
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #7
  between tydec ::= NIL (*) 
  under symbol EOF
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #7
  between tydec ::= NIL (*) 
  under symbol RBRACK
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #7
  between tydec ::= NIL (*) 
  under symbol RBRACE
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #7
  between tydec ::= NIL (*) 
  under symbol PLUS
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #7
  between tydec ::= NIL (*) 
  under symbol MINUS
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #7
  between tydec ::= NIL (*) 
  under symbol TIMES
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #7
  between tydec ::= NIL (*) 
  under symbol DIVIDE
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #7
  between tydec ::= NIL (*) 
  under symbol EQ
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #7
  between tydec ::= NIL (*) 
  under symbol NEQ
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #7
  between tydec ::= NIL (*) 
  under symbol LT
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #7
  between tydec ::= NIL (*) 
  under symbol LE
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #7
  between tydec ::= NIL (*) 
  under symbol GT
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #7
  between tydec ::= NIL (*) 
  under symbol GE
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #7
  between tydec ::= NIL (*) 
  under symbol THEN
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #7
  between tydec ::= NIL (*) 
  under symbol ELSE
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #7
  between tydec ::= NIL (*) 
  under symbol TO
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #7
  between tydec ::= NIL (*) 
  under symbol DO
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #7
  between tydec ::= NIL (*) 
  under symbol END
  Resolved in favor of shifting.

  Checking for non-reduced productions...
*** More conflicts encountered than expected -- parser generation aborted
===== Terminals =====
DIVIDE FUNCTION GE UMINUS LPAREN 
INT ARRAY FOR MINUS RPAREN 
SEMICOLON AND LT NIL IN 
OR COMMA TYPEDEF PLUS ASSIGN 
IF DOT ID LE OF 
EOF error NEQ BREAK EQ 
LBRACK TIMES COLON LBRACE ELSE 
RBRACK TO WHILE LET THEN 
RBRACE END STRING GT VAR 
DO 

===== Non terminals =====
If vardec TyFields Dec Exp 
decs Ty fdef tydec fdec 
fundec $START Var 

===== Productions =====
fdef ::= NIL 
fdef ::= ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef 
fdef ::= Ty ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef 
fdec ::= NIL 
fdec ::= ID LPAREN TyFields RPAREN SEMICOLON fdec 
fdec ::= Ty ID LPAREN TyFields RPAREN SEMICOLON fdec 
fundec ::= fdef 
fundec ::= fdec 
vardec ::= VAR ID COLON Ty ASSIGN Exp 
vardec ::= VAR ID ASSIGN Exp 
tydec ::= NIL 
tydec ::= TYPEDEF Ty ID tydec 
Dec ::= fundec 
Dec ::= vardec 
Dec ::= tydec 
TyFields ::= ID COLON ID TyFields 
TyFields ::= NIL 
Ty ::= LBRACE TyFields RBRACE 
Ty ::= ARRAY OF ID 
Ty ::= ID 
Var ::= Var DOT ID 
Var ::= Var LBRACK Exp RBRACK 
Var ::= ID 
If ::= IF Exp THEN Exp ELSE Exp 
If ::= IF Exp THEN Exp 
Exp ::= If 
Exp ::= LET decs IN Exp END 
Exp ::= FOR vardec TO Exp DO Exp 
Exp ::= FOR Exp TO Exp DO Exp 
Exp ::= BREAK SEMICOLON 
Exp ::= ID LBRACE Exp RBRACE OF Exp 
Exp ::= WHILE Exp DO Exp 
Exp ::= STRING 
Exp ::= Exp GE Exp 
Exp ::= Exp GT Exp 
Exp ::= Exp LE Exp 
Exp ::= Exp LT Exp 
Exp ::= Exp NEQ Exp 
Exp ::= Exp EQ Exp 
Exp ::= Var ASSIGN Exp 
Exp ::= MINUS Exp 
Exp ::= Exp DIVIDE Exp 
Exp ::= Exp TIMES Exp 
Exp ::= Exp PLUS Exp 
Exp ::= Exp MINUS Exp 
Exp ::= INT 
Exp ::= Dec 
Exp ::= Var 
Exp ::= error 
$START ::= Exp EOF 

===== Viable Prefix Recognizer =====
START lalr_state [0]: {
  [vardec ::= (*) VAR ID COLON Ty ASSIGN Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Ty ::= (*) LBRACE TyFields RBRACE , {ID }]
  [Exp ::= (*) LET decs IN Exp END , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp LE Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp MINUS Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [fdec ::= (*) NIL , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Dec ::= (*) fundec , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {EOF LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
  [Exp ::= (*) ID LBRACE Exp RBRACE OF Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) error , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [fundec ::= (*) fdec , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) If , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp GT Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp PLUS Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [fdef ::= (*) Ty ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [tydec ::= (*) TYPEDEF Ty ID tydec , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= (*) Var DOT ID , {EOF LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp EQ Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Var , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [fundec ::= (*) fdef , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [If ::= (*) IF Exp THEN Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp GE Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp TIMES Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [fdef ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [tydec ::= (*) NIL , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Ty ::= (*) ID , {ID }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp NEQ Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Dec , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [fdec ::= (*) Ty ID LPAREN TyFields RPAREN SEMICOLON fdec , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Dec ::= (*) tydec , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) STRING , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [fdef ::= (*) NIL , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [vardec ::= (*) VAR ID ASSIGN Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Ty ::= (*) ARRAY OF ID , {ID }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp LT Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) INT , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [fdec ::= (*) ID LPAREN TyFields RPAREN SEMICOLON fdec , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Dec ::= (*) vardec , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= (*) ID , {EOF LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) MINUS Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [$START ::= (*) Exp EOF , {EOF }]
}
transition on VAR to state [25]
transition on vardec to state [24]
transition on ARRAY to state [23]
transition on Dec to state [22]
transition on FOR to state [21]
transition on fdec to state [20]
transition on LET to state [19]
transition on fdef to state [18]
transition on error to state [17]
transition on MINUS to state [16]
transition on If to state [15]
transition on TYPEDEF to state [14]
transition on Exp to state [13]
transition on fundec to state [12]
transition on BREAK to state [11]
transition on STRING to state [10]
transition on ID to state [9]
transition on LBRACE to state [8]
transition on NIL to state [7]
transition on IF to state [6]
transition on tydec to state [5]
transition on WHILE to state [4]
transition on Var to state [3]
transition on INT to state [2]
transition on Ty to state [1]

-------------------
lalr_state [1]: {
  [fdef ::= Ty (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= Ty (*) ID LPAREN TyFields RPAREN SEMICOLON fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on ID to state [139]

-------------------
lalr_state [2]: {
  [Exp ::= INT (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}

-------------------
lalr_state [3]: {
  [Exp ::= Var (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Var (*) ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= Var (*) DOT ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Var ::= Var (*) LBRACK Exp RBRACK , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
}
transition on ASSIGN to state [134]
transition on DOT to state [133]
transition on LBRACK to state [132]

-------------------
lalr_state [4]: {
  [vardec ::= (*) VAR ID COLON Ty ASSIGN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Ty ::= (*) LBRACE TyFields RBRACE , {ID }]
  [Exp ::= (*) LET decs IN Exp END , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [fdec ::= (*) NIL , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Dec ::= (*) fundec , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN DO }]
  [Exp ::= (*) ID LBRACE Exp RBRACE OF Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Var ASSIGN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) error , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [fundec ::= (*) fdec , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) If , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [fdef ::= (*) Ty ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [tydec ::= (*) TYPEDEF Ty ID tydec , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Var ::= (*) Var DOT ID , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN DO }]
  [Exp ::= (*) BREAK SEMICOLON , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Var , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [fundec ::= (*) fdef , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [If ::= (*) IF Exp THEN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [fdef ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [tydec ::= (*) NIL , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Ty ::= (*) ID , {ID }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Dec , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [fdec ::= (*) Ty ID LPAREN TyFields RPAREN SEMICOLON fdec , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Dec ::= (*) tydec , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) STRING , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [fdef ::= (*) NIL , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [vardec ::= (*) VAR ID ASSIGN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Ty ::= (*) ARRAY OF ID , {ID }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) INT , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [fdec ::= (*) ID LPAREN TyFields RPAREN SEMICOLON fdec , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Dec ::= (*) vardec , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Var ::= (*) ID , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN DO }]
  [Exp ::= WHILE (*) Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) WHILE Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
}
transition on VAR to state [25]
transition on vardec to state [24]
transition on ARRAY to state [23]
transition on Dec to state [22]
transition on FOR to state [21]
transition on fdec to state [20]
transition on LET to state [19]
transition on fdef to state [18]
transition on error to state [17]
transition on MINUS to state [16]
transition on If to state [15]
transition on TYPEDEF to state [14]
transition on Exp to state [129]
transition on fundec to state [12]
transition on BREAK to state [11]
transition on STRING to state [10]
transition on ID to state [9]
transition on LBRACE to state [8]
transition on NIL to state [7]
transition on IF to state [6]
transition on tydec to state [5]
transition on WHILE to state [4]
transition on Var to state [3]
transition on INT to state [2]
transition on Ty to state [1]

-------------------
lalr_state [5]: {
  [Dec ::= tydec (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}

-------------------
lalr_state [6]: {
  [vardec ::= (*) VAR ID COLON Ty ASSIGN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Ty ::= (*) LBRACE TyFields RBRACE , {ID }]
  [Exp ::= (*) LET decs IN Exp END , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) Exp LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) Exp MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [fdec ::= (*) NIL , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Dec ::= (*) fundec , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN }]
  [Exp ::= (*) ID LBRACE Exp RBRACE OF Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) Var ASSIGN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) error , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [fundec ::= (*) fdec , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) If , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) Exp GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) Exp PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [fdef ::= (*) Ty ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [tydec ::= (*) TYPEDEF Ty ID tydec , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Var ::= (*) Var DOT ID , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN }]
  [Exp ::= (*) BREAK SEMICOLON , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) Exp EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) Var , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [fundec ::= (*) fdef , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [If ::= IF (*) Exp THEN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) Exp GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) Exp TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [fdef ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [tydec ::= (*) NIL , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Ty ::= (*) ID , {ID }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) Exp NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) Dec , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [fdec ::= (*) Ty ID LPAREN TyFields RPAREN SEMICOLON fdec , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [If ::= IF (*) Exp THEN Exp ELSE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Dec ::= (*) tydec , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) STRING , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) Exp DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [fdef ::= (*) NIL , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [vardec ::= (*) VAR ID ASSIGN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Ty ::= (*) ARRAY OF ID , {ID }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) Exp LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) INT , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [fdec ::= (*) ID LPAREN TyFields RPAREN SEMICOLON fdec , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Dec ::= (*) vardec , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Var ::= (*) ID , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN }]
  [Exp ::= (*) WHILE Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
}
transition on VAR to state [25]
transition on vardec to state [24]
transition on ARRAY to state [23]
transition on Dec to state [22]
transition on FOR to state [21]
transition on fdec to state [20]
transition on LET to state [19]
transition on fdef to state [18]
transition on error to state [17]
transition on MINUS to state [16]
transition on If to state [15]
transition on TYPEDEF to state [14]
transition on Exp to state [124]
transition on fundec to state [12]
transition on BREAK to state [11]
transition on STRING to state [10]
transition on ID to state [9]
transition on LBRACE to state [8]
transition on NIL to state [7]
transition on IF to state [6]
transition on tydec to state [5]
transition on WHILE to state [4]
transition on Var to state [3]
transition on INT to state [2]
transition on Ty to state [1]

-------------------
lalr_state [7]: {
  [fdef ::= NIL (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= NIL (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [tydec ::= NIL (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}

-------------------
lalr_state [8]: {
  [Ty ::= LBRACE (*) TyFields RBRACE , {ID ASSIGN }]
  [TyFields ::= (*) ID COLON ID TyFields , {RBRACE }]
  [TyFields ::= (*) NIL , {RBRACE }]
}
transition on NIL to state [81]
transition on TyFields to state [122]
transition on ID to state [79]

-------------------
lalr_state [9]: {
  [Var ::= ID (*) , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [fdef ::= ID (*) LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= ID (*) LPAREN TyFields RPAREN SEMICOLON fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= ID (*) , {ID }]
  [Exp ::= ID (*) LBRACE Exp RBRACE OF Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on LPAREN to state [78]
transition on LBRACE to state [77]

-------------------
lalr_state [10]: {
  [Exp ::= STRING (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}

-------------------
lalr_state [11]: {
  [Exp ::= BREAK (*) SEMICOLON , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on SEMICOLON to state [76]

-------------------
lalr_state [12]: {
  [Dec ::= fundec (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}

-------------------
lalr_state [13]: {
  [Exp ::= Exp (*) LE Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) EQ Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) MINUS Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) GE Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) LT Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) TIMES Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) GT Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) NEQ Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) PLUS Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [$START ::= Exp (*) EOF , {EOF }]
}
transition on LT to state [39]
transition on TIMES to state [38]
transition on GT to state [37]
transition on LE to state [36]
transition on EQ to state [35]
transition on PLUS to state [34]
transition on EOF to state [75]
transition on NEQ to state [33]
transition on GE to state [32]
transition on DIVIDE to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [14]: {
  [Ty ::= (*) ID , {ID }]
  [tydec ::= TYPEDEF (*) Ty ID tydec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) LBRACE TyFields RBRACE , {ID }]
  [Ty ::= (*) ARRAY OF ID , {ID }]
}
transition on ARRAY to state [23]
transition on Ty to state [71]
transition on LBRACE to state [8]
transition on ID to state [50]

-------------------
lalr_state [15]: {
  [Exp ::= If (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}

-------------------
lalr_state [16]: {
  [vardec ::= (*) VAR ID COLON Ty ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) LBRACE TyFields RBRACE , {ID }]
  [Exp ::= (*) LET decs IN Exp END , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Dec ::= (*) fundec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) ID LBRACE Exp RBRACE OF Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) error , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fundec ::= (*) fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) If , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdef ::= (*) Ty ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [tydec ::= (*) TYPEDEF Ty ID tydec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var DOT ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fundec ::= (*) fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdef ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [tydec ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) ID , {ID }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Dec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= (*) Ty ID LPAREN TyFields RPAREN SEMICOLON fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Dec ::= (*) tydec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) STRING , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdef ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [vardec ::= (*) VAR ID ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) ARRAY OF ID , {ID }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) INT , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= (*) ID LPAREN TyFields RPAREN SEMICOLON fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Dec ::= (*) vardec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= MINUS (*) Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on VAR to state [25]
transition on vardec to state [24]
transition on ARRAY to state [23]
transition on Dec to state [22]
transition on FOR to state [21]
transition on fdec to state [20]
transition on LET to state [19]
transition on fdef to state [18]
transition on error to state [17]
transition on MINUS to state [16]
transition on If to state [15]
transition on TYPEDEF to state [14]
transition on Exp to state [70]
transition on fundec to state [12]
transition on BREAK to state [11]
transition on STRING to state [10]
transition on ID to state [9]
transition on LBRACE to state [8]
transition on NIL to state [7]
transition on IF to state [6]
transition on tydec to state [5]
transition on WHILE to state [4]
transition on Var to state [3]
transition on INT to state [2]
transition on Ty to state [1]

-------------------
lalr_state [17]: {
  [Exp ::= error (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}

-------------------
lalr_state [18]: {
  [fundec ::= fdef (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}

-------------------
lalr_state [19]: {
  [Exp ::= LET (*) decs IN Exp END , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on decs to state [66]

-------------------
lalr_state [20]: {
  [fundec ::= fdec (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}

-------------------
lalr_state [21]: {
  [vardec ::= (*) VAR ID COLON Ty ASSIGN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Ty ::= (*) LBRACE TyFields RBRACE , {ID }]
  [Exp ::= (*) LET decs IN Exp END , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) Exp LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) Exp MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [fdec ::= (*) NIL , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Dec ::= (*) fundec , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN TO }]
  [Exp ::= (*) ID LBRACE Exp RBRACE OF Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) Var ASSIGN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) error , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [fundec ::= (*) fdec , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) If , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) Exp GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) Exp PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [fdef ::= (*) Ty ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [tydec ::= (*) TYPEDEF Ty ID tydec , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Var ::= (*) Var DOT ID , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN TO }]
  [Exp ::= (*) BREAK SEMICOLON , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) Exp EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) Var , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [fundec ::= (*) fdef , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [If ::= (*) IF Exp THEN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) Exp GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) Exp TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [fdef ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [tydec ::= (*) NIL , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Ty ::= (*) ID , {ID }]
  [Exp ::= FOR (*) Exp TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) Exp NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) Dec , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [fdec ::= (*) Ty ID LPAREN TyFields RPAREN SEMICOLON fdec , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Dec ::= (*) tydec , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) STRING , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) Exp DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [fdef ::= (*) NIL , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [vardec ::= (*) VAR ID ASSIGN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Ty ::= (*) ARRAY OF ID , {ID }]
  [Exp ::= FOR (*) vardec TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) Exp LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) INT , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [fdec ::= (*) ID LPAREN TyFields RPAREN SEMICOLON fdec , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Dec ::= (*) vardec , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Var ::= (*) ID , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN TO }]
  [Exp ::= (*) WHILE Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
}
transition on VAR to state [25]
transition on vardec to state [57]
transition on ARRAY to state [23]
transition on Dec to state [22]
transition on FOR to state [21]
transition on fdec to state [20]
transition on LET to state [19]
transition on fdef to state [18]
transition on error to state [17]
transition on MINUS to state [16]
transition on If to state [15]
transition on TYPEDEF to state [14]
transition on Exp to state [56]
transition on fundec to state [12]
transition on BREAK to state [11]
transition on STRING to state [10]
transition on ID to state [9]
transition on LBRACE to state [8]
transition on NIL to state [7]
transition on IF to state [6]
transition on tydec to state [5]
transition on WHILE to state [4]
transition on Var to state [3]
transition on INT to state [2]
transition on Ty to state [1]

-------------------
lalr_state [22]: {
  [Exp ::= Dec (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}

-------------------
lalr_state [23]: {
  [Ty ::= ARRAY (*) OF ID , {ID ASSIGN }]
}
transition on OF to state [54]

-------------------
lalr_state [24]: {
  [Dec ::= vardec (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}

-------------------
lalr_state [25]: {
  [vardec ::= VAR (*) ID ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [vardec ::= VAR (*) ID COLON Ty ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on ID to state [26]

-------------------
lalr_state [26]: {
  [vardec ::= VAR ID (*) ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [vardec ::= VAR ID (*) COLON Ty ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on ASSIGN to state [28]
transition on COLON to state [27]

-------------------
lalr_state [27]: {
  [Ty ::= (*) ID , {ASSIGN }]
  [Ty ::= (*) LBRACE TyFields RBRACE , {ASSIGN }]
  [Ty ::= (*) ARRAY OF ID , {ASSIGN }]
  [vardec ::= VAR ID COLON (*) Ty ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on ARRAY to state [23]
transition on Ty to state [51]
transition on LBRACE to state [8]
transition on ID to state [50]

-------------------
lalr_state [28]: {
  [vardec ::= (*) VAR ID COLON Ty ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) LBRACE TyFields RBRACE , {ID }]
  [Exp ::= (*) LET decs IN Exp END , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Dec ::= (*) fundec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) ID LBRACE Exp RBRACE OF Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) error , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fundec ::= (*) fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) If , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdef ::= (*) Ty ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [tydec ::= (*) TYPEDEF Ty ID tydec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var DOT ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fundec ::= (*) fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdef ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [tydec ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) ID , {ID }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Dec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= (*) Ty ID LPAREN TyFields RPAREN SEMICOLON fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Dec ::= (*) tydec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) STRING , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [vardec ::= VAR ID ASSIGN (*) Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdef ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [vardec ::= (*) VAR ID ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) ARRAY OF ID , {ID }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) INT , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= (*) ID LPAREN TyFields RPAREN SEMICOLON fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Dec ::= (*) vardec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on VAR to state [25]
transition on vardec to state [24]
transition on ARRAY to state [23]
transition on Dec to state [22]
transition on FOR to state [21]
transition on fdec to state [20]
transition on LET to state [19]
transition on fdef to state [18]
transition on error to state [17]
transition on MINUS to state [16]
transition on If to state [15]
transition on TYPEDEF to state [14]
transition on Exp to state [29]
transition on fundec to state [12]
transition on BREAK to state [11]
transition on STRING to state [10]
transition on ID to state [9]
transition on LBRACE to state [8]
transition on NIL to state [7]
transition on IF to state [6]
transition on tydec to state [5]
transition on WHILE to state [4]
transition on Var to state [3]
transition on INT to state [2]
transition on Ty to state [1]

-------------------
lalr_state [29]: {
  [Exp ::= Exp (*) LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [vardec ::= VAR ID ASSIGN Exp (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on LT to state [39]
transition on TIMES to state [38]
transition on GT to state [37]
transition on LE to state [36]
transition on EQ to state [35]
transition on PLUS to state [34]
transition on NEQ to state [33]
transition on GE to state [32]
transition on DIVIDE to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [30]: {
  [vardec ::= (*) VAR ID COLON Ty ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) LBRACE TyFields RBRACE , {ID }]
  [Exp ::= Exp MINUS (*) Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) LET decs IN Exp END , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Dec ::= (*) fundec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) ID LBRACE Exp RBRACE OF Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) error , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fundec ::= (*) fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) If , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdef ::= (*) Ty ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [tydec ::= (*) TYPEDEF Ty ID tydec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var DOT ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fundec ::= (*) fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdef ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [tydec ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) ID , {ID }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Dec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= (*) Ty ID LPAREN TyFields RPAREN SEMICOLON fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Dec ::= (*) tydec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) STRING , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdef ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [vardec ::= (*) VAR ID ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) ARRAY OF ID , {ID }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) INT , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= (*) ID LPAREN TyFields RPAREN SEMICOLON fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Dec ::= (*) vardec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on VAR to state [25]
transition on vardec to state [24]
transition on ARRAY to state [23]
transition on Dec to state [22]
transition on FOR to state [21]
transition on fdec to state [20]
transition on LET to state [19]
transition on fdef to state [18]
transition on error to state [17]
transition on MINUS to state [16]
transition on If to state [15]
transition on TYPEDEF to state [14]
transition on Exp to state [49]
transition on fundec to state [12]
transition on BREAK to state [11]
transition on STRING to state [10]
transition on ID to state [9]
transition on LBRACE to state [8]
transition on NIL to state [7]
transition on IF to state [6]
transition on tydec to state [5]
transition on WHILE to state [4]
transition on Var to state [3]
transition on INT to state [2]
transition on Ty to state [1]

-------------------
lalr_state [31]: {
  [vardec ::= (*) VAR ID COLON Ty ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) LBRACE TyFields RBRACE , {ID }]
  [Exp ::= (*) LET decs IN Exp END , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Dec ::= (*) fundec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) ID LBRACE Exp RBRACE OF Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) error , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fundec ::= (*) fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) If , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdef ::= (*) Ty ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [tydec ::= (*) TYPEDEF Ty ID tydec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var DOT ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fundec ::= (*) fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdef ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [tydec ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) ID , {ID }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Dec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= (*) Ty ID LPAREN TyFields RPAREN SEMICOLON fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Dec ::= (*) tydec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp DIVIDE (*) Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) STRING , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdef ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [vardec ::= (*) VAR ID ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) ARRAY OF ID , {ID }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) INT , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= (*) ID LPAREN TyFields RPAREN SEMICOLON fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Dec ::= (*) vardec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on VAR to state [25]
transition on vardec to state [24]
transition on ARRAY to state [23]
transition on Dec to state [22]
transition on FOR to state [21]
transition on fdec to state [20]
transition on LET to state [19]
transition on fdef to state [18]
transition on error to state [17]
transition on MINUS to state [16]
transition on If to state [15]
transition on TYPEDEF to state [14]
transition on Exp to state [48]
transition on fundec to state [12]
transition on BREAK to state [11]
transition on STRING to state [10]
transition on ID to state [9]
transition on LBRACE to state [8]
transition on NIL to state [7]
transition on IF to state [6]
transition on tydec to state [5]
transition on WHILE to state [4]
transition on Var to state [3]
transition on INT to state [2]
transition on Ty to state [1]

-------------------
lalr_state [32]: {
  [vardec ::= (*) VAR ID COLON Ty ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) LBRACE TyFields RBRACE , {ID }]
  [Exp ::= (*) LET decs IN Exp END , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Dec ::= (*) fundec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) ID LBRACE Exp RBRACE OF Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) error , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fundec ::= (*) fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) If , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdef ::= (*) Ty ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [tydec ::= (*) TYPEDEF Ty ID tydec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var DOT ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fundec ::= (*) fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp GE (*) Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdef ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [tydec ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) ID , {ID }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Dec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= (*) Ty ID LPAREN TyFields RPAREN SEMICOLON fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Dec ::= (*) tydec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) STRING , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdef ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [vardec ::= (*) VAR ID ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) ARRAY OF ID , {ID }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) INT , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= (*) ID LPAREN TyFields RPAREN SEMICOLON fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Dec ::= (*) vardec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on VAR to state [25]
transition on vardec to state [24]
transition on ARRAY to state [23]
transition on Dec to state [22]
transition on FOR to state [21]
transition on fdec to state [20]
transition on LET to state [19]
transition on fdef to state [18]
transition on error to state [17]
transition on MINUS to state [16]
transition on If to state [15]
transition on TYPEDEF to state [14]
transition on Exp to state [47]
transition on fundec to state [12]
transition on BREAK to state [11]
transition on STRING to state [10]
transition on ID to state [9]
transition on LBRACE to state [8]
transition on NIL to state [7]
transition on IF to state [6]
transition on tydec to state [5]
transition on WHILE to state [4]
transition on Var to state [3]
transition on INT to state [2]
transition on Ty to state [1]

-------------------
lalr_state [33]: {
  [vardec ::= (*) VAR ID COLON Ty ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) LBRACE TyFields RBRACE , {ID }]
  [Exp ::= (*) LET decs IN Exp END , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Dec ::= (*) fundec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) ID LBRACE Exp RBRACE OF Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) error , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fundec ::= (*) fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) If , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdef ::= (*) Ty ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [tydec ::= (*) TYPEDEF Ty ID tydec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var DOT ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fundec ::= (*) fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdef ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [tydec ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) ID , {ID }]
  [Exp ::= Exp NEQ (*) Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Dec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= (*) Ty ID LPAREN TyFields RPAREN SEMICOLON fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Dec ::= (*) tydec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) STRING , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdef ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [vardec ::= (*) VAR ID ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) ARRAY OF ID , {ID }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) INT , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= (*) ID LPAREN TyFields RPAREN SEMICOLON fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Dec ::= (*) vardec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on VAR to state [25]
transition on vardec to state [24]
transition on ARRAY to state [23]
transition on Dec to state [22]
transition on FOR to state [21]
transition on fdec to state [20]
transition on LET to state [19]
transition on fdef to state [18]
transition on error to state [17]
transition on MINUS to state [16]
transition on If to state [15]
transition on TYPEDEF to state [14]
transition on Exp to state [46]
transition on fundec to state [12]
transition on BREAK to state [11]
transition on STRING to state [10]
transition on ID to state [9]
transition on LBRACE to state [8]
transition on NIL to state [7]
transition on IF to state [6]
transition on tydec to state [5]
transition on WHILE to state [4]
transition on Var to state [3]
transition on INT to state [2]
transition on Ty to state [1]

-------------------
lalr_state [34]: {
  [vardec ::= (*) VAR ID COLON Ty ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) LBRACE TyFields RBRACE , {ID }]
  [Exp ::= (*) LET decs IN Exp END , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Dec ::= (*) fundec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) ID LBRACE Exp RBRACE OF Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) error , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fundec ::= (*) fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) If , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp PLUS (*) Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdef ::= (*) Ty ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [tydec ::= (*) TYPEDEF Ty ID tydec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var DOT ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fundec ::= (*) fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdef ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [tydec ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) ID , {ID }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Dec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= (*) Ty ID LPAREN TyFields RPAREN SEMICOLON fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Dec ::= (*) tydec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) STRING , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdef ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [vardec ::= (*) VAR ID ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) ARRAY OF ID , {ID }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) INT , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= (*) ID LPAREN TyFields RPAREN SEMICOLON fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Dec ::= (*) vardec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on VAR to state [25]
transition on vardec to state [24]
transition on ARRAY to state [23]
transition on Dec to state [22]
transition on FOR to state [21]
transition on fdec to state [20]
transition on LET to state [19]
transition on fdef to state [18]
transition on error to state [17]
transition on MINUS to state [16]
transition on If to state [15]
transition on TYPEDEF to state [14]
transition on Exp to state [45]
transition on fundec to state [12]
transition on BREAK to state [11]
transition on STRING to state [10]
transition on ID to state [9]
transition on LBRACE to state [8]
transition on NIL to state [7]
transition on IF to state [6]
transition on tydec to state [5]
transition on WHILE to state [4]
transition on Var to state [3]
transition on INT to state [2]
transition on Ty to state [1]

-------------------
lalr_state [35]: {
  [vardec ::= (*) VAR ID COLON Ty ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) LBRACE TyFields RBRACE , {ID }]
  [Exp ::= (*) LET decs IN Exp END , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Dec ::= (*) fundec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) ID LBRACE Exp RBRACE OF Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) error , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fundec ::= (*) fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) If , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdef ::= (*) Ty ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [tydec ::= (*) TYPEDEF Ty ID tydec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var DOT ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= Exp EQ (*) Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fundec ::= (*) fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdef ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [tydec ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) ID , {ID }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Dec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= (*) Ty ID LPAREN TyFields RPAREN SEMICOLON fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Dec ::= (*) tydec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) STRING , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdef ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [vardec ::= (*) VAR ID ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) ARRAY OF ID , {ID }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) INT , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= (*) ID LPAREN TyFields RPAREN SEMICOLON fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Dec ::= (*) vardec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on VAR to state [25]
transition on vardec to state [24]
transition on ARRAY to state [23]
transition on Dec to state [22]
transition on FOR to state [21]
transition on fdec to state [20]
transition on LET to state [19]
transition on fdef to state [18]
transition on error to state [17]
transition on MINUS to state [16]
transition on If to state [15]
transition on TYPEDEF to state [14]
transition on Exp to state [44]
transition on fundec to state [12]
transition on BREAK to state [11]
transition on STRING to state [10]
transition on ID to state [9]
transition on LBRACE to state [8]
transition on NIL to state [7]
transition on IF to state [6]
transition on tydec to state [5]
transition on WHILE to state [4]
transition on Var to state [3]
transition on INT to state [2]
transition on Ty to state [1]

-------------------
lalr_state [36]: {
  [vardec ::= (*) VAR ID COLON Ty ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) LBRACE TyFields RBRACE , {ID }]
  [Exp ::= Exp LE (*) Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) LET decs IN Exp END , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Dec ::= (*) fundec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) ID LBRACE Exp RBRACE OF Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) error , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fundec ::= (*) fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) If , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdef ::= (*) Ty ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [tydec ::= (*) TYPEDEF Ty ID tydec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var DOT ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fundec ::= (*) fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdef ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [tydec ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) ID , {ID }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Dec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= (*) Ty ID LPAREN TyFields RPAREN SEMICOLON fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Dec ::= (*) tydec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) STRING , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdef ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [vardec ::= (*) VAR ID ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) ARRAY OF ID , {ID }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) INT , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= (*) ID LPAREN TyFields RPAREN SEMICOLON fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Dec ::= (*) vardec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on VAR to state [25]
transition on vardec to state [24]
transition on ARRAY to state [23]
transition on Dec to state [22]
transition on FOR to state [21]
transition on fdec to state [20]
transition on LET to state [19]
transition on fdef to state [18]
transition on error to state [17]
transition on MINUS to state [16]
transition on If to state [15]
transition on TYPEDEF to state [14]
transition on Exp to state [43]
transition on fundec to state [12]
transition on BREAK to state [11]
transition on STRING to state [10]
transition on ID to state [9]
transition on LBRACE to state [8]
transition on NIL to state [7]
transition on IF to state [6]
transition on tydec to state [5]
transition on WHILE to state [4]
transition on Var to state [3]
transition on INT to state [2]
transition on Ty to state [1]

-------------------
lalr_state [37]: {
  [vardec ::= (*) VAR ID COLON Ty ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) LBRACE TyFields RBRACE , {ID }]
  [Exp ::= (*) LET decs IN Exp END , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Dec ::= (*) fundec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) ID LBRACE Exp RBRACE OF Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) error , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fundec ::= (*) fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp GT (*) Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) If , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdef ::= (*) Ty ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [tydec ::= (*) TYPEDEF Ty ID tydec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var DOT ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fundec ::= (*) fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdef ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [tydec ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) ID , {ID }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Dec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= (*) Ty ID LPAREN TyFields RPAREN SEMICOLON fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Dec ::= (*) tydec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) STRING , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdef ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [vardec ::= (*) VAR ID ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) ARRAY OF ID , {ID }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) INT , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= (*) ID LPAREN TyFields RPAREN SEMICOLON fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Dec ::= (*) vardec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on VAR to state [25]
transition on vardec to state [24]
transition on ARRAY to state [23]
transition on Dec to state [22]
transition on FOR to state [21]
transition on fdec to state [20]
transition on LET to state [19]
transition on fdef to state [18]
transition on error to state [17]
transition on MINUS to state [16]
transition on If to state [15]
transition on TYPEDEF to state [14]
transition on Exp to state [42]
transition on fundec to state [12]
transition on BREAK to state [11]
transition on STRING to state [10]
transition on ID to state [9]
transition on LBRACE to state [8]
transition on NIL to state [7]
transition on IF to state [6]
transition on tydec to state [5]
transition on WHILE to state [4]
transition on Var to state [3]
transition on INT to state [2]
transition on Ty to state [1]

-------------------
lalr_state [38]: {
  [vardec ::= (*) VAR ID COLON Ty ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) LBRACE TyFields RBRACE , {ID }]
  [Exp ::= (*) LET decs IN Exp END , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Dec ::= (*) fundec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) ID LBRACE Exp RBRACE OF Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) error , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fundec ::= (*) fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) If , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdef ::= (*) Ty ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [tydec ::= (*) TYPEDEF Ty ID tydec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var DOT ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fundec ::= (*) fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp TIMES (*) Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdef ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [tydec ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) ID , {ID }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Dec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= (*) Ty ID LPAREN TyFields RPAREN SEMICOLON fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Dec ::= (*) tydec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) STRING , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdef ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [vardec ::= (*) VAR ID ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) ARRAY OF ID , {ID }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) INT , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= (*) ID LPAREN TyFields RPAREN SEMICOLON fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Dec ::= (*) vardec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on VAR to state [25]
transition on vardec to state [24]
transition on ARRAY to state [23]
transition on Dec to state [22]
transition on FOR to state [21]
transition on fdec to state [20]
transition on LET to state [19]
transition on fdef to state [18]
transition on error to state [17]
transition on MINUS to state [16]
transition on If to state [15]
transition on TYPEDEF to state [14]
transition on Exp to state [41]
transition on fundec to state [12]
transition on BREAK to state [11]
transition on STRING to state [10]
transition on ID to state [9]
transition on LBRACE to state [8]
transition on NIL to state [7]
transition on IF to state [6]
transition on tydec to state [5]
transition on WHILE to state [4]
transition on Var to state [3]
transition on INT to state [2]
transition on Ty to state [1]

-------------------
lalr_state [39]: {
  [vardec ::= (*) VAR ID COLON Ty ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) LBRACE TyFields RBRACE , {ID }]
  [Exp ::= (*) LET decs IN Exp END , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Dec ::= (*) fundec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) ID LBRACE Exp RBRACE OF Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) error , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fundec ::= (*) fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) If , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdef ::= (*) Ty ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [tydec ::= (*) TYPEDEF Ty ID tydec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var DOT ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fundec ::= (*) fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdef ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [tydec ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) ID , {ID }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Dec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= (*) Ty ID LPAREN TyFields RPAREN SEMICOLON fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Dec ::= (*) tydec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) STRING , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdef ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [vardec ::= (*) VAR ID ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) ARRAY OF ID , {ID }]
  [Exp ::= Exp LT (*) Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) INT , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= (*) ID LPAREN TyFields RPAREN SEMICOLON fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Dec ::= (*) vardec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on VAR to state [25]
transition on vardec to state [24]
transition on ARRAY to state [23]
transition on Dec to state [22]
transition on FOR to state [21]
transition on fdec to state [20]
transition on LET to state [19]
transition on fdef to state [18]
transition on error to state [17]
transition on MINUS to state [16]
transition on If to state [15]
transition on TYPEDEF to state [14]
transition on Exp to state [40]
transition on fundec to state [12]
transition on BREAK to state [11]
transition on STRING to state [10]
transition on ID to state [9]
transition on LBRACE to state [8]
transition on NIL to state [7]
transition on IF to state [6]
transition on tydec to state [5]
transition on WHILE to state [4]
transition on Var to state [3]
transition on INT to state [2]
transition on Ty to state [1]

-------------------
lalr_state [40]: {
  [Exp ::= Exp (*) LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp LT Exp (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on LT to state [39]
transition on TIMES to state [38]
transition on GT to state [37]
transition on LE to state [36]
transition on EQ to state [35]
transition on PLUS to state [34]
transition on NEQ to state [33]
transition on GE to state [32]
transition on DIVIDE to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [41]: {
  [Exp ::= Exp (*) LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp TIMES Exp (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on LT to state [39]
transition on TIMES to state [38]
transition on GT to state [37]
transition on LE to state [36]
transition on EQ to state [35]
transition on PLUS to state [34]
transition on NEQ to state [33]
transition on GE to state [32]
transition on DIVIDE to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [42]: {
  [Exp ::= Exp (*) LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp GT Exp (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on LT to state [39]
transition on TIMES to state [38]
transition on GT to state [37]
transition on LE to state [36]
transition on EQ to state [35]
transition on PLUS to state [34]
transition on NEQ to state [33]
transition on GE to state [32]
transition on DIVIDE to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [43]: {
  [Exp ::= Exp (*) LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp LE Exp (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on LT to state [39]
transition on TIMES to state [38]
transition on GT to state [37]
transition on LE to state [36]
transition on EQ to state [35]
transition on PLUS to state [34]
transition on NEQ to state [33]
transition on GE to state [32]
transition on DIVIDE to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [44]: {
  [Exp ::= Exp EQ Exp (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on LT to state [39]
transition on TIMES to state [38]
transition on GT to state [37]
transition on LE to state [36]
transition on EQ to state [35]
transition on PLUS to state [34]
transition on NEQ to state [33]
transition on GE to state [32]
transition on DIVIDE to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [45]: {
  [Exp ::= Exp (*) LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp PLUS Exp (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on LT to state [39]
transition on TIMES to state [38]
transition on GT to state [37]
transition on LE to state [36]
transition on EQ to state [35]
transition on PLUS to state [34]
transition on NEQ to state [33]
transition on GE to state [32]
transition on DIVIDE to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [46]: {
  [Exp ::= Exp (*) LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp NEQ Exp (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on LT to state [39]
transition on TIMES to state [38]
transition on GT to state [37]
transition on LE to state [36]
transition on EQ to state [35]
transition on PLUS to state [34]
transition on NEQ to state [33]
transition on GE to state [32]
transition on DIVIDE to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [47]: {
  [Exp ::= Exp (*) LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp GE Exp (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on LT to state [39]
transition on TIMES to state [38]
transition on GT to state [37]
transition on LE to state [36]
transition on EQ to state [35]
transition on PLUS to state [34]
transition on NEQ to state [33]
transition on GE to state [32]
transition on DIVIDE to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [48]: {
  [Exp ::= Exp DIVIDE Exp (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on LT to state [39]
transition on TIMES to state [38]
transition on GT to state [37]
transition on LE to state [36]
transition on EQ to state [35]
transition on PLUS to state [34]
transition on NEQ to state [33]
transition on GE to state [32]
transition on DIVIDE to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [49]: {
  [Exp ::= Exp (*) LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp MINUS Exp (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on LT to state [39]
transition on TIMES to state [38]
transition on GT to state [37]
transition on LE to state [36]
transition on EQ to state [35]
transition on PLUS to state [34]
transition on NEQ to state [33]
transition on GE to state [32]
transition on DIVIDE to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [50]: {
  [Ty ::= ID (*) , {ID ASSIGN }]
}

-------------------
lalr_state [51]: {
  [vardec ::= VAR ID COLON Ty (*) ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on ASSIGN to state [52]

-------------------
lalr_state [52]: {
  [vardec ::= VAR ID COLON Ty ASSIGN (*) Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [vardec ::= (*) VAR ID COLON Ty ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) LBRACE TyFields RBRACE , {ID }]
  [Exp ::= (*) LET decs IN Exp END , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Dec ::= (*) fundec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) ID LBRACE Exp RBRACE OF Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) error , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fundec ::= (*) fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) If , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdef ::= (*) Ty ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [tydec ::= (*) TYPEDEF Ty ID tydec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var DOT ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fundec ::= (*) fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdef ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [tydec ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) ID , {ID }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Dec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= (*) Ty ID LPAREN TyFields RPAREN SEMICOLON fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Dec ::= (*) tydec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) STRING , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdef ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [vardec ::= (*) VAR ID ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) ARRAY OF ID , {ID }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) INT , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= (*) ID LPAREN TyFields RPAREN SEMICOLON fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Dec ::= (*) vardec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on VAR to state [25]
transition on vardec to state [24]
transition on ARRAY to state [23]
transition on Dec to state [22]
transition on FOR to state [21]
transition on fdec to state [20]
transition on LET to state [19]
transition on fdef to state [18]
transition on error to state [17]
transition on MINUS to state [16]
transition on If to state [15]
transition on TYPEDEF to state [14]
transition on Exp to state [53]
transition on fundec to state [12]
transition on BREAK to state [11]
transition on STRING to state [10]
transition on ID to state [9]
transition on LBRACE to state [8]
transition on NIL to state [7]
transition on IF to state [6]
transition on tydec to state [5]
transition on WHILE to state [4]
transition on Var to state [3]
transition on INT to state [2]
transition on Ty to state [1]

-------------------
lalr_state [53]: {
  [Exp ::= Exp (*) LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [vardec ::= VAR ID COLON Ty ASSIGN Exp (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on LT to state [39]
transition on TIMES to state [38]
transition on GT to state [37]
transition on LE to state [36]
transition on EQ to state [35]
transition on PLUS to state [34]
transition on NEQ to state [33]
transition on GE to state [32]
transition on DIVIDE to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [54]: {
  [Ty ::= ARRAY OF (*) ID , {ID ASSIGN }]
}
transition on ID to state [55]

-------------------
lalr_state [55]: {
  [Ty ::= ARRAY OF ID (*) , {ID ASSIGN }]
}

-------------------
lalr_state [56]: {
  [Exp ::= Exp (*) LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= Exp (*) EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= Exp (*) DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= Exp (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= Exp (*) GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= Exp (*) LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= Exp (*) TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= FOR Exp (*) TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= Exp (*) NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= Exp (*) PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
}
transition on LT to state [39]
transition on TIMES to state [38]
transition on GT to state [37]
transition on LE to state [36]
transition on EQ to state [35]
transition on PLUS to state [34]
transition on NEQ to state [33]
transition on TO to state [62]
transition on GE to state [32]
transition on DIVIDE to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [57]: {
  [Dec ::= vardec (*) , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= FOR vardec (*) TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on TO to state [58]

-------------------
lalr_state [58]: {
  [vardec ::= (*) VAR ID COLON Ty ASSIGN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Ty ::= (*) LBRACE TyFields RBRACE , {ID }]
  [Exp ::= (*) LET decs IN Exp END , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [fdec ::= (*) NIL , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Dec ::= (*) fundec , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN DO }]
  [Exp ::= (*) ID LBRACE Exp RBRACE OF Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Var ASSIGN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) error , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [fundec ::= (*) fdec , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) If , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [fdef ::= (*) Ty ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [tydec ::= (*) TYPEDEF Ty ID tydec , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Var ::= (*) Var DOT ID , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN DO }]
  [Exp ::= (*) BREAK SEMICOLON , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Var , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [fundec ::= (*) fdef , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [If ::= (*) IF Exp THEN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [fdef ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [tydec ::= (*) NIL , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Ty ::= (*) ID , {ID }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Dec , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [fdec ::= (*) Ty ID LPAREN TyFields RPAREN SEMICOLON fdec , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Dec ::= (*) tydec , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) STRING , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [fdef ::= (*) NIL , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= FOR vardec TO (*) Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [vardec ::= (*) VAR ID ASSIGN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Ty ::= (*) ARRAY OF ID , {ID }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) INT , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [fdec ::= (*) ID LPAREN TyFields RPAREN SEMICOLON fdec , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Dec ::= (*) vardec , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Var ::= (*) ID , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN DO }]
  [Exp ::= (*) WHILE Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
}
transition on VAR to state [25]
transition on vardec to state [24]
transition on ARRAY to state [23]
transition on Dec to state [22]
transition on FOR to state [21]
transition on fdec to state [20]
transition on LET to state [19]
transition on fdef to state [18]
transition on error to state [17]
transition on MINUS to state [16]
transition on If to state [15]
transition on TYPEDEF to state [14]
transition on Exp to state [59]
transition on fundec to state [12]
transition on BREAK to state [11]
transition on STRING to state [10]
transition on ID to state [9]
transition on LBRACE to state [8]
transition on NIL to state [7]
transition on IF to state [6]
transition on tydec to state [5]
transition on WHILE to state [4]
transition on Var to state [3]
transition on INT to state [2]
transition on Ty to state [1]

-------------------
lalr_state [59]: {
  [Exp ::= Exp (*) LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= FOR vardec TO Exp (*) DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
}
transition on LT to state [39]
transition on DO to state [60]
transition on TIMES to state [38]
transition on GT to state [37]
transition on LE to state [36]
transition on EQ to state [35]
transition on PLUS to state [34]
transition on NEQ to state [33]
transition on GE to state [32]
transition on DIVIDE to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [60]: {
  [vardec ::= (*) VAR ID COLON Ty ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) LBRACE TyFields RBRACE , {ID }]
  [Exp ::= (*) LET decs IN Exp END , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Dec ::= (*) fundec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) ID LBRACE Exp RBRACE OF Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) error , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fundec ::= (*) fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) If , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdef ::= (*) Ty ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [tydec ::= (*) TYPEDEF Ty ID tydec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var DOT ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fundec ::= (*) fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdef ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [tydec ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) ID , {ID }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Dec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= (*) Ty ID LPAREN TyFields RPAREN SEMICOLON fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Dec ::= (*) tydec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) STRING , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= FOR vardec TO Exp DO (*) Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdef ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [vardec ::= (*) VAR ID ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) ARRAY OF ID , {ID }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) INT , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= (*) ID LPAREN TyFields RPAREN SEMICOLON fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Dec ::= (*) vardec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on VAR to state [25]
transition on vardec to state [24]
transition on ARRAY to state [23]
transition on Dec to state [22]
transition on FOR to state [21]
transition on fdec to state [20]
transition on LET to state [19]
transition on fdef to state [18]
transition on error to state [17]
transition on MINUS to state [16]
transition on If to state [15]
transition on TYPEDEF to state [14]
transition on Exp to state [61]
transition on fundec to state [12]
transition on BREAK to state [11]
transition on STRING to state [10]
transition on ID to state [9]
transition on LBRACE to state [8]
transition on NIL to state [7]
transition on IF to state [6]
transition on tydec to state [5]
transition on WHILE to state [4]
transition on Var to state [3]
transition on INT to state [2]
transition on Ty to state [1]

-------------------
lalr_state [61]: {
  [Exp ::= FOR vardec TO Exp DO Exp (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on LT to state [39]
transition on TIMES to state [38]
transition on GT to state [37]
transition on LE to state [36]
transition on EQ to state [35]
transition on PLUS to state [34]
transition on NEQ to state [33]
transition on GE to state [32]
transition on DIVIDE to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [62]: {
  [vardec ::= (*) VAR ID COLON Ty ASSIGN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Ty ::= (*) LBRACE TyFields RBRACE , {ID }]
  [Exp ::= (*) LET decs IN Exp END , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [fdec ::= (*) NIL , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Dec ::= (*) fundec , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN DO }]
  [Exp ::= (*) ID LBRACE Exp RBRACE OF Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Var ASSIGN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) error , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [fundec ::= (*) fdec , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) If , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [fdef ::= (*) Ty ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [tydec ::= (*) TYPEDEF Ty ID tydec , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Var ::= (*) Var DOT ID , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN DO }]
  [Exp ::= (*) BREAK SEMICOLON , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Var , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [fundec ::= (*) fdef , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [If ::= (*) IF Exp THEN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [fdef ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= FOR Exp TO (*) Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [tydec ::= (*) NIL , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Ty ::= (*) ID , {ID }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Dec , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [fdec ::= (*) Ty ID LPAREN TyFields RPAREN SEMICOLON fdec , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Dec ::= (*) tydec , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) STRING , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [fdef ::= (*) NIL , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [vardec ::= (*) VAR ID ASSIGN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Ty ::= (*) ARRAY OF ID , {ID }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) INT , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [fdec ::= (*) ID LPAREN TyFields RPAREN SEMICOLON fdec , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Dec ::= (*) vardec , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Var ::= (*) ID , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN DO }]
  [Exp ::= (*) WHILE Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
}
transition on VAR to state [25]
transition on vardec to state [24]
transition on ARRAY to state [23]
transition on Dec to state [22]
transition on FOR to state [21]
transition on fdec to state [20]
transition on LET to state [19]
transition on fdef to state [18]
transition on error to state [17]
transition on MINUS to state [16]
transition on If to state [15]
transition on TYPEDEF to state [14]
transition on Exp to state [63]
transition on fundec to state [12]
transition on BREAK to state [11]
transition on STRING to state [10]
transition on ID to state [9]
transition on LBRACE to state [8]
transition on NIL to state [7]
transition on IF to state [6]
transition on tydec to state [5]
transition on WHILE to state [4]
transition on Var to state [3]
transition on INT to state [2]
transition on Ty to state [1]

-------------------
lalr_state [63]: {
  [Exp ::= Exp (*) LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= FOR Exp TO Exp (*) DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
}
transition on DO to state [64]
transition on LT to state [39]
transition on TIMES to state [38]
transition on GT to state [37]
transition on LE to state [36]
transition on EQ to state [35]
transition on PLUS to state [34]
transition on NEQ to state [33]
transition on GE to state [32]
transition on DIVIDE to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [64]: {
  [vardec ::= (*) VAR ID COLON Ty ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) LBRACE TyFields RBRACE , {ID }]
  [Exp ::= (*) LET decs IN Exp END , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Dec ::= (*) fundec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) ID LBRACE Exp RBRACE OF Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) error , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fundec ::= (*) fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) If , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdef ::= (*) Ty ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [tydec ::= (*) TYPEDEF Ty ID tydec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var DOT ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fundec ::= (*) fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= FOR Exp TO Exp DO (*) Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdef ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [tydec ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) ID , {ID }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Dec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= (*) Ty ID LPAREN TyFields RPAREN SEMICOLON fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Dec ::= (*) tydec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) STRING , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdef ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [vardec ::= (*) VAR ID ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) ARRAY OF ID , {ID }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) INT , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= (*) ID LPAREN TyFields RPAREN SEMICOLON fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Dec ::= (*) vardec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on VAR to state [25]
transition on vardec to state [24]
transition on ARRAY to state [23]
transition on Dec to state [22]
transition on FOR to state [21]
transition on fdec to state [20]
transition on LET to state [19]
transition on fdef to state [18]
transition on error to state [17]
transition on MINUS to state [16]
transition on If to state [15]
transition on TYPEDEF to state [14]
transition on Exp to state [65]
transition on fundec to state [12]
transition on BREAK to state [11]
transition on STRING to state [10]
transition on ID to state [9]
transition on LBRACE to state [8]
transition on NIL to state [7]
transition on IF to state [6]
transition on tydec to state [5]
transition on WHILE to state [4]
transition on Var to state [3]
transition on INT to state [2]
transition on Ty to state [1]

-------------------
lalr_state [65]: {
  [Exp ::= Exp (*) LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= FOR Exp TO Exp DO Exp (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on LT to state [39]
transition on TIMES to state [38]
transition on GT to state [37]
transition on LE to state [36]
transition on EQ to state [35]
transition on PLUS to state [34]
transition on NEQ to state [33]
transition on GE to state [32]
transition on DIVIDE to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [66]: {
  [Exp ::= LET decs (*) IN Exp END , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on IN to state [67]

-------------------
lalr_state [67]: {
  [Exp ::= LET decs IN (*) Exp END , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [vardec ::= (*) VAR ID COLON Ty ASSIGN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Ty ::= (*) LBRACE TyFields RBRACE , {ID }]
  [Exp ::= (*) LET decs IN Exp END , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) Exp LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) Exp MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [fdec ::= (*) NIL , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Dec ::= (*) fundec , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN END }]
  [Exp ::= (*) ID LBRACE Exp RBRACE OF Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) Var ASSIGN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) error , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [fundec ::= (*) fdec , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) If , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) Exp GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) Exp PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [fdef ::= (*) Ty ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [tydec ::= (*) TYPEDEF Ty ID tydec , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Var ::= (*) Var DOT ID , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN END }]
  [Exp ::= (*) BREAK SEMICOLON , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) Exp EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) Var , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [fundec ::= (*) fdef , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [If ::= (*) IF Exp THEN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) Exp GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) Exp TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [fdef ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [tydec ::= (*) NIL , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Ty ::= (*) ID , {ID }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) Exp NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) Dec , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [fdec ::= (*) Ty ID LPAREN TyFields RPAREN SEMICOLON fdec , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Dec ::= (*) tydec , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) STRING , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) Exp DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [fdef ::= (*) NIL , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [vardec ::= (*) VAR ID ASSIGN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Ty ::= (*) ARRAY OF ID , {ID }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) Exp LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) INT , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [fdec ::= (*) ID LPAREN TyFields RPAREN SEMICOLON fdec , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Dec ::= (*) vardec , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Var ::= (*) ID , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN END }]
  [Exp ::= (*) WHILE Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
}
transition on VAR to state [25]
transition on vardec to state [24]
transition on ARRAY to state [23]
transition on Dec to state [22]
transition on FOR to state [21]
transition on fdec to state [20]
transition on LET to state [19]
transition on fdef to state [18]
transition on error to state [17]
transition on MINUS to state [16]
transition on If to state [15]
transition on TYPEDEF to state [14]
transition on Exp to state [68]
transition on fundec to state [12]
transition on BREAK to state [11]
transition on STRING to state [10]
transition on ID to state [9]
transition on LBRACE to state [8]
transition on NIL to state [7]
transition on IF to state [6]
transition on tydec to state [5]
transition on WHILE to state [4]
transition on Var to state [3]
transition on INT to state [2]
transition on Ty to state [1]

-------------------
lalr_state [68]: {
  [Exp ::= Exp (*) LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= Exp (*) EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= Exp (*) DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= Exp (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= Exp (*) GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= Exp (*) LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= Exp (*) TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= Exp (*) GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= Exp (*) NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= LET decs IN Exp (*) END , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
}
transition on LT to state [39]
transition on END to state [69]
transition on TIMES to state [38]
transition on GT to state [37]
transition on LE to state [36]
transition on EQ to state [35]
transition on PLUS to state [34]
transition on NEQ to state [33]
transition on GE to state [32]
transition on DIVIDE to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [69]: {
  [Exp ::= LET decs IN Exp END (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}

-------------------
lalr_state [70]: {
  [Exp ::= Exp (*) LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= MINUS Exp (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on LT to state [39]
transition on TIMES to state [38]
transition on GT to state [37]
transition on LE to state [36]
transition on EQ to state [35]
transition on PLUS to state [34]
transition on NEQ to state [33]
transition on GE to state [32]
transition on DIVIDE to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [71]: {
  [tydec ::= TYPEDEF Ty (*) ID tydec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on ID to state [72]

-------------------
lalr_state [72]: {
  [tydec ::= (*) TYPEDEF Ty ID tydec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [tydec ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [tydec ::= TYPEDEF Ty ID (*) tydec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on NIL to state [74]
transition on TYPEDEF to state [14]
transition on tydec to state [73]

-------------------
lalr_state [73]: {
  [tydec ::= TYPEDEF Ty ID tydec (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}

-------------------
lalr_state [74]: {
  [tydec ::= NIL (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}

-------------------
lalr_state [75]: {
  [$START ::= Exp EOF (*) , {EOF }]
}

-------------------
lalr_state [76]: {
  [Exp ::= BREAK SEMICOLON (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}

-------------------
lalr_state [77]: {
  [vardec ::= (*) VAR ID COLON Ty ASSIGN Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Ty ::= (*) LBRACE TyFields RBRACE , {ID }]
  [Exp ::= (*) LET decs IN Exp END , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp LE Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp MINUS Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [fdec ::= (*) NIL , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Dec ::= (*) fundec , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= ID LBRACE (*) Exp RBRACE OF Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {LBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
  [Exp ::= (*) ID LBRACE Exp RBRACE OF Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Var ASSIGN Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) error , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [fundec ::= (*) fdec , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) If , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp GT Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp PLUS Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [fdef ::= (*) Ty ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [tydec ::= (*) TYPEDEF Ty ID tydec , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= (*) Var DOT ID , {LBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
  [Exp ::= (*) BREAK SEMICOLON , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp EQ Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Var , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [fundec ::= (*) fdef , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [If ::= (*) IF Exp THEN Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp GE Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp TIMES Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [fdef ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [tydec ::= (*) NIL , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Ty ::= (*) ID , {ID }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp NEQ Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Dec , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [fdec ::= (*) Ty ID LPAREN TyFields RPAREN SEMICOLON fdec , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Dec ::= (*) tydec , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) STRING , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp DIVIDE Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [fdef ::= (*) NIL , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [vardec ::= (*) VAR ID ASSIGN Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Ty ::= (*) ARRAY OF ID , {ID }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp LT Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) INT , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [fdec ::= (*) ID LPAREN TyFields RPAREN SEMICOLON fdec , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Dec ::= (*) vardec , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= (*) ID , {LBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
  [Exp ::= (*) WHILE Exp DO Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) MINUS Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
}
transition on VAR to state [25]
transition on vardec to state [24]
transition on ARRAY to state [23]
transition on Dec to state [22]
transition on FOR to state [21]
transition on fdec to state [20]
transition on LET to state [19]
transition on fdef to state [18]
transition on error to state [17]
transition on MINUS to state [16]
transition on If to state [15]
transition on TYPEDEF to state [14]
transition on Exp to state [118]
transition on fundec to state [12]
transition on BREAK to state [11]
transition on STRING to state [10]
transition on ID to state [9]
transition on LBRACE to state [8]
transition on NIL to state [7]
transition on IF to state [6]
transition on tydec to state [5]
transition on WHILE to state [4]
transition on Var to state [3]
transition on INT to state [2]
transition on Ty to state [1]

-------------------
lalr_state [78]: {
  [fdef ::= ID LPAREN (*) TyFields RPAREN LBRACE Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= ID LPAREN (*) TyFields RPAREN SEMICOLON fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [TyFields ::= (*) ID COLON ID TyFields , {RPAREN }]
  [TyFields ::= (*) NIL , {RPAREN }]
}
transition on NIL to state [81]
transition on TyFields to state [80]
transition on ID to state [79]

-------------------
lalr_state [79]: {
  [TyFields ::= ID (*) COLON ID TyFields , {RPAREN RBRACE }]
}
transition on COLON to state [115]

-------------------
lalr_state [80]: {
  [fdef ::= ID LPAREN TyFields (*) RPAREN LBRACE Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= ID LPAREN TyFields (*) RPAREN SEMICOLON fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on RPAREN to state [82]

-------------------
lalr_state [81]: {
  [TyFields ::= NIL (*) , {RPAREN RBRACE }]
}

-------------------
lalr_state [82]: {
  [fdef ::= ID LPAREN TyFields RPAREN (*) LBRACE Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= ID LPAREN TyFields RPAREN (*) SEMICOLON fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on SEMICOLON to state [84]
transition on LBRACE to state [83]

-------------------
lalr_state [83]: {
  [vardec ::= (*) VAR ID COLON Ty ASSIGN Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Ty ::= (*) LBRACE TyFields RBRACE , {ID }]
  [Exp ::= (*) LET decs IN Exp END , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp LE Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp MINUS Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [fdec ::= (*) NIL , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Dec ::= (*) fundec , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {LBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
  [Exp ::= (*) ID LBRACE Exp RBRACE OF Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Var ASSIGN Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) error , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [fundec ::= (*) fdec , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) If , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp GT Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp PLUS Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [fdef ::= (*) Ty ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [tydec ::= (*) TYPEDEF Ty ID tydec , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= (*) Var DOT ID , {LBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
  [Exp ::= (*) BREAK SEMICOLON , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp EQ Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Var , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [fundec ::= (*) fdef , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [If ::= (*) IF Exp THEN Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp GE Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp TIMES Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [fdef ::= ID LPAREN TyFields RPAREN LBRACE (*) Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdef ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [tydec ::= (*) NIL , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Ty ::= (*) ID , {ID }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp NEQ Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Dec , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [fdec ::= (*) Ty ID LPAREN TyFields RPAREN SEMICOLON fdec , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Dec ::= (*) tydec , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) STRING , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp DIVIDE Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [fdef ::= (*) NIL , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [vardec ::= (*) VAR ID ASSIGN Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Ty ::= (*) ARRAY OF ID , {ID }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp LT Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) INT , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [fdec ::= (*) ID LPAREN TyFields RPAREN SEMICOLON fdec , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Dec ::= (*) vardec , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= (*) ID , {LBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
  [Exp ::= (*) WHILE Exp DO Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) MINUS Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
}
transition on VAR to state [25]
transition on vardec to state [24]
transition on ARRAY to state [23]
transition on Dec to state [22]
transition on FOR to state [21]
transition on fdec to state [20]
transition on LET to state [19]
transition on fdef to state [18]
transition on error to state [17]
transition on MINUS to state [16]
transition on If to state [15]
transition on TYPEDEF to state [14]
transition on Exp to state [98]
transition on fundec to state [12]
transition on BREAK to state [11]
transition on STRING to state [10]
transition on ID to state [9]
transition on LBRACE to state [8]
transition on NIL to state [7]
transition on IF to state [6]
transition on tydec to state [5]
transition on WHILE to state [4]
transition on Var to state [3]
transition on INT to state [2]
transition on Ty to state [1]

-------------------
lalr_state [84]: {
  [Ty ::= (*) ID , {ID }]
  [fdec ::= ID LPAREN TyFields RPAREN SEMICOLON (*) fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) LBRACE TyFields RBRACE , {ID }]
  [fdec ::= (*) ID LPAREN TyFields RPAREN SEMICOLON fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) ARRAY OF ID , {ID }]
  [fdec ::= (*) Ty ID LPAREN TyFields RPAREN SEMICOLON fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on NIL to state [88]
transition on ARRAY to state [23]
transition on Ty to state [87]
transition on fdec to state [86]
transition on LBRACE to state [8]
transition on ID to state [85]

-------------------
lalr_state [85]: {
  [fdec ::= ID (*) LPAREN TyFields RPAREN SEMICOLON fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= ID (*) , {ID }]
}
transition on LPAREN to state [95]

-------------------
lalr_state [86]: {
  [fdec ::= ID LPAREN TyFields RPAREN SEMICOLON fdec (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}

-------------------
lalr_state [87]: {
  [fdec ::= Ty (*) ID LPAREN TyFields RPAREN SEMICOLON fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on ID to state [89]

-------------------
lalr_state [88]: {
  [fdec ::= NIL (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}

-------------------
lalr_state [89]: {
  [fdec ::= Ty ID (*) LPAREN TyFields RPAREN SEMICOLON fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on LPAREN to state [90]

-------------------
lalr_state [90]: {
  [TyFields ::= (*) ID COLON ID TyFields , {RPAREN }]
  [fdec ::= Ty ID LPAREN (*) TyFields RPAREN SEMICOLON fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [TyFields ::= (*) NIL , {RPAREN }]
}
transition on NIL to state [81]
transition on TyFields to state [91]
transition on ID to state [79]

-------------------
lalr_state [91]: {
  [fdec ::= Ty ID LPAREN TyFields (*) RPAREN SEMICOLON fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on RPAREN to state [92]

-------------------
lalr_state [92]: {
  [fdec ::= Ty ID LPAREN TyFields RPAREN (*) SEMICOLON fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on SEMICOLON to state [93]

-------------------
lalr_state [93]: {
  [Ty ::= (*) ID , {ID }]
  [fdec ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) LBRACE TyFields RBRACE , {ID }]
  [fdec ::= Ty ID LPAREN TyFields RPAREN SEMICOLON (*) fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= (*) ID LPAREN TyFields RPAREN SEMICOLON fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) ARRAY OF ID , {ID }]
  [fdec ::= (*) Ty ID LPAREN TyFields RPAREN SEMICOLON fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on NIL to state [88]
transition on ARRAY to state [23]
transition on Ty to state [87]
transition on LBRACE to state [8]
transition on fdec to state [94]
transition on ID to state [85]

-------------------
lalr_state [94]: {
  [fdec ::= Ty ID LPAREN TyFields RPAREN SEMICOLON fdec (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}

-------------------
lalr_state [95]: {
  [fdec ::= ID LPAREN (*) TyFields RPAREN SEMICOLON fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [TyFields ::= (*) ID COLON ID TyFields , {RPAREN }]
  [TyFields ::= (*) NIL , {RPAREN }]
}
transition on NIL to state [81]
transition on TyFields to state [96]
transition on ID to state [79]

-------------------
lalr_state [96]: {
  [fdec ::= ID LPAREN TyFields (*) RPAREN SEMICOLON fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on RPAREN to state [97]

-------------------
lalr_state [97]: {
  [fdec ::= ID LPAREN TyFields RPAREN (*) SEMICOLON fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on SEMICOLON to state [84]

-------------------
lalr_state [98]: {
  [fdef ::= ID LPAREN TyFields RPAREN LBRACE Exp (*) RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) LE Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) EQ Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) DIVIDE Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) MINUS Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) GE Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) LT Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) TIMES Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) GT Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) NEQ Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) PLUS Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
}
transition on LT to state [39]
transition on RBRACE to state [99]
transition on TIMES to state [38]
transition on GT to state [37]
transition on LE to state [36]
transition on EQ to state [35]
transition on PLUS to state [34]
transition on NEQ to state [33]
transition on GE to state [32]
transition on DIVIDE to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [99]: {
  [Ty ::= (*) ID , {ID }]
  [fdef ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) LBRACE TyFields RBRACE , {ID }]
  [fdef ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) ARRAY OF ID , {ID }]
  [fdef ::= (*) Ty ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdef ::= ID LPAREN TyFields RPAREN LBRACE Exp RBRACE (*) fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on NIL to state [103]
transition on ARRAY to state [23]
transition on fdef to state [102]
transition on Ty to state [101]
transition on LBRACE to state [8]
transition on ID to state [100]

-------------------
lalr_state [100]: {
  [fdef ::= ID (*) LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= ID (*) , {ID }]
}
transition on LPAREN to state [112]

-------------------
lalr_state [101]: {
  [fdef ::= Ty (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on ID to state [104]

-------------------
lalr_state [102]: {
  [fdef ::= ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}

-------------------
lalr_state [103]: {
  [fdef ::= NIL (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}

-------------------
lalr_state [104]: {
  [fdef ::= Ty ID (*) LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on LPAREN to state [105]

-------------------
lalr_state [105]: {
  [TyFields ::= (*) ID COLON ID TyFields , {RPAREN }]
  [fdef ::= Ty ID LPAREN (*) TyFields RPAREN LBRACE Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [TyFields ::= (*) NIL , {RPAREN }]
}
transition on NIL to state [81]
transition on TyFields to state [106]
transition on ID to state [79]

-------------------
lalr_state [106]: {
  [fdef ::= Ty ID LPAREN TyFields (*) RPAREN LBRACE Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on RPAREN to state [107]

-------------------
lalr_state [107]: {
  [fdef ::= Ty ID LPAREN TyFields RPAREN (*) LBRACE Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on LBRACE to state [108]

-------------------
lalr_state [108]: {
  [vardec ::= (*) VAR ID COLON Ty ASSIGN Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Ty ::= (*) LBRACE TyFields RBRACE , {ID }]
  [Exp ::= (*) LET decs IN Exp END , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp LE Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp MINUS Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [fdec ::= (*) NIL , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Dec ::= (*) fundec , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {LBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
  [Exp ::= (*) ID LBRACE Exp RBRACE OF Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Var ASSIGN Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) error , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [fundec ::= (*) fdec , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) If , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp GT Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [fdef ::= Ty ID LPAREN TyFields RPAREN LBRACE (*) Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp PLUS Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [fdef ::= (*) Ty ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [tydec ::= (*) TYPEDEF Ty ID tydec , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= (*) Var DOT ID , {LBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
  [Exp ::= (*) BREAK SEMICOLON , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp EQ Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Var , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [fundec ::= (*) fdef , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [If ::= (*) IF Exp THEN Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp GE Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp TIMES Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [fdef ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [tydec ::= (*) NIL , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Ty ::= (*) ID , {ID }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp NEQ Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Dec , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [fdec ::= (*) Ty ID LPAREN TyFields RPAREN SEMICOLON fdec , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Dec ::= (*) tydec , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) STRING , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp DIVIDE Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [fdef ::= (*) NIL , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [vardec ::= (*) VAR ID ASSIGN Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Ty ::= (*) ARRAY OF ID , {ID }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp LT Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) INT , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [fdec ::= (*) ID LPAREN TyFields RPAREN SEMICOLON fdec , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Dec ::= (*) vardec , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= (*) ID , {LBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
  [Exp ::= (*) WHILE Exp DO Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) MINUS Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
}
transition on VAR to state [25]
transition on vardec to state [24]
transition on ARRAY to state [23]
transition on Dec to state [22]
transition on FOR to state [21]
transition on fdec to state [20]
transition on LET to state [19]
transition on fdef to state [18]
transition on error to state [17]
transition on MINUS to state [16]
transition on If to state [15]
transition on TYPEDEF to state [14]
transition on Exp to state [109]
transition on fundec to state [12]
transition on BREAK to state [11]
transition on STRING to state [10]
transition on ID to state [9]
transition on LBRACE to state [8]
transition on NIL to state [7]
transition on IF to state [6]
transition on tydec to state [5]
transition on WHILE to state [4]
transition on Var to state [3]
transition on INT to state [2]
transition on Ty to state [1]

-------------------
lalr_state [109]: {
  [Exp ::= Exp (*) LE Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) EQ Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) DIVIDE Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) MINUS Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [fdef ::= Ty ID LPAREN TyFields RPAREN LBRACE Exp (*) RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GE Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) LT Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) TIMES Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) GT Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) NEQ Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) PLUS Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
}
transition on LT to state [39]
transition on RBRACE to state [110]
transition on TIMES to state [38]
transition on GT to state [37]
transition on LE to state [36]
transition on EQ to state [35]
transition on PLUS to state [34]
transition on NEQ to state [33]
transition on GE to state [32]
transition on DIVIDE to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [110]: {
  [Ty ::= (*) ID , {ID }]
  [fdef ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdef ::= Ty ID LPAREN TyFields RPAREN LBRACE Exp RBRACE (*) fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) LBRACE TyFields RBRACE , {ID }]
  [fdef ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) ARRAY OF ID , {ID }]
  [fdef ::= (*) Ty ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on NIL to state [103]
transition on ARRAY to state [23]
transition on fdef to state [111]
transition on Ty to state [101]
transition on LBRACE to state [8]
transition on ID to state [100]

-------------------
lalr_state [111]: {
  [fdef ::= Ty ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}

-------------------
lalr_state [112]: {
  [fdef ::= ID LPAREN (*) TyFields RPAREN LBRACE Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [TyFields ::= (*) ID COLON ID TyFields , {RPAREN }]
  [TyFields ::= (*) NIL , {RPAREN }]
}
transition on NIL to state [81]
transition on TyFields to state [113]
transition on ID to state [79]

-------------------
lalr_state [113]: {
  [fdef ::= ID LPAREN TyFields (*) RPAREN LBRACE Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on RPAREN to state [114]

-------------------
lalr_state [114]: {
  [fdef ::= ID LPAREN TyFields RPAREN (*) LBRACE Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on LBRACE to state [83]

-------------------
lalr_state [115]: {
  [TyFields ::= ID COLON (*) ID TyFields , {RPAREN RBRACE }]
}
transition on ID to state [116]

-------------------
lalr_state [116]: {
  [TyFields ::= ID COLON ID (*) TyFields , {RPAREN RBRACE }]
  [TyFields ::= (*) ID COLON ID TyFields , {RPAREN RBRACE }]
  [TyFields ::= (*) NIL , {RPAREN RBRACE }]
}
transition on NIL to state [81]
transition on TyFields to state [117]
transition on ID to state [79]

-------------------
lalr_state [117]: {
  [TyFields ::= ID COLON ID TyFields (*) , {RPAREN RBRACE }]
}

-------------------
lalr_state [118]: {
  [Exp ::= Exp (*) LE Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) EQ Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) DIVIDE Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) MINUS Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= ID LBRACE Exp (*) RBRACE OF Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GE Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) LT Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) TIMES Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) GT Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) NEQ Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) PLUS Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
}
transition on LT to state [39]
transition on RBRACE to state [119]
transition on TIMES to state [38]
transition on GT to state [37]
transition on LE to state [36]
transition on EQ to state [35]
transition on PLUS to state [34]
transition on NEQ to state [33]
transition on GE to state [32]
transition on DIVIDE to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [119]: {
  [Exp ::= ID LBRACE Exp RBRACE (*) OF Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on OF to state [120]

-------------------
lalr_state [120]: {
  [vardec ::= (*) VAR ID COLON Ty ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) LBRACE TyFields RBRACE , {ID }]
  [Exp ::= (*) LET decs IN Exp END , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= ID LBRACE Exp RBRACE OF (*) Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Dec ::= (*) fundec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) ID LBRACE Exp RBRACE OF Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) error , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fundec ::= (*) fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) If , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdef ::= (*) Ty ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [tydec ::= (*) TYPEDEF Ty ID tydec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var DOT ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fundec ::= (*) fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdef ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [tydec ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) ID , {ID }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Dec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= (*) Ty ID LPAREN TyFields RPAREN SEMICOLON fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Dec ::= (*) tydec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) STRING , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdef ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [vardec ::= (*) VAR ID ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) ARRAY OF ID , {ID }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) INT , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= (*) ID LPAREN TyFields RPAREN SEMICOLON fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Dec ::= (*) vardec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on VAR to state [25]
transition on vardec to state [24]
transition on ARRAY to state [23]
transition on Dec to state [22]
transition on FOR to state [21]
transition on fdec to state [20]
transition on LET to state [19]
transition on fdef to state [18]
transition on error to state [17]
transition on MINUS to state [16]
transition on If to state [15]
transition on TYPEDEF to state [14]
transition on Exp to state [121]
transition on fundec to state [12]
transition on BREAK to state [11]
transition on STRING to state [10]
transition on ID to state [9]
transition on LBRACE to state [8]
transition on NIL to state [7]
transition on IF to state [6]
transition on tydec to state [5]
transition on WHILE to state [4]
transition on Var to state [3]
transition on INT to state [2]
transition on Ty to state [1]

-------------------
lalr_state [121]: {
  [Exp ::= Exp (*) LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= ID LBRACE Exp RBRACE OF Exp (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on LT to state [39]
transition on TIMES to state [38]
transition on GT to state [37]
transition on LE to state [36]
transition on EQ to state [35]
transition on PLUS to state [34]
transition on NEQ to state [33]
transition on GE to state [32]
transition on DIVIDE to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [122]: {
  [Ty ::= LBRACE TyFields (*) RBRACE , {ID ASSIGN }]
}
transition on RBRACE to state [123]

-------------------
lalr_state [123]: {
  [Ty ::= LBRACE TyFields RBRACE (*) , {ID ASSIGN }]
}

-------------------
lalr_state [124]: {
  [Exp ::= Exp (*) LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= Exp (*) EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= Exp (*) DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [If ::= IF Exp (*) THEN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= Exp (*) GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= Exp (*) LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= Exp (*) TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= Exp (*) GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= Exp (*) NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [If ::= IF Exp (*) THEN Exp ELSE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
}
transition on LT to state [39]
transition on TIMES to state [38]
transition on GT to state [37]
transition on LE to state [36]
transition on EQ to state [35]
transition on PLUS to state [34]
transition on NEQ to state [33]
transition on THEN to state [125]
transition on GE to state [32]
transition on DIVIDE to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [125]: {
  [vardec ::= (*) VAR ID COLON Ty ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) LBRACE TyFields RBRACE , {ID }]
  [Exp ::= (*) LET decs IN Exp END , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Dec ::= (*) fundec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) ID LBRACE Exp RBRACE OF Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) error , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fundec ::= (*) fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) If , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdef ::= (*) Ty ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [tydec ::= (*) TYPEDEF Ty ID tydec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var DOT ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= IF Exp THEN (*) Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fundec ::= (*) fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdef ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [tydec ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) ID , {ID }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Dec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= IF Exp THEN (*) Exp ELSE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= (*) Ty ID LPAREN TyFields RPAREN SEMICOLON fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Dec ::= (*) tydec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) STRING , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdef ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [vardec ::= (*) VAR ID ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) ARRAY OF ID , {ID }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) INT , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= (*) ID LPAREN TyFields RPAREN SEMICOLON fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Dec ::= (*) vardec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on VAR to state [25]
transition on vardec to state [24]
transition on ARRAY to state [23]
transition on Dec to state [22]
transition on FOR to state [21]
transition on fdec to state [20]
transition on LET to state [19]
transition on fdef to state [18]
transition on error to state [17]
transition on MINUS to state [16]
transition on If to state [15]
transition on TYPEDEF to state [14]
transition on Exp to state [126]
transition on fundec to state [12]
transition on BREAK to state [11]
transition on STRING to state [10]
transition on ID to state [9]
transition on LBRACE to state [8]
transition on NIL to state [7]
transition on IF to state [6]
transition on tydec to state [5]
transition on WHILE to state [4]
transition on Var to state [3]
transition on INT to state [2]
transition on Ty to state [1]

-------------------
lalr_state [126]: {
  [Exp ::= Exp (*) LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= IF Exp THEN Exp (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= IF Exp THEN Exp (*) ELSE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on LT to state [39]
transition on TIMES to state [38]
transition on GT to state [37]
transition on ELSE to state [127]
transition on LE to state [36]
transition on EQ to state [35]
transition on PLUS to state [34]
transition on NEQ to state [33]
transition on GE to state [32]
transition on DIVIDE to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [127]: {
  [vardec ::= (*) VAR ID COLON Ty ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) LBRACE TyFields RBRACE , {ID }]
  [Exp ::= (*) LET decs IN Exp END , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Dec ::= (*) fundec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) ID LBRACE Exp RBRACE OF Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) error , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fundec ::= (*) fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) If , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdef ::= (*) Ty ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [tydec ::= (*) TYPEDEF Ty ID tydec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var DOT ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fundec ::= (*) fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdef ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [tydec ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) ID , {ID }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Dec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= IF Exp THEN Exp ELSE (*) Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= (*) Ty ID LPAREN TyFields RPAREN SEMICOLON fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Dec ::= (*) tydec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) STRING , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdef ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [vardec ::= (*) VAR ID ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) ARRAY OF ID , {ID }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) INT , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= (*) ID LPAREN TyFields RPAREN SEMICOLON fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Dec ::= (*) vardec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on VAR to state [25]
transition on vardec to state [24]
transition on ARRAY to state [23]
transition on Dec to state [22]
transition on FOR to state [21]
transition on fdec to state [20]
transition on LET to state [19]
transition on fdef to state [18]
transition on error to state [17]
transition on MINUS to state [16]
transition on If to state [15]
transition on TYPEDEF to state [14]
transition on Exp to state [128]
transition on fundec to state [12]
transition on BREAK to state [11]
transition on STRING to state [10]
transition on ID to state [9]
transition on LBRACE to state [8]
transition on NIL to state [7]
transition on IF to state [6]
transition on tydec to state [5]
transition on WHILE to state [4]
transition on Var to state [3]
transition on INT to state [2]
transition on Ty to state [1]

-------------------
lalr_state [128]: {
  [Exp ::= Exp (*) LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= IF Exp THEN Exp ELSE Exp (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on LT to state [39]
transition on TIMES to state [38]
transition on GT to state [37]
transition on LE to state [36]
transition on EQ to state [35]
transition on PLUS to state [34]
transition on NEQ to state [33]
transition on GE to state [32]
transition on DIVIDE to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [129]: {
  [Exp ::= Exp (*) LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= WHILE Exp (*) DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
}
transition on DO to state [130]
transition on LT to state [39]
transition on TIMES to state [38]
transition on GT to state [37]
transition on LE to state [36]
transition on EQ to state [35]
transition on PLUS to state [34]
transition on NEQ to state [33]
transition on GE to state [32]
transition on DIVIDE to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [130]: {
  [vardec ::= (*) VAR ID COLON Ty ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) LBRACE TyFields RBRACE , {ID }]
  [Exp ::= (*) LET decs IN Exp END , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Dec ::= (*) fundec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) ID LBRACE Exp RBRACE OF Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) error , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fundec ::= (*) fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) If , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdef ::= (*) Ty ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [tydec ::= (*) TYPEDEF Ty ID tydec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var DOT ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fundec ::= (*) fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdef ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [tydec ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) ID , {ID }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Dec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= (*) Ty ID LPAREN TyFields RPAREN SEMICOLON fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Dec ::= (*) tydec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) STRING , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdef ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [vardec ::= (*) VAR ID ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) ARRAY OF ID , {ID }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) INT , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= (*) ID LPAREN TyFields RPAREN SEMICOLON fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= WHILE Exp DO (*) Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Dec ::= (*) vardec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on VAR to state [25]
transition on vardec to state [24]
transition on ARRAY to state [23]
transition on Dec to state [22]
transition on FOR to state [21]
transition on fdec to state [20]
transition on LET to state [19]
transition on fdef to state [18]
transition on error to state [17]
transition on MINUS to state [16]
transition on If to state [15]
transition on TYPEDEF to state [14]
transition on Exp to state [131]
transition on fundec to state [12]
transition on BREAK to state [11]
transition on STRING to state [10]
transition on ID to state [9]
transition on LBRACE to state [8]
transition on NIL to state [7]
transition on IF to state [6]
transition on tydec to state [5]
transition on WHILE to state [4]
transition on Var to state [3]
transition on INT to state [2]
transition on Ty to state [1]

-------------------
lalr_state [131]: {
  [Exp ::= Exp (*) LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= WHILE Exp DO Exp (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on LT to state [39]
transition on TIMES to state [38]
transition on GT to state [37]
transition on LE to state [36]
transition on EQ to state [35]
transition on PLUS to state [34]
transition on NEQ to state [33]
transition on GE to state [32]
transition on DIVIDE to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [132]: {
  [vardec ::= (*) VAR ID COLON Ty ASSIGN Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Ty ::= (*) LBRACE TyFields RBRACE , {ID }]
  [Exp ::= (*) LET decs IN Exp END , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp LE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp MINUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [fdec ::= (*) NIL , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= Var LBRACK (*) Exp RBRACK , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Dec ::= (*) fundec , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
  [Exp ::= (*) ID LBRACE Exp RBRACE OF Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Var ASSIGN Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) error , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [fundec ::= (*) fdec , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) If , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp GT Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp PLUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [fdef ::= (*) Ty ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [tydec ::= (*) TYPEDEF Ty ID tydec , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= (*) Var DOT ID , {LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
  [Exp ::= (*) BREAK SEMICOLON , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp EQ Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Var , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [fundec ::= (*) fdef , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [If ::= (*) IF Exp THEN Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp GE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp TIMES Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [fdef ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [tydec ::= (*) NIL , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Ty ::= (*) ID , {ID }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp NEQ Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Dec , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [fdec ::= (*) Ty ID LPAREN TyFields RPAREN SEMICOLON fdec , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Dec ::= (*) tydec , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) STRING , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp DIVIDE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [fdef ::= (*) NIL , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [vardec ::= (*) VAR ID ASSIGN Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Ty ::= (*) ARRAY OF ID , {ID }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp LT Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) INT , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [fdec ::= (*) ID LPAREN TyFields RPAREN SEMICOLON fdec , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Dec ::= (*) vardec , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= (*) ID , {LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
  [Exp ::= (*) WHILE Exp DO Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) MINUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
}
transition on VAR to state [25]
transition on vardec to state [24]
transition on ARRAY to state [23]
transition on Dec to state [22]
transition on FOR to state [21]
transition on fdec to state [20]
transition on LET to state [19]
transition on fdef to state [18]
transition on error to state [17]
transition on MINUS to state [16]
transition on If to state [15]
transition on TYPEDEF to state [14]
transition on Exp to state [137]
transition on fundec to state [12]
transition on BREAK to state [11]
transition on STRING to state [10]
transition on ID to state [9]
transition on LBRACE to state [8]
transition on NIL to state [7]
transition on IF to state [6]
transition on tydec to state [5]
transition on WHILE to state [4]
transition on Var to state [3]
transition on INT to state [2]
transition on Ty to state [1]

-------------------
lalr_state [133]: {
  [Var ::= Var DOT (*) ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
}
transition on ID to state [136]

-------------------
lalr_state [134]: {
  [vardec ::= (*) VAR ID COLON Ty ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) LBRACE TyFields RBRACE , {ID }]
  [Exp ::= (*) LET decs IN Exp END , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Dec ::= (*) fundec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Var ASSIGN (*) Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) ID LBRACE Exp RBRACE OF Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) error , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fundec ::= (*) fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) If , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdef ::= (*) Ty ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [tydec ::= (*) TYPEDEF Ty ID tydec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var DOT ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fundec ::= (*) fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdef ::= (*) ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [tydec ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) ID , {ID }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Dec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= (*) Ty ID LPAREN TyFields RPAREN SEMICOLON fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Dec ::= (*) tydec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) STRING , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdef ::= (*) NIL , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [vardec ::= (*) VAR ID ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Ty ::= (*) ARRAY OF ID , {ID }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) INT , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= (*) ID LPAREN TyFields RPAREN SEMICOLON fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Dec ::= (*) vardec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on VAR to state [25]
transition on vardec to state [24]
transition on ARRAY to state [23]
transition on Dec to state [22]
transition on FOR to state [21]
transition on fdec to state [20]
transition on LET to state [19]
transition on fdef to state [18]
transition on error to state [17]
transition on MINUS to state [16]
transition on If to state [15]
transition on TYPEDEF to state [14]
transition on Exp to state [135]
transition on fundec to state [12]
transition on BREAK to state [11]
transition on STRING to state [10]
transition on ID to state [9]
transition on LBRACE to state [8]
transition on NIL to state [7]
transition on IF to state [6]
transition on tydec to state [5]
transition on WHILE to state [4]
transition on Var to state [3]
transition on INT to state [2]
transition on Ty to state [1]

-------------------
lalr_state [135]: {
  [Exp ::= Exp (*) LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Var ASSIGN Exp (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on LT to state [39]
transition on TIMES to state [38]
transition on GT to state [37]
transition on LE to state [36]
transition on EQ to state [35]
transition on PLUS to state [34]
transition on NEQ to state [33]
transition on GE to state [32]
transition on DIVIDE to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [136]: {
  [Var ::= Var DOT ID (*) , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
}

-------------------
lalr_state [137]: {
  [Exp ::= Exp (*) LE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) EQ Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= Var LBRACK Exp (*) RBRACK , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= Exp (*) DIVIDE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) MINUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) GE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) LT Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) TIMES Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) GT Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) NEQ Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) PLUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
}
transition on LT to state [39]
transition on TIMES to state [38]
transition on RBRACK to state [138]
transition on GT to state [37]
transition on LE to state [36]
transition on EQ to state [35]
transition on PLUS to state [34]
transition on NEQ to state [33]
transition on GE to state [32]
transition on DIVIDE to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [138]: {
  [Var ::= Var LBRACK Exp RBRACK (*) , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
}

-------------------
lalr_state [139]: {
  [fdef ::= Ty ID (*) LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= Ty ID (*) LPAREN TyFields RPAREN SEMICOLON fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on LPAREN to state [140]

-------------------
lalr_state [140]: {
  [TyFields ::= (*) ID COLON ID TyFields , {RPAREN }]
  [fdef ::= Ty ID LPAREN (*) TyFields RPAREN LBRACE Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= Ty ID LPAREN (*) TyFields RPAREN SEMICOLON fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [TyFields ::= (*) NIL , {RPAREN }]
}
transition on NIL to state [81]
transition on TyFields to state [141]
transition on ID to state [79]

-------------------
lalr_state [141]: {
  [fdef ::= Ty ID LPAREN TyFields (*) RPAREN LBRACE Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= Ty ID LPAREN TyFields (*) RPAREN SEMICOLON fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on RPAREN to state [142]

-------------------
lalr_state [142]: {
  [fdef ::= Ty ID LPAREN TyFields RPAREN (*) LBRACE Exp RBRACE fdef , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [fdec ::= Ty ID LPAREN TyFields RPAREN (*) SEMICOLON fdec , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on SEMICOLON to state [93]
transition on LBRACE to state [108]

-------------------
------- CUP v0.10g Parser Generation Summary -------
  1 error and 63 warnings
  46 terminals, 13 non terminals, and 50 productions declared, 
  producing 143 unique parse states.
  4 terminals declared but not used.
  0 non terminals declared but not used.
  0 productions never reduced.
  59 conflicts detected (3 expected).
  No code produced.
---------------------------------------------------- (v0.10g)
