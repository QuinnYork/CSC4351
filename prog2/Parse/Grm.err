Opening files...
Parsing specification from standard input...
Checking specification...
Warning: Terminal "AND" was declared but never used
Warning: Terminal "OR" was declared but never used
Warning: Terminal "TYPEDEF" was declared but never used
Warning: Terminal "LBRACE" was declared but never used
Warning: Terminal "RBRACE" was declared but never used
Warning: Non terminal "tydec" was declared but never used
Warning: Non terminal "Head" was declared but never used
Warning: Non terminal "fundec" was declared but never used
Warning: Non terminal "fundecs" was declared but never used
Warning: Non terminal "tydecs" was declared but never used
Building parse tables...
  Computing non-terminal nullability...
  Computing first sets...
  Building state machine...
  Filling in tables...
*** Shift/Reduce conflict found in state #69
  between If ::= IF Exp THEN Exp (*) 
  and     If ::= IF Exp THEN Exp (*) ELSE Exp 
  under symbol ELSE
  Resolved in favor of shifting.

  Checking for non-reduced productions...
*** Production "TyFields ::= ID COLON ID TyFields " never reduced
*** Production "TyFields ::= " never reduced
*** Production "Ty ::= TyFields " never reduced
*** Production "Ty ::= ARRAY OF ID " never reduced
*** Production "Ty ::= ID " never reduced
*** Production "Tail ::= Exp ExpList " never reduced
*** Production "ExpList ::= " never reduced
*** Production "ExpList ::= COMMA Tail " never reduced
*** Production "ExpListH ::= ID LPAREN RPAREN " never reduced
*** Production "ExpListH ::= ID LPAREN Exp ExpList RPAREN " never reduced
Writing parser...
===== Terminals =====
DIVIDE GE UMINUS LPAREN INT 
ARRAY FOR MINUS RPAREN SEMICOLON 
AND LT NIL IN OR 
COMMA TYPEDEF PLUS ASSIGN IF 
DOT ID LE OF EOF 
error NEQ BREAK EQ LBRACK 
TIMES COLON LBRACE ELSE RBRACK 
TO WHILE LET THEN RBRACE 
END STRING GT VAR DO 


===== Non terminals =====
Ty decs ExpListH Var tydec 
NameTy $START ExpSeq Head Tail 
fundec Exp If fundecs AssignExp 
TyFields Rest Dec tydecs vardec 
ExpList 

===== Productions =====
vardec ::= VAR ID COLON NameTy ASSIGN Exp 
vardec ::= VAR ID ASSIGN Exp 
Dec ::= vardec 
decs ::= 
decs ::= Dec decs 
TyFields ::= ID COLON ID TyFields 
TyFields ::= 
Ty ::= TyFields 
Ty ::= ARRAY OF ID 
Ty ::= ID 
Var ::= Var DOT ID 
Var ::= ID LBRACK Exp RBRACK 
Var ::= ID 
If ::= IF Exp THEN Exp ELSE Exp 
If ::= IF Exp THEN Exp 
Rest ::= Exp 
Rest ::= Exp SEMICOLON Rest 
ExpSeq ::= 
ExpSeq ::= Rest 
Tail ::= Exp ExpList 
ExpList ::= 
ExpList ::= COMMA Tail 
ExpListH ::= ID LPAREN RPAREN 
ExpListH ::= ID LPAREN Exp ExpList RPAREN 
Exp ::= LPAREN ExpSeq RPAREN 
Exp ::= If 
Exp ::= FOR vardec TO Exp DO Exp 
Exp ::= FOR AssignExp TO Exp DO Exp 
Exp ::= LET decs IN ExpSeq END 
Exp ::= BREAK SEMICOLON 
Exp ::= ID LBRACK Exp RBRACK OF Exp 
Exp ::= WHILE Exp DO Exp 
Exp ::= NIL 
Exp ::= STRING 
Exp ::= Exp GE Exp 
Exp ::= Exp GT Exp 
Exp ::= Exp LE Exp 
Exp ::= Exp LT Exp 
Exp ::= Exp NEQ Exp 
Exp ::= Exp EQ Exp 
Exp ::= Var ASSIGN Exp 
Exp ::= MINUS Exp 
Exp ::= Exp DIVIDE Exp 
Exp ::= Exp TIMES Exp 
Exp ::= Exp PLUS Exp 
Exp ::= Exp MINUS Exp 
Exp ::= INT 
Exp ::= Var 
Exp ::= error 
$START ::= Exp EOF 

===== Viable Prefix Recognizer =====
START lalr_state [0]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp EQ Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp GE Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [If ::= (*) IF Exp THEN Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) INT , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) MINUS Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp LE Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= (*) ID LBRACK Exp RBRACK , {EOF DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
  [Exp ::= (*) error , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp TIMES Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp NEQ Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) STRING , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) LET decs IN ExpSeq END , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp MINUS Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp GT Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) If , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= (*) Var DOT ID , {EOF DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
  [Exp ::= (*) Var , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp LT Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) NIL , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) FOR AssignExp TO Exp DO Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= (*) ID , {EOF DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
  [$START ::= (*) Exp EOF , {EOF }]
}
transition on BREAK to state [15]
transition on Var to state [14]
transition on LPAREN to state [13]
transition on LET to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [7]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [1]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [If ::= (*) IF Exp THEN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) INT , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= MINUS (*) Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Var ::= (*) ID LBRACK Exp RBRACK , {EOF SEMICOLON RPAREN RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) error , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) STRING , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) LET decs IN ExpSeq END , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) If , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Var ::= (*) Var DOT ID , {EOF SEMICOLON RPAREN RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Var , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) NIL , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) FOR AssignExp TO Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Var ::= (*) ID , {EOF SEMICOLON RPAREN RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR }]
}
transition on BREAK to state [15]
transition on Var to state [14]
transition on LPAREN to state [13]
transition on LET to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [86]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [2]: {
  [Exp ::= INT (*) , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
}

-------------------
lalr_state [3]: {
  [Exp ::= (*) Exp PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) BREAK SEMICOLON , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [If ::= (*) IF Exp THEN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) INT , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= WHILE (*) Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) WHILE Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Var ::= (*) ID LBRACK Exp RBRACK , {DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN DO }]
  [Exp ::= (*) error , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) STRING , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) LET decs IN ExpSeq END , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Var ASSIGN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) If , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Var ::= (*) Var DOT ID , {DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN DO }]
  [Exp ::= (*) Var , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) NIL , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) FOR AssignExp TO Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Var ::= (*) ID , {DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN DO }]
}
transition on BREAK to state [15]
transition on Var to state [14]
transition on LPAREN to state [13]
transition on LET to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [83]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [4]: {
  [Exp ::= If (*) , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
}

-------------------
lalr_state [5]: {
  [vardec ::= (*) VAR ID COLON NameTy ASSIGN Exp , {TO }]
  [vardec ::= (*) VAR ID ASSIGN Exp , {TO }]
  [Exp ::= FOR (*) vardec TO Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= FOR (*) AssignExp TO Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
}
transition on AssignExp to state [74]
transition on vardec to state [73]
transition on VAR to state [47]

-------------------
lalr_state [6]: {
  [Exp ::= NIL (*) , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
}

-------------------
lalr_state [7]: {
  [Exp ::= Exp (*) GT Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) NEQ Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) PLUS Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) LE Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) EQ Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) MINUS Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) GE Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) LT Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) TIMES Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [$START ::= Exp (*) EOF , {EOF }]
}
transition on LT to state [29]
transition on TIMES to state [28]
transition on GT to state [27]
transition on LE to state [26]
transition on EQ to state [25]
transition on PLUS to state [24]
transition on EOF to state [72]
transition on NEQ to state [23]
transition on GE to state [22]
transition on DIVIDE to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [8]: {
  [Exp ::= STRING (*) , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
}

-------------------
lalr_state [9]: {
  [Exp ::= (*) Exp PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) Exp EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) Exp GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) BREAK SEMICOLON , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [If ::= IF (*) Exp THEN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [If ::= (*) IF Exp THEN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) INT , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) Exp LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) WHILE Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Var ::= (*) ID LBRACK Exp RBRACK , {DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN }]
  [Exp ::= (*) error , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) Exp TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) Exp NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) STRING , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) LET decs IN ExpSeq END , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [If ::= IF (*) Exp THEN Exp ELSE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) Exp MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) Var ASSIGN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) Exp GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) If , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Var ::= (*) Var DOT ID , {DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN }]
  [Exp ::= (*) Var , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) Exp DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) Exp LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) NIL , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) FOR AssignExp TO Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Var ::= (*) ID , {DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN }]
}
transition on BREAK to state [15]
transition on Var to state [14]
transition on LPAREN to state [13]
transition on LET to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [67]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [10]: {
  [Var ::= ID (*) LBRACK Exp RBRACK , {EOF SEMICOLON RPAREN RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR }]
  [Var ::= ID (*) , {EOF SEMICOLON RPAREN RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR }]
  [Exp ::= ID (*) LBRACK Exp RBRACK OF Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
}
transition on LBRACK to state [62]

-------------------
lalr_state [11]: {
  [Exp ::= error (*) , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
}

-------------------
lalr_state [12]: {
  [vardec ::= (*) VAR ID COLON NameTy ASSIGN Exp , {IN VAR }]
  [decs ::= (*) , {IN }]
  [Exp ::= LET (*) decs IN ExpSeq END , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [vardec ::= (*) VAR ID ASSIGN Exp , {IN VAR }]
  [decs ::= (*) Dec decs , {IN }]
  [Dec ::= (*) vardec , {IN VAR }]
}
transition on Dec to state [50]
transition on decs to state [49]
transition on vardec to state [48]
transition on VAR to state [47]

-------------------
lalr_state [13]: {
  [Exp ::= (*) Exp PLUS Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp EQ Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp GE Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) BREAK SEMICOLON , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= LPAREN (*) ExpSeq RPAREN , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [If ::= (*) IF Exp THEN Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) INT , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) MINUS Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp LE Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) WHILE Exp DO Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Rest ::= (*) Exp SEMICOLON Rest , {RPAREN }]
  [Var ::= (*) ID LBRACK Exp RBRACK , {SEMICOLON RPAREN DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
  [Exp ::= (*) error , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp TIMES Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp NEQ Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) STRING , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) LET decs IN ExpSeq END , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [ExpSeq ::= (*) Rest , {RPAREN }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp MINUS Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Var ASSIGN Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp GT Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) If , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Rest ::= (*) Exp , {RPAREN }]
  [Var ::= (*) Var DOT ID , {SEMICOLON RPAREN DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
  [Exp ::= (*) Var , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp DIVIDE Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp LT Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) NIL , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) FOR AssignExp TO Exp DO Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [ExpSeq ::= (*) , {RPAREN }]
  [Var ::= (*) ID , {SEMICOLON RPAREN DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
}
transition on BREAK to state [15]
transition on Var to state [14]
transition on LPAREN to state [13]
transition on LET to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on Rest to state [43]
transition on STRING to state [8]
transition on Exp to state [42]
transition on ExpSeq to state [41]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [14]: {
  [Exp ::= Var (*) , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Var (*) ASSIGN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Var ::= Var (*) DOT ID , {EOF SEMICOLON RPAREN RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR }]
}
transition on ASSIGN to state [18]
transition on DOT to state [17]

-------------------
lalr_state [15]: {
  [Exp ::= BREAK (*) SEMICOLON , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
}
transition on SEMICOLON to state [16]

-------------------
lalr_state [16]: {
  [Exp ::= BREAK SEMICOLON (*) , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
}

-------------------
lalr_state [17]: {
  [Var ::= Var DOT (*) ID , {EOF SEMICOLON RPAREN RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR }]
}
transition on ID to state [40]

-------------------
lalr_state [18]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [If ::= (*) IF Exp THEN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) INT , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Var ::= (*) ID LBRACK Exp RBRACK , {EOF SEMICOLON RPAREN RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) error , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) STRING , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) LET decs IN ExpSeq END , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Var ASSIGN (*) Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) If , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Var ::= (*) Var DOT ID , {EOF SEMICOLON RPAREN RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Var , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) NIL , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) FOR AssignExp TO Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Var ::= (*) ID , {EOF SEMICOLON RPAREN RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR }]
}
transition on BREAK to state [15]
transition on Var to state [14]
transition on LPAREN to state [13]
transition on LET to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [19]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [19]: {
  [Exp ::= Exp (*) GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Var ASSIGN Exp (*) , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
}
transition on LT to state [29]
transition on TIMES to state [28]
transition on GT to state [27]
transition on LE to state [26]
transition on EQ to state [25]
transition on PLUS to state [24]
transition on NEQ to state [23]
transition on GE to state [22]
transition on DIVIDE to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [20]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [If ::= (*) IF Exp THEN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) INT , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Var ::= (*) ID LBRACK Exp RBRACK , {EOF SEMICOLON RPAREN RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) error , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) STRING , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) LET decs IN ExpSeq END , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp MINUS (*) Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) If , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Var ::= (*) Var DOT ID , {EOF SEMICOLON RPAREN RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Var , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) NIL , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) FOR AssignExp TO Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Var ::= (*) ID , {EOF SEMICOLON RPAREN RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR }]
}
transition on BREAK to state [15]
transition on Var to state [14]
transition on LPAREN to state [13]
transition on LET to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [39]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [21]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [If ::= (*) IF Exp THEN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) INT , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Var ::= (*) ID LBRACK Exp RBRACK , {EOF SEMICOLON RPAREN RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) error , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) STRING , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) LET decs IN ExpSeq END , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) If , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Var ::= (*) Var DOT ID , {EOF SEMICOLON RPAREN RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp DIVIDE (*) Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Var , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) NIL , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) FOR AssignExp TO Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Var ::= (*) ID , {EOF SEMICOLON RPAREN RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR }]
}
transition on BREAK to state [15]
transition on Var to state [14]
transition on LPAREN to state [13]
transition on LET to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [38]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [22]: {
  [Exp ::= Exp GE (*) Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [If ::= (*) IF Exp THEN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) INT , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Var ::= (*) ID LBRACK Exp RBRACK , {EOF SEMICOLON RPAREN RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) error , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) STRING , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) LET decs IN ExpSeq END , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) If , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Var ::= (*) Var DOT ID , {EOF SEMICOLON RPAREN RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Var , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) NIL , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) FOR AssignExp TO Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Var ::= (*) ID , {EOF SEMICOLON RPAREN RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR }]
}
transition on BREAK to state [15]
transition on Var to state [14]
transition on LPAREN to state [13]
transition on LET to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [37]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [23]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [If ::= (*) IF Exp THEN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) INT , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Var ::= (*) ID LBRACK Exp RBRACK , {EOF SEMICOLON RPAREN RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) error , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp NEQ (*) Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) STRING , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) LET decs IN ExpSeq END , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) If , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Var ::= (*) Var DOT ID , {EOF SEMICOLON RPAREN RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Var , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) NIL , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) FOR AssignExp TO Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Var ::= (*) ID , {EOF SEMICOLON RPAREN RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR }]
}
transition on BREAK to state [15]
transition on Var to state [14]
transition on LPAREN to state [13]
transition on LET to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [36]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [24]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [If ::= (*) IF Exp THEN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) INT , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Var ::= (*) ID LBRACK Exp RBRACK , {EOF SEMICOLON RPAREN RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) error , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) STRING , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) LET decs IN ExpSeq END , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) If , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Var ::= (*) Var DOT ID , {EOF SEMICOLON RPAREN RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Var , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) NIL , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) FOR AssignExp TO Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Var ::= (*) ID , {EOF SEMICOLON RPAREN RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp PLUS (*) Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
}
transition on BREAK to state [15]
transition on Var to state [14]
transition on LPAREN to state [13]
transition on LET to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [35]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [25]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [If ::= (*) IF Exp THEN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) INT , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Var ::= (*) ID LBRACK Exp RBRACK , {EOF SEMICOLON RPAREN RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) error , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) STRING , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) LET decs IN ExpSeq END , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) If , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Var ::= (*) Var DOT ID , {EOF SEMICOLON RPAREN RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Var , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) NIL , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) FOR AssignExp TO Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Var ::= (*) ID , {EOF SEMICOLON RPAREN RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp EQ (*) Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
}
transition on BREAK to state [15]
transition on Var to state [14]
transition on LPAREN to state [13]
transition on LET to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [34]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [26]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [If ::= (*) IF Exp THEN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) INT , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp LE (*) Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Var ::= (*) ID LBRACK Exp RBRACK , {EOF SEMICOLON RPAREN RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) error , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) STRING , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) LET decs IN ExpSeq END , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) If , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Var ::= (*) Var DOT ID , {EOF SEMICOLON RPAREN RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Var , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) NIL , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) FOR AssignExp TO Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Var ::= (*) ID , {EOF SEMICOLON RPAREN RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR }]
}
transition on BREAK to state [15]
transition on Var to state [14]
transition on LPAREN to state [13]
transition on LET to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [33]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [27]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [If ::= (*) IF Exp THEN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) INT , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Var ::= (*) ID LBRACK Exp RBRACK , {EOF SEMICOLON RPAREN RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) error , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) STRING , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) LET decs IN ExpSeq END , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp GT (*) Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) If , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Var ::= (*) Var DOT ID , {EOF SEMICOLON RPAREN RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Var , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) NIL , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) FOR AssignExp TO Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Var ::= (*) ID , {EOF SEMICOLON RPAREN RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR }]
}
transition on BREAK to state [15]
transition on Var to state [14]
transition on LPAREN to state [13]
transition on LET to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [32]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [28]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [If ::= (*) IF Exp THEN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) INT , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Var ::= (*) ID LBRACK Exp RBRACK , {EOF SEMICOLON RPAREN RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp TIMES (*) Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) error , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) STRING , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) LET decs IN ExpSeq END , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) If , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Var ::= (*) Var DOT ID , {EOF SEMICOLON RPAREN RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Var , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) NIL , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) FOR AssignExp TO Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Var ::= (*) ID , {EOF SEMICOLON RPAREN RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR }]
}
transition on BREAK to state [15]
transition on Var to state [14]
transition on LPAREN to state [13]
transition on LET to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [31]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [29]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [If ::= (*) IF Exp THEN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) INT , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Var ::= (*) ID LBRACK Exp RBRACK , {EOF SEMICOLON RPAREN RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) error , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) STRING , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) LET decs IN ExpSeq END , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) If , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Var ::= (*) Var DOT ID , {EOF SEMICOLON RPAREN RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp LT (*) Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Var , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) NIL , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) FOR AssignExp TO Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Var ::= (*) ID , {EOF SEMICOLON RPAREN RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR }]
}
transition on BREAK to state [15]
transition on Var to state [14]
transition on LPAREN to state [13]
transition on LET to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [30]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [30]: {
  [Exp ::= Exp (*) GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp LT Exp (*) , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
}
transition on LT to state [29]
transition on TIMES to state [28]
transition on GT to state [27]
transition on LE to state [26]
transition on EQ to state [25]
transition on PLUS to state [24]
transition on NEQ to state [23]
transition on GE to state [22]
transition on DIVIDE to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [31]: {
  [Exp ::= Exp (*) GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp TIMES Exp (*) , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
}
transition on LT to state [29]
transition on TIMES to state [28]
transition on GT to state [27]
transition on LE to state [26]
transition on EQ to state [25]
transition on PLUS to state [24]
transition on NEQ to state [23]
transition on GE to state [22]
transition on DIVIDE to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [32]: {
  [Exp ::= Exp (*) GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp GT Exp (*) , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
}
transition on LT to state [29]
transition on TIMES to state [28]
transition on GT to state [27]
transition on LE to state [26]
transition on EQ to state [25]
transition on PLUS to state [24]
transition on NEQ to state [23]
transition on GE to state [22]
transition on DIVIDE to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [33]: {
  [Exp ::= Exp (*) GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp LE Exp (*) , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
}
transition on LT to state [29]
transition on TIMES to state [28]
transition on GT to state [27]
transition on LE to state [26]
transition on EQ to state [25]
transition on PLUS to state [24]
transition on NEQ to state [23]
transition on GE to state [22]
transition on DIVIDE to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [34]: {
  [Exp ::= Exp (*) GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp EQ Exp (*) , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
}
transition on LT to state [29]
transition on TIMES to state [28]
transition on GT to state [27]
transition on LE to state [26]
transition on EQ to state [25]
transition on PLUS to state [24]
transition on NEQ to state [23]
transition on GE to state [22]
transition on DIVIDE to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [35]: {
  [Exp ::= Exp (*) GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp PLUS Exp (*) , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
}
transition on LT to state [29]
transition on TIMES to state [28]
transition on GT to state [27]
transition on LE to state [26]
transition on EQ to state [25]
transition on PLUS to state [24]
transition on NEQ to state [23]
transition on GE to state [22]
transition on DIVIDE to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [36]: {
  [Exp ::= Exp NEQ Exp (*) , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
}
transition on LT to state [29]
transition on TIMES to state [28]
transition on GT to state [27]
transition on LE to state [26]
transition on EQ to state [25]
transition on PLUS to state [24]
transition on NEQ to state [23]
transition on GE to state [22]
transition on DIVIDE to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [37]: {
  [Exp ::= Exp (*) GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp GE Exp (*) , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
}
transition on LT to state [29]
transition on TIMES to state [28]
transition on GT to state [27]
transition on LE to state [26]
transition on EQ to state [25]
transition on PLUS to state [24]
transition on NEQ to state [23]
transition on GE to state [22]
transition on DIVIDE to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [38]: {
  [Exp ::= Exp (*) GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp DIVIDE Exp (*) , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
}
transition on LT to state [29]
transition on TIMES to state [28]
transition on GT to state [27]
transition on LE to state [26]
transition on EQ to state [25]
transition on PLUS to state [24]
transition on NEQ to state [23]
transition on GE to state [22]
transition on DIVIDE to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [39]: {
  [Exp ::= Exp (*) GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp MINUS Exp (*) , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
}
transition on LT to state [29]
transition on TIMES to state [28]
transition on GT to state [27]
transition on LE to state [26]
transition on EQ to state [25]
transition on PLUS to state [24]
transition on NEQ to state [23]
transition on GE to state [22]
transition on DIVIDE to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [40]: {
  [Var ::= Var DOT ID (*) , {EOF SEMICOLON RPAREN RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR }]
}

-------------------
lalr_state [41]: {
  [Exp ::= LPAREN ExpSeq (*) RPAREN , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
}
transition on RPAREN to state [46]

-------------------
lalr_state [42]: {
  [Exp ::= Exp (*) GT Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Rest ::= Exp (*) , {RPAREN END }]
  [Exp ::= Exp (*) NEQ Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= Exp (*) PLUS Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= Exp (*) LE Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Rest ::= Exp (*) SEMICOLON Rest , {RPAREN END }]
  [Exp ::= Exp (*) EQ Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= Exp (*) DIVIDE Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= Exp (*) MINUS Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= Exp (*) GE Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= Exp (*) LT Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= Exp (*) TIMES Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
}
transition on LT to state [29]
transition on TIMES to state [28]
transition on SEMICOLON to state [44]
transition on GT to state [27]
transition on LE to state [26]
transition on EQ to state [25]
transition on PLUS to state [24]
transition on NEQ to state [23]
transition on GE to state [22]
transition on DIVIDE to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [43]: {
  [ExpSeq ::= Rest (*) , {RPAREN END }]
}

-------------------
lalr_state [44]: {
  [Exp ::= (*) Exp PLUS Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) Exp EQ Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) Exp GE Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) BREAK SEMICOLON , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [If ::= (*) IF Exp THEN Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) INT , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) MINUS Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) Exp LE Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) WHILE Exp DO Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Rest ::= Exp SEMICOLON (*) Rest , {RPAREN END }]
  [Rest ::= (*) Exp SEMICOLON Rest , {RPAREN END }]
  [Var ::= (*) ID LBRACK Exp RBRACK , {SEMICOLON RPAREN DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN END }]
  [Exp ::= (*) error , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) Exp TIMES Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) Exp NEQ Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) STRING , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) LET decs IN ExpSeq END , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) Exp MINUS Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) Var ASSIGN Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) Exp GT Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) If , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Rest ::= (*) Exp , {RPAREN END }]
  [Var ::= (*) Var DOT ID , {SEMICOLON RPAREN DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN END }]
  [Exp ::= (*) Var , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) Exp DIVIDE Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) Exp LT Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) NIL , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) FOR AssignExp TO Exp DO Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Var ::= (*) ID , {SEMICOLON RPAREN DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN END }]
}
transition on BREAK to state [15]
transition on Var to state [14]
transition on LPAREN to state [13]
transition on LET to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on Rest to state [45]
transition on STRING to state [8]
transition on Exp to state [42]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [45]: {
  [Rest ::= Exp SEMICOLON Rest (*) , {RPAREN END }]
}

-------------------
lalr_state [46]: {
  [Exp ::= LPAREN ExpSeq RPAREN (*) , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
}

-------------------
lalr_state [47]: {
  [vardec ::= VAR (*) ID COLON NameTy ASSIGN Exp , {TO IN VAR }]
  [vardec ::= VAR (*) ID ASSIGN Exp , {TO IN VAR }]
}
transition on ID to state [55]

-------------------
lalr_state [48]: {
  [Dec ::= vardec (*) , {IN VAR }]
}

-------------------
lalr_state [49]: {
  [Exp ::= LET decs (*) IN ExpSeq END , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
}
transition on IN to state [52]

-------------------
lalr_state [50]: {
  [vardec ::= (*) VAR ID COLON NameTy ASSIGN Exp , {IN VAR }]
  [decs ::= (*) , {IN }]
  [vardec ::= (*) VAR ID ASSIGN Exp , {IN VAR }]
  [decs ::= Dec (*) decs , {IN }]
  [decs ::= (*) Dec decs , {IN }]
  [Dec ::= (*) vardec , {IN VAR }]
}
transition on Dec to state [50]
transition on decs to state [51]
transition on vardec to state [48]
transition on VAR to state [47]

-------------------
lalr_state [51]: {
  [decs ::= Dec decs (*) , {IN }]
}

-------------------
lalr_state [52]: {
  [Exp ::= (*) Exp PLUS Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) Exp EQ Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) Exp GE Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) BREAK SEMICOLON , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [If ::= (*) IF Exp THEN Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) INT , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) MINUS Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) Exp LE Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) WHILE Exp DO Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Rest ::= (*) Exp SEMICOLON Rest , {END }]
  [Var ::= (*) ID LBRACK Exp RBRACK , {SEMICOLON DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN END }]
  [Exp ::= (*) error , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) Exp TIMES Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= LET decs IN (*) ExpSeq END , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp NEQ Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) STRING , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) LET decs IN ExpSeq END , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [ExpSeq ::= (*) Rest , {END }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) Exp MINUS Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) Var ASSIGN Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) Exp GT Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) If , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Rest ::= (*) Exp , {END }]
  [Var ::= (*) Var DOT ID , {SEMICOLON DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN END }]
  [Exp ::= (*) Var , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) Exp DIVIDE Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) Exp LT Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) NIL , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) FOR AssignExp TO Exp DO Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [ExpSeq ::= (*) , {END }]
  [Var ::= (*) ID , {SEMICOLON DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN END }]
}
transition on BREAK to state [15]
transition on Var to state [14]
transition on LPAREN to state [13]
transition on LET to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on Rest to state [43]
transition on STRING to state [8]
transition on Exp to state [42]
transition on ExpSeq to state [53]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [53]: {
  [Exp ::= LET decs IN ExpSeq (*) END , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
}
transition on END to state [54]

-------------------
lalr_state [54]: {
  [Exp ::= LET decs IN ExpSeq END (*) , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
}

-------------------
lalr_state [55]: {
  [vardec ::= VAR ID (*) ASSIGN Exp , {TO IN VAR }]
  [vardec ::= VAR ID (*) COLON NameTy ASSIGN Exp , {TO IN VAR }]
}
transition on ASSIGN to state [57]
transition on COLON to state [56]

-------------------
lalr_state [56]: {
  [vardec ::= VAR ID COLON (*) NameTy ASSIGN Exp , {TO IN VAR }]
}
transition on NameTy to state [59]

-------------------
lalr_state [57]: {
  [Exp ::= (*) Exp PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Exp ::= (*) Exp EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Exp ::= (*) Exp GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Exp ::= (*) BREAK SEMICOLON , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [If ::= (*) IF Exp THEN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Exp ::= (*) INT , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Exp ::= (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Exp ::= (*) Exp LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Exp ::= (*) WHILE Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [vardec ::= VAR ID ASSIGN (*) Exp , {TO IN VAR }]
  [Var ::= (*) ID LBRACK Exp RBRACK , {DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN TO IN VAR }]
  [Exp ::= (*) error , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Exp ::= (*) Exp TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Exp ::= (*) Exp NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Exp ::= (*) STRING , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Exp ::= (*) LET decs IN ExpSeq END , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Exp ::= (*) Exp MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Exp ::= (*) Var ASSIGN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Exp ::= (*) Exp GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Exp ::= (*) If , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Var ::= (*) Var DOT ID , {DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN TO IN VAR }]
  [Exp ::= (*) Var , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Exp ::= (*) Exp DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Exp ::= (*) Exp LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Exp ::= (*) NIL , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Exp ::= (*) FOR AssignExp TO Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Var ::= (*) ID , {DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN TO IN VAR }]
}
transition on BREAK to state [15]
transition on Var to state [14]
transition on LPAREN to state [13]
transition on LET to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [58]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [58]: {
  [Exp ::= Exp (*) GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Exp ::= Exp (*) NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [vardec ::= VAR ID ASSIGN Exp (*) , {TO IN VAR }]
  [Exp ::= Exp (*) PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Exp ::= Exp (*) LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Exp ::= Exp (*) EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Exp ::= Exp (*) DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Exp ::= Exp (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Exp ::= Exp (*) GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Exp ::= Exp (*) LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Exp ::= Exp (*) TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
}
transition on LT to state [29]
transition on TIMES to state [28]
transition on GT to state [27]
transition on LE to state [26]
transition on EQ to state [25]
transition on PLUS to state [24]
transition on NEQ to state [23]
transition on GE to state [22]
transition on DIVIDE to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [59]: {
  [vardec ::= VAR ID COLON NameTy (*) ASSIGN Exp , {TO IN VAR }]
}
transition on ASSIGN to state [60]

-------------------
lalr_state [60]: {
  [Exp ::= (*) Exp PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Exp ::= (*) Exp EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Exp ::= (*) Exp GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Exp ::= (*) BREAK SEMICOLON , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [If ::= (*) IF Exp THEN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Exp ::= (*) INT , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Exp ::= (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Exp ::= (*) Exp LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Exp ::= (*) WHILE Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Var ::= (*) ID LBRACK Exp RBRACK , {DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN TO IN VAR }]
  [Exp ::= (*) error , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Exp ::= (*) Exp TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Exp ::= (*) Exp NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Exp ::= (*) STRING , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Exp ::= (*) LET decs IN ExpSeq END , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Exp ::= (*) Exp MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Exp ::= (*) Var ASSIGN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Exp ::= (*) Exp GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [vardec ::= VAR ID COLON NameTy ASSIGN (*) Exp , {TO IN VAR }]
  [Exp ::= (*) If , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Var ::= (*) Var DOT ID , {DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN TO IN VAR }]
  [Exp ::= (*) Var , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Exp ::= (*) Exp DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Exp ::= (*) Exp LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Exp ::= (*) NIL , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Exp ::= (*) FOR AssignExp TO Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Var ::= (*) ID , {DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN TO IN VAR }]
}
transition on BREAK to state [15]
transition on Var to state [14]
transition on LPAREN to state [13]
transition on LET to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [61]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [61]: {
  [Exp ::= Exp (*) GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Exp ::= Exp (*) NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Exp ::= Exp (*) PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Exp ::= Exp (*) LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Exp ::= Exp (*) EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Exp ::= Exp (*) DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Exp ::= Exp (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [vardec ::= VAR ID COLON NameTy ASSIGN Exp (*) , {TO IN VAR }]
  [Exp ::= Exp (*) GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Exp ::= Exp (*) LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
  [Exp ::= Exp (*) TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO IN VAR }]
}
transition on LT to state [29]
transition on TIMES to state [28]
transition on GT to state [27]
transition on LE to state [26]
transition on EQ to state [25]
transition on PLUS to state [24]
transition on NEQ to state [23]
transition on GE to state [22]
transition on DIVIDE to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [62]: {
  [Exp ::= (*) Exp PLUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp EQ Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp GE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) BREAK SEMICOLON , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [If ::= (*) IF Exp THEN Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) INT , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) MINUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp LE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) WHILE Exp DO Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= ID LBRACK (*) Exp RBRACK , {EOF SEMICOLON RPAREN RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR }]
  [Var ::= (*) ID LBRACK Exp RBRACK , {RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
  [Exp ::= (*) error , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp TIMES Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp NEQ Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) STRING , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) LET decs IN ExpSeq END , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp MINUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Var ASSIGN Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= ID LBRACK (*) Exp RBRACK OF Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp GT Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) If , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= (*) Var DOT ID , {RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
  [Exp ::= (*) Var , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp DIVIDE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp LT Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) NIL , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) FOR AssignExp TO Exp DO Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= (*) ID , {RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
}
transition on BREAK to state [15]
transition on Var to state [14]
transition on LPAREN to state [13]
transition on LET to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [63]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [63]: {
  [Exp ::= Exp (*) GT Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) NEQ Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) PLUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= ID LBRACK Exp (*) RBRACK OF Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) LE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) EQ Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) DIVIDE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) MINUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= ID LBRACK Exp (*) RBRACK , {EOF SEMICOLON RPAREN RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) GE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) LT Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) TIMES Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
}
transition on LT to state [29]
transition on TIMES to state [28]
transition on RBRACK to state [64]
transition on GT to state [27]
transition on LE to state [26]
transition on EQ to state [25]
transition on PLUS to state [24]
transition on NEQ to state [23]
transition on GE to state [22]
transition on DIVIDE to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [64]: {
  [Exp ::= ID LBRACK Exp RBRACK (*) OF Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Var ::= ID LBRACK Exp RBRACK (*) , {EOF SEMICOLON RPAREN RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR }]
}
transition on OF to state [65]

-------------------
lalr_state [65]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [If ::= (*) IF Exp THEN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) INT , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Var ::= (*) ID LBRACK Exp RBRACK , {EOF SEMICOLON RPAREN RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) error , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) STRING , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) LET decs IN ExpSeq END , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= ID LBRACK Exp RBRACK OF (*) Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) If , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Var ::= (*) Var DOT ID , {EOF SEMICOLON RPAREN RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Var , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) NIL , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) FOR AssignExp TO Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Var ::= (*) ID , {EOF SEMICOLON RPAREN RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR }]
}
transition on BREAK to state [15]
transition on Var to state [14]
transition on LPAREN to state [13]
transition on LET to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [66]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [66]: {
  [Exp ::= Exp (*) GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= ID LBRACK Exp RBRACK OF Exp (*) , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
}
transition on LT to state [29]
transition on TIMES to state [28]
transition on GT to state [27]
transition on LE to state [26]
transition on EQ to state [25]
transition on PLUS to state [24]
transition on NEQ to state [23]
transition on GE to state [22]
transition on DIVIDE to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [67]: {
  [Exp ::= Exp (*) GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= Exp (*) NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= Exp (*) PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [If ::= IF Exp (*) THEN Exp ELSE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= Exp (*) EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= Exp (*) DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= Exp (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= Exp (*) GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [If ::= IF Exp (*) THEN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= Exp (*) TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
}
transition on LT to state [29]
transition on TIMES to state [28]
transition on GT to state [27]
transition on LE to state [26]
transition on EQ to state [25]
transition on PLUS to state [24]
transition on NEQ to state [23]
transition on THEN to state [68]
transition on GE to state [22]
transition on DIVIDE to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [68]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [If ::= IF Exp THEN (*) Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [If ::= (*) IF Exp THEN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) INT , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Var ::= (*) ID LBRACK Exp RBRACK , {EOF SEMICOLON RPAREN RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) error , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) STRING , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) LET decs IN ExpSeq END , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [If ::= IF Exp THEN (*) Exp ELSE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) If , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Var ::= (*) Var DOT ID , {EOF SEMICOLON RPAREN RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Var , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) NIL , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) FOR AssignExp TO Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Var ::= (*) ID , {EOF SEMICOLON RPAREN RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR }]
}
transition on BREAK to state [15]
transition on Var to state [14]
transition on LPAREN to state [13]
transition on LET to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [69]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [69]: {
  [Exp ::= Exp (*) GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [If ::= IF Exp THEN Exp (*) ELSE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [If ::= IF Exp THEN Exp (*) , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
}
transition on LT to state [29]
transition on TIMES to state [28]
transition on GT to state [27]
transition on ELSE to state [70]
transition on LE to state [26]
transition on EQ to state [25]
transition on PLUS to state [24]
transition on NEQ to state [23]
transition on GE to state [22]
transition on DIVIDE to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [70]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [If ::= (*) IF Exp THEN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) INT , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Var ::= (*) ID LBRACK Exp RBRACK , {EOF SEMICOLON RPAREN RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) error , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [If ::= IF Exp THEN Exp ELSE (*) Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) STRING , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) LET decs IN ExpSeq END , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) If , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Var ::= (*) Var DOT ID , {EOF SEMICOLON RPAREN RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Var , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) NIL , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) FOR AssignExp TO Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Var ::= (*) ID , {EOF SEMICOLON RPAREN RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR }]
}
transition on BREAK to state [15]
transition on Var to state [14]
transition on LPAREN to state [13]
transition on LET to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [71]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [71]: {
  [Exp ::= Exp (*) GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [If ::= IF Exp THEN Exp ELSE Exp (*) , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
}
transition on LT to state [29]
transition on TIMES to state [28]
transition on GT to state [27]
transition on LE to state [26]
transition on EQ to state [25]
transition on PLUS to state [24]
transition on NEQ to state [23]
transition on GE to state [22]
transition on DIVIDE to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [72]: {
  [$START ::= Exp EOF (*) , {EOF }]
}

-------------------
lalr_state [73]: {
  [Exp ::= FOR vardec (*) TO Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
}
transition on TO to state [79]

-------------------
lalr_state [74]: {
  [Exp ::= FOR AssignExp (*) TO Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
}
transition on TO to state [75]

-------------------
lalr_state [75]: {
  [Exp ::= (*) Exp PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) BREAK SEMICOLON , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [If ::= (*) IF Exp THEN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) INT , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) WHILE Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Var ::= (*) ID LBRACK Exp RBRACK , {DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN DO }]
  [Exp ::= (*) error , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) STRING , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) LET decs IN ExpSeq END , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Var ASSIGN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) If , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Var ::= (*) Var DOT ID , {DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN DO }]
  [Exp ::= (*) Var , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= FOR AssignExp TO (*) Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) NIL , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) FOR AssignExp TO Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Var ::= (*) ID , {DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN DO }]
}
transition on BREAK to state [15]
transition on Var to state [14]
transition on LPAREN to state [13]
transition on LET to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [76]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [76]: {
  [Exp ::= Exp (*) GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= FOR AssignExp TO Exp (*) DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
}
transition on DO to state [77]
transition on LT to state [29]
transition on TIMES to state [28]
transition on GT to state [27]
transition on LE to state [26]
transition on EQ to state [25]
transition on PLUS to state [24]
transition on NEQ to state [23]
transition on GE to state [22]
transition on DIVIDE to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [77]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [If ::= (*) IF Exp THEN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) INT , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Var ::= (*) ID LBRACK Exp RBRACK , {EOF SEMICOLON RPAREN RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) error , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) STRING , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) LET decs IN ExpSeq END , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) If , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Var ::= (*) Var DOT ID , {EOF SEMICOLON RPAREN RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR }]
  [Exp ::= FOR AssignExp TO Exp DO (*) Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Var , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) NIL , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) FOR AssignExp TO Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Var ::= (*) ID , {EOF SEMICOLON RPAREN RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR }]
}
transition on BREAK to state [15]
transition on Var to state [14]
transition on LPAREN to state [13]
transition on LET to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [78]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [78]: {
  [Exp ::= FOR AssignExp TO Exp DO Exp (*) , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
}
transition on LT to state [29]
transition on TIMES to state [28]
transition on GT to state [27]
transition on LE to state [26]
transition on EQ to state [25]
transition on PLUS to state [24]
transition on NEQ to state [23]
transition on GE to state [22]
transition on DIVIDE to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [79]: {
  [Exp ::= (*) Exp PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) BREAK SEMICOLON , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [If ::= (*) IF Exp THEN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) INT , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= FOR vardec TO (*) Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) WHILE Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Var ::= (*) ID LBRACK Exp RBRACK , {DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN DO }]
  [Exp ::= (*) error , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) STRING , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) LET decs IN ExpSeq END , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Var ASSIGN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) If , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Var ::= (*) Var DOT ID , {DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN DO }]
  [Exp ::= (*) Var , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) NIL , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) FOR AssignExp TO Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Var ::= (*) ID , {DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN DO }]
}
transition on BREAK to state [15]
transition on Var to state [14]
transition on LPAREN to state [13]
transition on LET to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [80]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [80]: {
  [Exp ::= Exp (*) GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= FOR vardec TO Exp (*) DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
}
transition on LT to state [29]
transition on DO to state [81]
transition on TIMES to state [28]
transition on GT to state [27]
transition on LE to state [26]
transition on EQ to state [25]
transition on PLUS to state [24]
transition on NEQ to state [23]
transition on GE to state [22]
transition on DIVIDE to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [81]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [If ::= (*) IF Exp THEN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= FOR vardec TO Exp DO (*) Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) INT , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Var ::= (*) ID LBRACK Exp RBRACK , {EOF SEMICOLON RPAREN RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) error , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) STRING , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) LET decs IN ExpSeq END , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) If , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Var ::= (*) Var DOT ID , {EOF SEMICOLON RPAREN RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Var , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) NIL , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) FOR AssignExp TO Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Var ::= (*) ID , {EOF SEMICOLON RPAREN RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR }]
}
transition on BREAK to state [15]
transition on Var to state [14]
transition on LPAREN to state [13]
transition on LET to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [82]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [82]: {
  [Exp ::= Exp (*) GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= FOR vardec TO Exp DO Exp (*) , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
}
transition on LT to state [29]
transition on TIMES to state [28]
transition on GT to state [27]
transition on LE to state [26]
transition on EQ to state [25]
transition on PLUS to state [24]
transition on NEQ to state [23]
transition on GE to state [22]
transition on DIVIDE to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [83]: {
  [Exp ::= Exp (*) GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= WHILE Exp (*) DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
}
transition on DO to state [84]
transition on LT to state [29]
transition on TIMES to state [28]
transition on GT to state [27]
transition on LE to state [26]
transition on EQ to state [25]
transition on PLUS to state [24]
transition on NEQ to state [23]
transition on GE to state [22]
transition on DIVIDE to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [84]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [If ::= (*) IF Exp THEN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) INT , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= WHILE Exp DO (*) Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Var ::= (*) ID LBRACK Exp RBRACK , {EOF SEMICOLON RPAREN RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) error , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) STRING , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) LET decs IN ExpSeq END , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) If , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Var ::= (*) Var DOT ID , {EOF SEMICOLON RPAREN RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Var , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) Exp LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) NIL , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= (*) FOR AssignExp TO Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Var ::= (*) ID , {EOF SEMICOLON RPAREN RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO IN END VAR }]
}
transition on BREAK to state [15]
transition on Var to state [14]
transition on LPAREN to state [13]
transition on LET to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [85]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [85]: {
  [Exp ::= Exp (*) GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= WHILE Exp DO Exp (*) , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
}
transition on LT to state [29]
transition on TIMES to state [28]
transition on GT to state [27]
transition on LE to state [26]
transition on EQ to state [25]
transition on PLUS to state [24]
transition on NEQ to state [23]
transition on GE to state [22]
transition on DIVIDE to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [86]: {
  [Exp ::= Exp (*) GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= MINUS Exp (*) , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
  [Exp ::= Exp (*) TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO IN END VAR }]
}
transition on LT to state [29]
transition on TIMES to state [28]
transition on GT to state [27]
transition on LE to state [26]
transition on EQ to state [25]
transition on PLUS to state [24]
transition on NEQ to state [23]
transition on GE to state [22]
transition on DIVIDE to state [21]
transition on MINUS to state [20]

-------------------
Closing files...
------- CUP v0.10g Parser Generation Summary -------
  0 errors and 21 warnings
  45 terminals, 21 non terminals, and 50 productions declared, 
  producing 87 unique parse states.
  10 terminals declared but not used.
  0 non terminals declared but not used.
  0 productions never reduced.
  1 conflict detected (3 expected).
  Code written to "Grm.java", and "sym.java".
---------------------------------------------------- (v0.10g)
