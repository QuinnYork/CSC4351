Opening files...
Parsing specification from standard input...
Precedence declaration: Can't find terminal Exp
Checking specification...
Warning: Terminal "AND" was declared but never used
Warning: Terminal "TYPE" was declared but never used
Warning: Terminal "NIL" was declared but never used
Warning: Terminal "OR" was declared but never used
Warning: Terminal "COMMA" was declared but never used
Warning: Non terminal "Rest" was declared but never used
Building parse tables...
  Computing non-terminal nullability...
  Computing first sets...
  Building state machine...
  Filling in tables...
*** Shift/Reduce conflict found in state #53
  between If ::= IF Exp THEN Exp (*) 
  and     If ::= IF Exp THEN Exp (*) ELSE Exp 
  under symbol ELSE
  Resolved in favor of shifting.

  Checking for non-reduced productions...
*** Production "fundec ::= FUNCTION ID LPAREN TyFields RPAREN COLON tydec ASSIGN Exp " never reduced
*** Production "fundec ::= ID ID LPAREN TyFields RPAREN SEMICOLON " never reduced
*** Production "tydec ::= TYPEDEF Ty ID " never reduced
*** Production "Dec ::= fundec " never reduced
*** Production "Dec ::= vardec " never reduced
*** Production "Dec ::= tydec " never reduced
Writing parser...
===== Terminals =====
DIVIDE FUNCTION GE UMINUS LPAREN 
INT ARRAY FOR MINUS RPAREN 
SEMICOLON AND LT TYPE NIL 
IN OR COMMA TYPEDEF PLUS 
ASSIGN IF DOT ID LE 
OF EOF error NEQ BREAK 
EQ LBRACK TIMES COLON LBRACE 
ELSE RBRACK TO WHILE LET 
THEN RBRACE END STRING GT 
VAR DO 

===== Non terminals =====
If vardec TyFields Dec Exp 
decs Rest Ty tydec fundec 
$START Var 

===== Productions =====
fundec ::= FUNCTION ID LPAREN TyFields RPAREN COLON tydec ASSIGN Exp 
fundec ::= ID ID LPAREN TyFields RPAREN SEMICOLON 
vardec ::= VAR ID COLON Ty ASSIGN Exp 
vardec ::= VAR ID ASSIGN Exp 
tydec ::= TYPEDEF Ty ID 
Dec ::= fundec 
Dec ::= vardec 
Dec ::= tydec 
TyFields ::= ID COLON ID TyFields 
TyFields ::= 
Ty ::= LBRACE TyFields RBRACE 
Ty ::= ARRAY OF ID 
Ty ::= ID 
Var ::= Var DOT ID 
Var ::= Var LBRACK Exp RBRACK 
Var ::= ID 
If ::= IF Exp THEN Exp ELSE Exp 
If ::= IF Exp THEN Exp 
Exp ::= If 
Exp ::= LET decs IN Exp END 
Exp ::= FOR vardec TO Exp DO Exp 
Exp ::= FOR Exp TO Exp DO Exp 
Exp ::= BREAK SEMICOLON 
Exp ::= ID LBRACE Exp RBRACE OF Exp 
Exp ::= WHILE Exp DO Exp 
Exp ::= STRING 
Exp ::= Exp GE Exp 
Exp ::= Exp GT Exp 
Exp ::= Exp LE Exp 
Exp ::= Exp LT Exp 
Exp ::= Exp NEQ Exp 
Exp ::= Exp EQ Exp 
Exp ::= Var ASSIGN Exp 
Exp ::= MINUS Exp 
Exp ::= Exp DIVIDE Exp 
Exp ::= Exp TIMES Exp 
Exp ::= Exp PLUS Exp 
Exp ::= Exp MINUS Exp 
Exp ::= INT 
Exp ::= Var 
Exp ::= error 
$START ::= Exp EOF 

===== Viable Prefix Recognizer =====
START lalr_state [0]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp EQ Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp GE Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) INT , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) MINUS Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp LE Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) ID LBRACE Exp RBRACE OF Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) If , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= (*) Var DOT ID , {EOF LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
  [Exp ::= (*) error , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp TIMES Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp NEQ Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) STRING , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= (*) ID , {EOF LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
  [Exp ::= (*) Exp MINUS Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp GT Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [If ::= (*) IF Exp THEN Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Var , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp LT Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) LET decs IN Exp END , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {EOF LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
  [$START ::= (*) Exp EOF , {EOF }]
}
transition on Var to state [13]
transition on BREAK to state [12]
transition on LET to state [11]
transition on error to state [10]
transition on ID to state [9]
transition on IF to state [8]
transition on STRING to state [7]
transition on Exp to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on INT to state [3]
transition on WHILE to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [1]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) INT , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= MINUS (*) Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) ID LBRACE Exp RBRACE OF Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) If , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var DOT ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) error , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) STRING , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) Exp MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) LET decs IN Exp END , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
}
transition on Var to state [13]
transition on BREAK to state [12]
transition on LET to state [11]
transition on error to state [10]
transition on ID to state [9]
transition on IF to state [8]
transition on STRING to state [7]
transition on Exp to state [89]
transition on FOR to state [5]
transition on If to state [4]
transition on INT to state [3]
transition on WHILE to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [2]: {
  [Exp ::= (*) Exp PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) INT , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) ID LBRACE Exp RBRACE OF Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) If , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Var ::= (*) Var DOT ID , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN DO }]
  [Exp ::= (*) error , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) STRING , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Var ::= (*) ID , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN DO }]
  [Exp ::= (*) Exp MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Var ASSIGN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) BREAK SEMICOLON , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [If ::= (*) IF Exp THEN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Var , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= WHILE (*) Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) WHILE Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) LET decs IN Exp END , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN DO }]
}
transition on Var to state [13]
transition on BREAK to state [12]
transition on LET to state [11]
transition on error to state [10]
transition on ID to state [9]
transition on IF to state [8]
transition on STRING to state [7]
transition on Exp to state [86]
transition on FOR to state [5]
transition on If to state [4]
transition on INT to state [3]
transition on WHILE to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [3]: {
  [Exp ::= INT (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}

-------------------
lalr_state [4]: {
  [Exp ::= If (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}

-------------------
lalr_state [5]: {
  [Exp ::= (*) Exp PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) Exp EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) Exp GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= FOR (*) Exp TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) INT , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) Exp LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) ID LBRACE Exp RBRACE OF Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) If , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Var ::= (*) Var DOT ID , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN TO }]
  [vardec ::= (*) VAR ID ASSIGN Exp , {TO }]
  [Exp ::= (*) error , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) Exp TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) Exp NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= FOR (*) vardec TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) STRING , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Var ::= (*) ID , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN TO }]
  [Exp ::= (*) Exp MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) Var ASSIGN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) Exp GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) BREAK SEMICOLON , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [If ::= (*) IF Exp THEN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [vardec ::= (*) VAR ID COLON Ty ASSIGN Exp , {TO }]
  [Exp ::= (*) Var , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) Exp DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) Exp LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) WHILE Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) LET decs IN Exp END , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN TO }]
}
transition on Var to state [13]
transition on BREAK to state [12]
transition on LET to state [11]
transition on error to state [10]
transition on ID to state [9]
transition on IF to state [8]
transition on VAR to state [59]
transition on STRING to state [7]
transition on Exp to state [58]
transition on vardec to state [57]
transition on FOR to state [5]
transition on If to state [4]
transition on INT to state [3]
transition on WHILE to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [6]: {
  [Exp ::= Exp (*) GT Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) NEQ Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) PLUS Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) LE Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) EQ Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) MINUS Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) GE Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) LT Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) TIMES Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [$START ::= Exp (*) EOF , {EOF }]
}
transition on LT to state [27]
transition on TIMES to state [26]
transition on GT to state [25]
transition on LE to state [24]
transition on EQ to state [23]
transition on PLUS to state [22]
transition on EOF to state [56]
transition on NEQ to state [21]
transition on GE to state [20]
transition on DIVIDE to state [19]
transition on MINUS to state [18]

-------------------
lalr_state [7]: {
  [Exp ::= STRING (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}

-------------------
lalr_state [8]: {
  [Exp ::= (*) Exp PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) Exp EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) Exp GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [If ::= IF (*) Exp THEN Exp ELSE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) INT , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) Exp LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) ID LBRACE Exp RBRACE OF Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) If , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Var ::= (*) Var DOT ID , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN }]
  [Exp ::= (*) error , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) Exp TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) Exp NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) STRING , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Var ::= (*) ID , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN }]
  [Exp ::= (*) Exp MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) Var ASSIGN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) Exp GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) BREAK SEMICOLON , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [If ::= IF (*) Exp THEN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) Var , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) Exp DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) Exp LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) WHILE Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) LET decs IN Exp END , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN }]
}
transition on Var to state [13]
transition on BREAK to state [12]
transition on LET to state [11]
transition on error to state [10]
transition on ID to state [9]
transition on IF to state [8]
transition on STRING to state [7]
transition on Exp to state [51]
transition on FOR to state [5]
transition on If to state [4]
transition on INT to state [3]
transition on WHILE to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [9]: {
  [Exp ::= ID (*) LBRACE Exp RBRACE OF Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= ID (*) , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
}
transition on LBRACE to state [46]

-------------------
lalr_state [10]: {
  [Exp ::= error (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}

-------------------
lalr_state [11]: {
  [Exp ::= LET (*) decs IN Exp END , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on decs to state [42]

-------------------
lalr_state [12]: {
  [Exp ::= BREAK (*) SEMICOLON , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on SEMICOLON to state [41]

-------------------
lalr_state [13]: {
  [Var ::= Var (*) LBRACK Exp RBRACK , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= Var (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Var (*) ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= Var (*) DOT ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
}
transition on ASSIGN to state [16]
transition on DOT to state [15]
transition on LBRACK to state [14]

-------------------
lalr_state [14]: {
  [Exp ::= (*) Exp PLUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp EQ Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp GE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) INT , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) MINUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp LE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) ID LBRACE Exp RBRACE OF Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) If , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= (*) Var DOT ID , {LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
  [Exp ::= (*) error , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp TIMES Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp NEQ Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) STRING , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= (*) ID , {LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
  [Exp ::= (*) Exp MINUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Var ASSIGN Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp GT Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) BREAK SEMICOLON , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [If ::= (*) IF Exp THEN Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Var , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp DIVIDE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp LT Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= Var LBRACK (*) Exp RBRACK , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) WHILE Exp DO Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) LET decs IN Exp END , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
}
transition on Var to state [13]
transition on BREAK to state [12]
transition on LET to state [11]
transition on error to state [10]
transition on ID to state [9]
transition on IF to state [8]
transition on STRING to state [7]
transition on Exp to state [39]
transition on FOR to state [5]
transition on If to state [4]
transition on INT to state [3]
transition on WHILE to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [15]: {
  [Var ::= Var DOT (*) ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
}
transition on ID to state [38]

-------------------
lalr_state [16]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) INT , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) ID LBRACE Exp RBRACE OF Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) If , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var DOT ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) error , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) STRING , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= Var ASSIGN (*) Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) LET decs IN Exp END , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
}
transition on Var to state [13]
transition on BREAK to state [12]
transition on LET to state [11]
transition on error to state [10]
transition on ID to state [9]
transition on IF to state [8]
transition on STRING to state [7]
transition on Exp to state [17]
transition on FOR to state [5]
transition on If to state [4]
transition on INT to state [3]
transition on WHILE to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [17]: {
  [Exp ::= Exp (*) GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Var ASSIGN Exp (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on LT to state [27]
transition on TIMES to state [26]
transition on GT to state [25]
transition on LE to state [24]
transition on EQ to state [23]
transition on PLUS to state [22]
transition on NEQ to state [21]
transition on GE to state [20]
transition on DIVIDE to state [19]
transition on MINUS to state [18]

-------------------
lalr_state [18]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) INT , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) ID LBRACE Exp RBRACE OF Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) If , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var DOT ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) error , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) STRING , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= Exp MINUS (*) Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) LET decs IN Exp END , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
}
transition on Var to state [13]
transition on BREAK to state [12]
transition on LET to state [11]
transition on error to state [10]
transition on ID to state [9]
transition on IF to state [8]
transition on STRING to state [7]
transition on Exp to state [37]
transition on FOR to state [5]
transition on If to state [4]
transition on INT to state [3]
transition on WHILE to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [19]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) INT , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) ID LBRACE Exp RBRACE OF Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) If , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var DOT ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) error , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) STRING , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) Exp MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp DIVIDE (*) Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) LET decs IN Exp END , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
}
transition on Var to state [13]
transition on BREAK to state [12]
transition on LET to state [11]
transition on error to state [10]
transition on ID to state [9]
transition on IF to state [8]
transition on STRING to state [7]
transition on Exp to state [36]
transition on FOR to state [5]
transition on If to state [4]
transition on INT to state [3]
transition on WHILE to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [20]: {
  [Exp ::= Exp GE (*) Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) INT , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) ID LBRACE Exp RBRACE OF Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) If , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var DOT ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) error , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) STRING , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) Exp MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) LET decs IN Exp END , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
}
transition on Var to state [13]
transition on BREAK to state [12]
transition on LET to state [11]
transition on error to state [10]
transition on ID to state [9]
transition on IF to state [8]
transition on STRING to state [7]
transition on Exp to state [35]
transition on FOR to state [5]
transition on If to state [4]
transition on INT to state [3]
transition on WHILE to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [21]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) INT , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) ID LBRACE Exp RBRACE OF Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) If , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var DOT ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) error , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp NEQ (*) Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) STRING , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) Exp MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) LET decs IN Exp END , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
}
transition on Var to state [13]
transition on BREAK to state [12]
transition on LET to state [11]
transition on error to state [10]
transition on ID to state [9]
transition on IF to state [8]
transition on STRING to state [7]
transition on Exp to state [34]
transition on FOR to state [5]
transition on If to state [4]
transition on INT to state [3]
transition on WHILE to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [22]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) INT , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) ID LBRACE Exp RBRACE OF Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) If , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var DOT ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) error , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) STRING , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) Exp MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) LET decs IN Exp END , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= Exp PLUS (*) Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on Var to state [13]
transition on BREAK to state [12]
transition on LET to state [11]
transition on error to state [10]
transition on ID to state [9]
transition on IF to state [8]
transition on STRING to state [7]
transition on Exp to state [33]
transition on FOR to state [5]
transition on If to state [4]
transition on INT to state [3]
transition on WHILE to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [23]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) INT , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) ID LBRACE Exp RBRACE OF Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) If , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var DOT ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) error , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) STRING , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) Exp MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) LET decs IN Exp END , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= Exp EQ (*) Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on Var to state [13]
transition on BREAK to state [12]
transition on LET to state [11]
transition on error to state [10]
transition on ID to state [9]
transition on IF to state [8]
transition on STRING to state [7]
transition on Exp to state [32]
transition on FOR to state [5]
transition on If to state [4]
transition on INT to state [3]
transition on WHILE to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [24]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) INT , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp LE (*) Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) ID LBRACE Exp RBRACE OF Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) If , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var DOT ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) error , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) STRING , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) Exp MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) LET decs IN Exp END , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
}
transition on Var to state [13]
transition on BREAK to state [12]
transition on LET to state [11]
transition on error to state [10]
transition on ID to state [9]
transition on IF to state [8]
transition on STRING to state [7]
transition on Exp to state [31]
transition on FOR to state [5]
transition on If to state [4]
transition on INT to state [3]
transition on WHILE to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [25]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) INT , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) ID LBRACE Exp RBRACE OF Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) If , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var DOT ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) error , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) STRING , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) Exp MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp GT (*) Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) LET decs IN Exp END , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
}
transition on Var to state [13]
transition on BREAK to state [12]
transition on LET to state [11]
transition on error to state [10]
transition on ID to state [9]
transition on IF to state [8]
transition on STRING to state [7]
transition on Exp to state [30]
transition on FOR to state [5]
transition on If to state [4]
transition on INT to state [3]
transition on WHILE to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [26]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) INT , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) ID LBRACE Exp RBRACE OF Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) If , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var DOT ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= Exp TIMES (*) Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) error , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) STRING , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) Exp MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) LET decs IN Exp END , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
}
transition on Var to state [13]
transition on BREAK to state [12]
transition on LET to state [11]
transition on error to state [10]
transition on ID to state [9]
transition on IF to state [8]
transition on STRING to state [7]
transition on Exp to state [29]
transition on FOR to state [5]
transition on If to state [4]
transition on INT to state [3]
transition on WHILE to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [27]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) INT , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) ID LBRACE Exp RBRACE OF Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) If , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var DOT ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) error , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) STRING , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) Exp MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp LT (*) Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) LET decs IN Exp END , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
}
transition on Var to state [13]
transition on BREAK to state [12]
transition on LET to state [11]
transition on error to state [10]
transition on ID to state [9]
transition on IF to state [8]
transition on STRING to state [7]
transition on Exp to state [28]
transition on FOR to state [5]
transition on If to state [4]
transition on INT to state [3]
transition on WHILE to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [28]: {
  [Exp ::= Exp (*) GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp LT Exp (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on LT to state [27]
transition on TIMES to state [26]
transition on GT to state [25]
transition on LE to state [24]
transition on EQ to state [23]
transition on PLUS to state [22]
transition on NEQ to state [21]
transition on GE to state [20]
transition on DIVIDE to state [19]
transition on MINUS to state [18]

-------------------
lalr_state [29]: {
  [Exp ::= Exp (*) GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp TIMES Exp (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on LT to state [27]
transition on TIMES to state [26]
transition on GT to state [25]
transition on LE to state [24]
transition on EQ to state [23]
transition on PLUS to state [22]
transition on NEQ to state [21]
transition on GE to state [20]
transition on DIVIDE to state [19]
transition on MINUS to state [18]

-------------------
lalr_state [30]: {
  [Exp ::= Exp (*) GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp GT Exp (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on LT to state [27]
transition on TIMES to state [26]
transition on GT to state [25]
transition on LE to state [24]
transition on EQ to state [23]
transition on PLUS to state [22]
transition on NEQ to state [21]
transition on GE to state [20]
transition on DIVIDE to state [19]
transition on MINUS to state [18]

-------------------
lalr_state [31]: {
  [Exp ::= Exp (*) GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp LE Exp (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on LT to state [27]
transition on TIMES to state [26]
transition on GT to state [25]
transition on LE to state [24]
transition on EQ to state [23]
transition on PLUS to state [22]
transition on NEQ to state [21]
transition on GE to state [20]
transition on DIVIDE to state [19]
transition on MINUS to state [18]

-------------------
lalr_state [32]: {
  [Exp ::= Exp (*) GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp EQ Exp (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on LT to state [27]
transition on TIMES to state [26]
transition on GT to state [25]
transition on LE to state [24]
transition on EQ to state [23]
transition on PLUS to state [22]
transition on NEQ to state [21]
transition on GE to state [20]
transition on DIVIDE to state [19]
transition on MINUS to state [18]

-------------------
lalr_state [33]: {
  [Exp ::= Exp (*) GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp PLUS Exp (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on LT to state [27]
transition on TIMES to state [26]
transition on GT to state [25]
transition on LE to state [24]
transition on EQ to state [23]
transition on PLUS to state [22]
transition on NEQ to state [21]
transition on GE to state [20]
transition on DIVIDE to state [19]
transition on MINUS to state [18]

-------------------
lalr_state [34]: {
  [Exp ::= Exp NEQ Exp (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on LT to state [27]
transition on TIMES to state [26]
transition on GT to state [25]
transition on LE to state [24]
transition on EQ to state [23]
transition on PLUS to state [22]
transition on NEQ to state [21]
transition on GE to state [20]
transition on DIVIDE to state [19]
transition on MINUS to state [18]

-------------------
lalr_state [35]: {
  [Exp ::= Exp (*) GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp GE Exp (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on LT to state [27]
transition on TIMES to state [26]
transition on GT to state [25]
transition on LE to state [24]
transition on EQ to state [23]
transition on PLUS to state [22]
transition on NEQ to state [21]
transition on GE to state [20]
transition on DIVIDE to state [19]
transition on MINUS to state [18]

-------------------
lalr_state [36]: {
  [Exp ::= Exp (*) GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp DIVIDE Exp (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on LT to state [27]
transition on TIMES to state [26]
transition on GT to state [25]
transition on LE to state [24]
transition on EQ to state [23]
transition on PLUS to state [22]
transition on NEQ to state [21]
transition on GE to state [20]
transition on DIVIDE to state [19]
transition on MINUS to state [18]

-------------------
lalr_state [37]: {
  [Exp ::= Exp (*) GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp MINUS Exp (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on LT to state [27]
transition on TIMES to state [26]
transition on GT to state [25]
transition on LE to state [24]
transition on EQ to state [23]
transition on PLUS to state [22]
transition on NEQ to state [21]
transition on GE to state [20]
transition on DIVIDE to state [19]
transition on MINUS to state [18]

-------------------
lalr_state [38]: {
  [Var ::= Var DOT ID (*) , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
}

-------------------
lalr_state [39]: {
  [Exp ::= Exp (*) GT Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) NEQ Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) PLUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) LE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= Var LBRACK Exp (*) RBRACK , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= Exp (*) EQ Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) DIVIDE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) MINUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) GE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) LT Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) TIMES Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
}
transition on LT to state [27]
transition on TIMES to state [26]
transition on RBRACK to state [40]
transition on GT to state [25]
transition on LE to state [24]
transition on EQ to state [23]
transition on PLUS to state [22]
transition on NEQ to state [21]
transition on GE to state [20]
transition on DIVIDE to state [19]
transition on MINUS to state [18]

-------------------
lalr_state [40]: {
  [Var ::= Var LBRACK Exp RBRACK (*) , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
}

-------------------
lalr_state [41]: {
  [Exp ::= BREAK SEMICOLON (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}

-------------------
lalr_state [42]: {
  [Exp ::= LET decs (*) IN Exp END , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on IN to state [43]

-------------------
lalr_state [43]: {
  [Exp ::= (*) Exp PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) Exp EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) Exp GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) INT , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) Exp LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) ID LBRACE Exp RBRACE OF Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) If , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Var ::= (*) Var DOT ID , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN END }]
  [Exp ::= (*) error , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) Exp TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) Exp NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) STRING , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Var ::= (*) ID , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN END }]
  [Exp ::= (*) Exp MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) Var ASSIGN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) Exp GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) BREAK SEMICOLON , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [If ::= (*) IF Exp THEN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) Var , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) Exp DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= LET decs IN (*) Exp END , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) WHILE Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= (*) LET decs IN Exp END , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN END }]
}
transition on Var to state [13]
transition on BREAK to state [12]
transition on LET to state [11]
transition on error to state [10]
transition on ID to state [9]
transition on IF to state [8]
transition on STRING to state [7]
transition on Exp to state [44]
transition on FOR to state [5]
transition on If to state [4]
transition on INT to state [3]
transition on WHILE to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [44]: {
  [Exp ::= Exp (*) GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= Exp (*) NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= LET decs IN Exp (*) END , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= Exp (*) LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= Exp (*) EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= Exp (*) DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= Exp (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= Exp (*) GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= Exp (*) LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
  [Exp ::= Exp (*) TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE END }]
}
transition on END to state [45]
transition on LT to state [27]
transition on TIMES to state [26]
transition on GT to state [25]
transition on LE to state [24]
transition on EQ to state [23]
transition on PLUS to state [22]
transition on NEQ to state [21]
transition on GE to state [20]
transition on DIVIDE to state [19]
transition on MINUS to state [18]

-------------------
lalr_state [45]: {
  [Exp ::= LET decs IN Exp END (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}

-------------------
lalr_state [46]: {
  [Exp ::= (*) Exp PLUS Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp EQ Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp GE Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) INT , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) MINUS Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= ID LBRACE (*) Exp RBRACE OF Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LE Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) ID LBRACE Exp RBRACE OF Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) If , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= (*) Var DOT ID , {LBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
  [Exp ::= (*) error , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp TIMES Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp NEQ Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) STRING , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= (*) ID , {LBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
  [Exp ::= (*) Exp MINUS Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Var ASSIGN Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp GT Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) BREAK SEMICOLON , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [If ::= (*) IF Exp THEN Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Var , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp DIVIDE Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp LT Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) WHILE Exp DO Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) LET decs IN Exp END , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {LBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
}
transition on Var to state [13]
transition on BREAK to state [12]
transition on LET to state [11]
transition on error to state [10]
transition on ID to state [9]
transition on IF to state [8]
transition on STRING to state [7]
transition on Exp to state [47]
transition on FOR to state [5]
transition on If to state [4]
transition on INT to state [3]
transition on WHILE to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [47]: {
  [Exp ::= Exp (*) GT Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) NEQ Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) PLUS Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) LE Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) EQ Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) DIVIDE Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) MINUS Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= ID LBRACE Exp (*) RBRACE OF Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GE Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) LT Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) TIMES Exp , {RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
}
transition on RBRACE to state [48]
transition on LT to state [27]
transition on TIMES to state [26]
transition on GT to state [25]
transition on LE to state [24]
transition on EQ to state [23]
transition on PLUS to state [22]
transition on NEQ to state [21]
transition on GE to state [20]
transition on DIVIDE to state [19]
transition on MINUS to state [18]

-------------------
lalr_state [48]: {
  [Exp ::= ID LBRACE Exp RBRACE (*) OF Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on OF to state [49]

-------------------
lalr_state [49]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= ID LBRACE Exp RBRACE OF (*) Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) INT , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) ID LBRACE Exp RBRACE OF Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) If , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var DOT ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) error , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) STRING , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) Exp MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) LET decs IN Exp END , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
}
transition on Var to state [13]
transition on BREAK to state [12]
transition on LET to state [11]
transition on error to state [10]
transition on ID to state [9]
transition on IF to state [8]
transition on STRING to state [7]
transition on Exp to state [50]
transition on FOR to state [5]
transition on If to state [4]
transition on INT to state [3]
transition on WHILE to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [50]: {
  [Exp ::= Exp (*) GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= ID LBRACE Exp RBRACE OF Exp (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on LT to state [27]
transition on TIMES to state [26]
transition on GT to state [25]
transition on LE to state [24]
transition on EQ to state [23]
transition on PLUS to state [22]
transition on NEQ to state [21]
transition on GE to state [20]
transition on DIVIDE to state [19]
transition on MINUS to state [18]

-------------------
lalr_state [51]: {
  [Exp ::= Exp (*) GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= Exp (*) NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [If ::= IF Exp (*) THEN Exp ELSE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= Exp (*) LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= Exp (*) EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= Exp (*) DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [If ::= IF Exp (*) THEN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= Exp (*) GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= Exp (*) LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= Exp (*) TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
}
transition on LT to state [27]
transition on TIMES to state [26]
transition on GT to state [25]
transition on LE to state [24]
transition on EQ to state [23]
transition on PLUS to state [22]
transition on NEQ to state [21]
transition on THEN to state [52]
transition on GE to state [20]
transition on DIVIDE to state [19]
transition on MINUS to state [18]

-------------------
lalr_state [52]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= IF Exp THEN (*) Exp ELSE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) INT , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) ID LBRACE Exp RBRACE OF Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) If , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var DOT ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) error , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) STRING , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) Exp MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= IF Exp THEN (*) Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) LET decs IN Exp END , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
}
transition on Var to state [13]
transition on BREAK to state [12]
transition on LET to state [11]
transition on error to state [10]
transition on ID to state [9]
transition on IF to state [8]
transition on STRING to state [7]
transition on Exp to state [53]
transition on FOR to state [5]
transition on If to state [4]
transition on INT to state [3]
transition on WHILE to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [53]: {
  [Exp ::= Exp (*) GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= IF Exp THEN Exp (*) ELSE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= IF Exp THEN Exp (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on LT to state [27]
transition on TIMES to state [26]
transition on GT to state [25]
transition on ELSE to state [54]
transition on LE to state [24]
transition on EQ to state [23]
transition on PLUS to state [22]
transition on NEQ to state [21]
transition on GE to state [20]
transition on DIVIDE to state [19]
transition on MINUS to state [18]

-------------------
lalr_state [54]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) INT , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) ID LBRACE Exp RBRACE OF Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) If , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var DOT ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) error , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) STRING , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) Exp MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) LET decs IN Exp END , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [If ::= IF Exp THEN Exp ELSE (*) Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on Var to state [13]
transition on BREAK to state [12]
transition on LET to state [11]
transition on error to state [10]
transition on ID to state [9]
transition on IF to state [8]
transition on STRING to state [7]
transition on Exp to state [55]
transition on FOR to state [5]
transition on If to state [4]
transition on INT to state [3]
transition on WHILE to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [55]: {
  [If ::= IF Exp THEN Exp ELSE Exp (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on LT to state [27]
transition on TIMES to state [26]
transition on GT to state [25]
transition on LE to state [24]
transition on EQ to state [23]
transition on PLUS to state [22]
transition on NEQ to state [21]
transition on GE to state [20]
transition on DIVIDE to state [19]
transition on MINUS to state [18]

-------------------
lalr_state [56]: {
  [$START ::= Exp EOF (*) , {EOF }]
}

-------------------
lalr_state [57]: {
  [Exp ::= FOR vardec (*) TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on TO to state [82]

-------------------
lalr_state [58]: {
  [Exp ::= Exp (*) GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= Exp (*) NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= Exp (*) PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= Exp (*) LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= Exp (*) EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= Exp (*) DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= Exp (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= Exp (*) GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= Exp (*) LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= Exp (*) TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= FOR Exp (*) TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on LT to state [27]
transition on TIMES to state [26]
transition on GT to state [25]
transition on LE to state [24]
transition on EQ to state [23]
transition on PLUS to state [22]
transition on NEQ to state [21]
transition on TO to state [78]
transition on GE to state [20]
transition on DIVIDE to state [19]
transition on MINUS to state [18]

-------------------
lalr_state [59]: {
  [vardec ::= VAR (*) ID ASSIGN Exp , {TO }]
  [vardec ::= VAR (*) ID COLON Ty ASSIGN Exp , {TO }]
}
transition on ID to state [60]

-------------------
lalr_state [60]: {
  [vardec ::= VAR ID (*) COLON Ty ASSIGN Exp , {TO }]
  [vardec ::= VAR ID (*) ASSIGN Exp , {TO }]
}
transition on ASSIGN to state [62]
transition on COLON to state [61]

-------------------
lalr_state [61]: {
  [Ty ::= (*) ARRAY OF ID , {ASSIGN }]
  [Ty ::= (*) ID , {ASSIGN }]
  [vardec ::= VAR ID COLON (*) Ty ASSIGN Exp , {TO }]
  [Ty ::= (*) LBRACE TyFields RBRACE , {ASSIGN }]
}
transition on ARRAY to state [67]
transition on Ty to state [66]
transition on LBRACE to state [65]
transition on ID to state [64]

-------------------
lalr_state [62]: {
  [Exp ::= (*) Exp PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) Exp EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) Exp GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) INT , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) Exp LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) ID LBRACE Exp RBRACE OF Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) If , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [vardec ::= VAR ID ASSIGN (*) Exp , {TO }]
  [Var ::= (*) Var DOT ID , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN TO }]
  [Exp ::= (*) error , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) Exp TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) Exp NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) STRING , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Var ::= (*) ID , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN TO }]
  [Exp ::= (*) Exp MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) Var ASSIGN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) Exp GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) BREAK SEMICOLON , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [If ::= (*) IF Exp THEN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) Var , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) Exp DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) Exp LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) WHILE Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) LET decs IN Exp END , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN TO }]
}
transition on Var to state [13]
transition on BREAK to state [12]
transition on LET to state [11]
transition on error to state [10]
transition on ID to state [9]
transition on IF to state [8]
transition on STRING to state [7]
transition on Exp to state [63]
transition on FOR to state [5]
transition on If to state [4]
transition on INT to state [3]
transition on WHILE to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [63]: {
  [Exp ::= Exp (*) GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= Exp (*) NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= Exp (*) PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= Exp (*) LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= Exp (*) EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= Exp (*) DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= Exp (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [vardec ::= VAR ID ASSIGN Exp (*) , {TO }]
  [Exp ::= Exp (*) GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= Exp (*) LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= Exp (*) TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
}
transition on LT to state [27]
transition on TIMES to state [26]
transition on GT to state [25]
transition on LE to state [24]
transition on EQ to state [23]
transition on PLUS to state [22]
transition on NEQ to state [21]
transition on GE to state [20]
transition on DIVIDE to state [19]
transition on MINUS to state [18]

-------------------
lalr_state [64]: {
  [Ty ::= ID (*) , {ASSIGN }]
}

-------------------
lalr_state [65]: {
  [TyFields ::= (*) , {RBRACE }]
  [Ty ::= LBRACE (*) TyFields RBRACE , {ASSIGN }]
  [TyFields ::= (*) ID COLON ID TyFields , {RBRACE }]
}
transition on TyFields to state [73]
transition on ID to state [72]

-------------------
lalr_state [66]: {
  [vardec ::= VAR ID COLON Ty (*) ASSIGN Exp , {TO }]
}
transition on ASSIGN to state [70]

-------------------
lalr_state [67]: {
  [Ty ::= ARRAY (*) OF ID , {ASSIGN }]
}
transition on OF to state [68]

-------------------
lalr_state [68]: {
  [Ty ::= ARRAY OF (*) ID , {ASSIGN }]
}
transition on ID to state [69]

-------------------
lalr_state [69]: {
  [Ty ::= ARRAY OF ID (*) , {ASSIGN }]
}

-------------------
lalr_state [70]: {
  [Exp ::= (*) Exp PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) Exp EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) Exp GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) INT , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) Exp LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) ID LBRACE Exp RBRACE OF Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) If , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Var ::= (*) Var DOT ID , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN TO }]
  [Exp ::= (*) error , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) Exp TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) Exp NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) STRING , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Var ::= (*) ID , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN TO }]
  [Exp ::= (*) Exp MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) Var ASSIGN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [vardec ::= VAR ID COLON Ty ASSIGN (*) Exp , {TO }]
  [Exp ::= (*) Exp GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) BREAK SEMICOLON , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [If ::= (*) IF Exp THEN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) Var , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) Exp DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) Exp LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) WHILE Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) LET decs IN Exp END , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN TO }]
}
transition on Var to state [13]
transition on BREAK to state [12]
transition on LET to state [11]
transition on error to state [10]
transition on ID to state [9]
transition on IF to state [8]
transition on STRING to state [7]
transition on Exp to state [71]
transition on FOR to state [5]
transition on If to state [4]
transition on INT to state [3]
transition on WHILE to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [71]: {
  [Exp ::= Exp (*) GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= Exp (*) NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [vardec ::= VAR ID COLON Ty ASSIGN Exp (*) , {TO }]
  [Exp ::= Exp (*) PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= Exp (*) LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= Exp (*) EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= Exp (*) DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= Exp (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= Exp (*) GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= Exp (*) LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= Exp (*) TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
}
transition on LT to state [27]
transition on TIMES to state [26]
transition on GT to state [25]
transition on LE to state [24]
transition on EQ to state [23]
transition on PLUS to state [22]
transition on NEQ to state [21]
transition on GE to state [20]
transition on DIVIDE to state [19]
transition on MINUS to state [18]

-------------------
lalr_state [72]: {
  [TyFields ::= ID (*) COLON ID TyFields , {RBRACE }]
}
transition on COLON to state [75]

-------------------
lalr_state [73]: {
  [Ty ::= LBRACE TyFields (*) RBRACE , {ASSIGN }]
}
transition on RBRACE to state [74]

-------------------
lalr_state [74]: {
  [Ty ::= LBRACE TyFields RBRACE (*) , {ASSIGN }]
}

-------------------
lalr_state [75]: {
  [TyFields ::= ID COLON (*) ID TyFields , {RBRACE }]
}
transition on ID to state [76]

-------------------
lalr_state [76]: {
  [TyFields ::= (*) , {RBRACE }]
  [TyFields ::= ID COLON ID (*) TyFields , {RBRACE }]
  [TyFields ::= (*) ID COLON ID TyFields , {RBRACE }]
}
transition on TyFields to state [77]
transition on ID to state [72]

-------------------
lalr_state [77]: {
  [TyFields ::= ID COLON ID TyFields (*) , {RBRACE }]
}

-------------------
lalr_state [78]: {
  [Exp ::= FOR Exp TO (*) Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) INT , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) ID LBRACE Exp RBRACE OF Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) If , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Var ::= (*) Var DOT ID , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN DO }]
  [Exp ::= (*) error , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) STRING , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Var ::= (*) ID , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN DO }]
  [Exp ::= (*) Exp MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Var ASSIGN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) BREAK SEMICOLON , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [If ::= (*) IF Exp THEN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Var , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) WHILE Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) LET decs IN Exp END , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN DO }]
}
transition on Var to state [13]
transition on BREAK to state [12]
transition on LET to state [11]
transition on error to state [10]
transition on ID to state [9]
transition on IF to state [8]
transition on STRING to state [7]
transition on Exp to state [79]
transition on FOR to state [5]
transition on If to state [4]
transition on INT to state [3]
transition on WHILE to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [79]: {
  [Exp ::= Exp (*) GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= FOR Exp TO Exp (*) DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on LT to state [27]
transition on DO to state [80]
transition on TIMES to state [26]
transition on GT to state [25]
transition on LE to state [24]
transition on EQ to state [23]
transition on PLUS to state [22]
transition on NEQ to state [21]
transition on GE to state [20]
transition on DIVIDE to state [19]
transition on MINUS to state [18]

-------------------
lalr_state [80]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) INT , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) ID LBRACE Exp RBRACE OF Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) If , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var DOT ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) error , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) STRING , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) Exp MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) LET decs IN Exp END , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= FOR Exp TO Exp DO (*) Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on Var to state [13]
transition on BREAK to state [12]
transition on LET to state [11]
transition on error to state [10]
transition on ID to state [9]
transition on IF to state [8]
transition on STRING to state [7]
transition on Exp to state [81]
transition on FOR to state [5]
transition on If to state [4]
transition on INT to state [3]
transition on WHILE to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [81]: {
  [Exp ::= Exp (*) GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= FOR Exp TO Exp DO Exp (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on LT to state [27]
transition on TIMES to state [26]
transition on GT to state [25]
transition on LE to state [24]
transition on EQ to state [23]
transition on PLUS to state [22]
transition on NEQ to state [21]
transition on GE to state [20]
transition on DIVIDE to state [19]
transition on MINUS to state [18]

-------------------
lalr_state [82]: {
  [Exp ::= (*) Exp PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) INT , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) ID LBRACE Exp RBRACE OF Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) If , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Var ::= (*) Var DOT ID , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN DO }]
  [Exp ::= (*) error , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= FOR vardec TO (*) Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) STRING , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Var ::= (*) ID , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN DO }]
  [Exp ::= (*) Exp MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Var ASSIGN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) BREAK SEMICOLON , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [If ::= (*) IF Exp THEN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Var , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) WHILE Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) LET decs IN Exp END , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN DO }]
}
transition on Var to state [13]
transition on BREAK to state [12]
transition on LET to state [11]
transition on error to state [10]
transition on ID to state [9]
transition on IF to state [8]
transition on STRING to state [7]
transition on Exp to state [83]
transition on FOR to state [5]
transition on If to state [4]
transition on INT to state [3]
transition on WHILE to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [83]: {
  [Exp ::= Exp (*) GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= FOR vardec TO Exp (*) DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
}
transition on DO to state [84]
transition on LT to state [27]
transition on TIMES to state [26]
transition on GT to state [25]
transition on LE to state [24]
transition on EQ to state [23]
transition on PLUS to state [22]
transition on NEQ to state [21]
transition on GE to state [20]
transition on DIVIDE to state [19]
transition on MINUS to state [18]

-------------------
lalr_state [84]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) INT , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) ID LBRACE Exp RBRACE OF Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) If , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var DOT ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= FOR vardec TO Exp DO (*) Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) error , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) STRING , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) Exp MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) LET decs IN Exp END , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
}
transition on Var to state [13]
transition on BREAK to state [12]
transition on LET to state [11]
transition on error to state [10]
transition on ID to state [9]
transition on IF to state [8]
transition on STRING to state [7]
transition on Exp to state [85]
transition on FOR to state [5]
transition on If to state [4]
transition on INT to state [3]
transition on WHILE to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [85]: {
  [Exp ::= Exp (*) GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= FOR vardec TO Exp DO Exp (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on LT to state [27]
transition on TIMES to state [26]
transition on GT to state [25]
transition on LE to state [24]
transition on EQ to state [23]
transition on PLUS to state [22]
transition on NEQ to state [21]
transition on GE to state [20]
transition on DIVIDE to state [19]
transition on MINUS to state [18]

-------------------
lalr_state [86]: {
  [Exp ::= Exp (*) GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= WHILE Exp (*) DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on LT to state [27]
transition on DO to state [87]
transition on TIMES to state [26]
transition on GT to state [25]
transition on LE to state [24]
transition on EQ to state [23]
transition on PLUS to state [22]
transition on NEQ to state [21]
transition on GE to state [20]
transition on DIVIDE to state [19]
transition on MINUS to state [18]

-------------------
lalr_state [87]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) INT , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) ID LBRACE Exp RBRACE OF Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) If , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var DOT ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) error , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) STRING , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) FOR vardec TO Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) ID , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
  [Exp ::= (*) Exp MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [If ::= (*) IF Exp THEN Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= WHILE Exp DO (*) Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Var , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) Exp LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= (*) LET decs IN Exp END , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {EOF LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO END }]
}
transition on Var to state [13]
transition on BREAK to state [12]
transition on LET to state [11]
transition on error to state [10]
transition on ID to state [9]
transition on IF to state [8]
transition on STRING to state [7]
transition on Exp to state [88]
transition on FOR to state [5]
transition on If to state [4]
transition on INT to state [3]
transition on WHILE to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [88]: {
  [Exp ::= Exp (*) GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= WHILE Exp DO Exp (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on LT to state [27]
transition on TIMES to state [26]
transition on GT to state [25]
transition on LE to state [24]
transition on EQ to state [23]
transition on PLUS to state [22]
transition on NEQ to state [21]
transition on GE to state [20]
transition on DIVIDE to state [19]
transition on MINUS to state [18]

-------------------
lalr_state [89]: {
  [Exp ::= Exp (*) GT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= MINUS Exp (*) , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) NEQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) PLUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) LE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) EQ Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) MINUS Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) GE Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) LT Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
  [Exp ::= Exp (*) TIMES Exp , {EOF RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO END }]
}
transition on LT to state [27]
transition on TIMES to state [26]
transition on GT to state [25]
transition on LE to state [24]
transition on EQ to state [23]
transition on PLUS to state [22]
transition on NEQ to state [21]
transition on GE to state [20]
transition on DIVIDE to state [19]
transition on MINUS to state [18]

-------------------
Closing files...
------- CUP v0.10g Parser Generation Summary -------
  0 errors and 13 warnings
  47 terminals, 12 non terminals, and 42 productions declared, 
  producing 90 unique parse states.
  6 terminals declared but not used.
  0 non terminals declared but not used.
  0 productions never reduced.
  1 conflict detected (3 expected).
  Code written to "Grm.java", and "sym.java".
---------------------------------------------------- (v0.10g)
