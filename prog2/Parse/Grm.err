Opening files...
Parsing specification from standard input...
Checking specification...
Warning: Terminal "AND" was declared but never used
Warning: Terminal "IN" was declared but never used
Warning: Terminal "OR" was declared but never used
Warning: Terminal "COMMA" was declared but never used
Warning: Terminal "LET" was declared but never used
Warning: Terminal "END" was declared but never used
Building parse tables...
  Computing non-terminal nullability...
  Computing first sets...
  Building state machine...
  Filling in tables...
*** Shift/Reduce conflict found in state #56
  between If ::= IF Exp THEN Exp (*) 
  and     If ::= IF Exp THEN Exp (*) ELSE Exp 
  under symbol ELSE
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #10
  between Var ::= ID (*) 
  and     Exp ::= ID (*) LBRACK Exp RBRACK OF Exp 
  under symbol LBRACK
  Resolved in favor of shifting.

  Checking for non-reduced productions...
*** Production "fdef ::= " never reduced
*** Production "fdef ::= ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef " never reduced
*** Production "fdef ::= Ty ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef " never reduced
*** Production "fdec ::= " never reduced
*** Production "fdec ::= ID LPAREN TyFields RPAREN SEMICOLON fdec " never reduced
*** Production "fdec ::= Ty ID LPAREN TyFields RPAREN SEMICOLON fdec " never reduced
*** Production "fundec ::= fdef " never reduced
*** Production "fundec ::= fdec " never reduced
*** Production "vardec ::= VAR ID COLON NameTy ASSIGN Exp " never reduced
*** Production "vardec ::= VAR ID ASSIGN Exp " never reduced
*** Production "tydec ::= " never reduced
*** Production "tydec ::= TYPEDEF Ty ID tydec " never reduced
*** Production "Dec ::= fundec " never reduced
*** Production "Dec ::= vardec " never reduced
*** Production "Dec ::= tydec " never reduced
*** Production "decs ::= Dec decs " never reduced
*** Production "decs ::= " never reduced
*** Production "TyFields ::= ID COLON ID TyFields " never reduced
*** Production "TyFields ::= " never reduced
*** Production "Ty ::= TyFields " never reduced
*** Production "Ty ::= ARRAY OF ID " never reduced
*** Production "Ty ::= ID " never reduced
*** Production "ExpList ::= " never reduced
Writing parser...
===== Terminals =====
DIVIDE GE UMINUS LPAREN INT 
ARRAY FOR MINUS RPAREN SEMICOLON 
AND LT NIL IN OR 
COMMA TYPEDEF PLUS ASSIGN IF 
DOT ID LE OF EOF 
error NEQ BREAK EQ LBRACK 
TIMES COLON LBRACE ELSE RBRACK 
TO WHILE LET THEN RBRACE 
END STRING GT VAR DO 


===== Non terminals =====
If vardec TyFields Dec ExpSeq 
Exp decs Rest Ty fdef 
ExpList NameTy tydec fdec fundec 
$START Var 

===== Productions =====
fdef ::= 
fdef ::= ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef 
fdef ::= Ty ID LPAREN TyFields RPAREN LBRACE Exp RBRACE fdef 
fdec ::= 
fdec ::= ID LPAREN TyFields RPAREN SEMICOLON fdec 
fdec ::= Ty ID LPAREN TyFields RPAREN SEMICOLON fdec 
fundec ::= fdef 
fundec ::= fdec 
vardec ::= VAR ID COLON NameTy ASSIGN Exp 
vardec ::= VAR ID ASSIGN Exp 
tydec ::= 
tydec ::= TYPEDEF Ty ID tydec 
Dec ::= fundec 
Dec ::= vardec 
Dec ::= tydec 
decs ::= Dec decs 
decs ::= 
TyFields ::= ID COLON ID TyFields 
TyFields ::= 
Ty ::= TyFields 
Ty ::= ARRAY OF ID 
Ty ::= ID 
Var ::= Var DOT ID 
Var ::= Var LBRACK Exp RBRACK 
Var ::= ID 
If ::= IF Exp THEN Exp ELSE Exp 
If ::= IF Exp THEN Exp 
Rest ::= 
Rest ::= SEMICOLON ExpSeq 
ExpSeq ::= 
ExpSeq ::= Exp Rest 
ExpList ::= 
Exp ::= LPAREN ExpSeq RPAREN 
Exp ::= If 
Exp ::= FOR Exp TO Exp DO Exp 
Exp ::= BREAK SEMICOLON 
Exp ::= ID LBRACK Exp RBRACK OF Exp 
Exp ::= WHILE Exp DO Exp 
Exp ::= NIL 
Exp ::= STRING 
Exp ::= Exp GE Exp 
Exp ::= Exp GT Exp 
Exp ::= Exp LE Exp 
Exp ::= Exp LT Exp 
Exp ::= Exp NEQ Exp 
Exp ::= Exp EQ Exp 
Exp ::= Var ASSIGN Exp 
Exp ::= MINUS Exp 
Exp ::= Exp DIVIDE Exp 
Exp ::= Exp TIMES Exp 
Exp ::= Exp PLUS Exp 
Exp ::= Exp MINUS Exp 
Exp ::= INT 
Exp ::= Var 
Exp ::= error 
$START ::= Exp EOF 

===== Viable Prefix Recognizer =====
START lalr_state [0]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp EQ Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp GE Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) INT , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) MINUS Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp LE Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= (*) Var DOT ID , {EOF LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
  [Exp ::= (*) error , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp TIMES Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp NEQ Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) STRING , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= (*) ID , {EOF LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
  [Exp ::= (*) Exp MINUS Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp GT Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [If ::= (*) IF Exp THEN Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Var , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp LT Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) NIL , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) If , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {EOF LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
  [$START ::= (*) Exp EOF , {EOF }]
}
transition on BREAK to state [14]
transition on Var to state [13]
transition on LPAREN to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [7]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [1]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) INT , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= MINUS (*) Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Var ::= (*) Var DOT ID , {EOF SEMICOLON RPAREN LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO }]
  [Exp ::= (*) error , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) STRING , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Var ::= (*) ID , {EOF SEMICOLON RPAREN LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO }]
  [Exp ::= (*) Exp MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [If ::= (*) IF Exp THEN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Var , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) NIL , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) If , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {EOF SEMICOLON RPAREN LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO }]
}
transition on BREAK to state [14]
transition on Var to state [13]
transition on LPAREN to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [68]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [2]: {
  [Exp ::= INT (*) , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
}

-------------------
lalr_state [3]: {
  [Exp ::= (*) Exp PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) BREAK SEMICOLON , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) INT , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= WHILE (*) Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) WHILE Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Var ::= (*) Var DOT ID , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN DO }]
  [Exp ::= (*) error , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) STRING , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Var ::= (*) ID , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN DO }]
  [Exp ::= (*) Exp MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Var ASSIGN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [If ::= (*) IF Exp THEN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Var , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) NIL , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) If , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN DO }]
}
transition on BREAK to state [14]
transition on Var to state [13]
transition on LPAREN to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [65]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [4]: {
  [Exp ::= If (*) , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
}

-------------------
lalr_state [5]: {
  [Exp ::= (*) Exp PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) Exp EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) Exp GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) BREAK SEMICOLON , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) INT , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) Exp LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) WHILE Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Var ::= (*) Var DOT ID , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN TO }]
  [Exp ::= (*) error , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) Exp TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) Exp NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= FOR (*) Exp TO Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) STRING , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Var ::= (*) ID , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN TO }]
  [Exp ::= (*) Exp MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) Var ASSIGN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) Exp GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [If ::= (*) IF Exp THEN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) Var , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) Exp DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) Exp LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) NIL , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= (*) If , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN TO }]
}
transition on BREAK to state [14]
transition on Var to state [13]
transition on LPAREN to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [60]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [6]: {
  [Exp ::= NIL (*) , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
}

-------------------
lalr_state [7]: {
  [Exp ::= Exp (*) GT Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) NEQ Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) PLUS Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) LE Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) EQ Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) MINUS Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) GE Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) LT Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) TIMES Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [$START ::= Exp (*) EOF , {EOF }]
}
transition on LT to state [29]
transition on TIMES to state [28]
transition on GT to state [27]
transition on LE to state [26]
transition on EQ to state [25]
transition on PLUS to state [24]
transition on EOF to state [59]
transition on NEQ to state [23]
transition on GE to state [22]
transition on DIVIDE to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [8]: {
  [Exp ::= STRING (*) , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
}

-------------------
lalr_state [9]: {
  [Exp ::= (*) Exp PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) Exp EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) Exp GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) BREAK SEMICOLON , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [If ::= IF (*) Exp THEN Exp ELSE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) INT , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) Exp LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) WHILE Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Var ::= (*) Var DOT ID , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN }]
  [Exp ::= (*) error , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) Exp TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) Exp NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) STRING , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Var ::= (*) ID , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN }]
  [Exp ::= (*) Exp MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) Var ASSIGN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) Exp GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [If ::= IF (*) Exp THEN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [If ::= (*) IF Exp THEN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) Var , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) Exp DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) Exp LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) NIL , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= (*) If , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN }]
}
transition on BREAK to state [14]
transition on Var to state [13]
transition on LPAREN to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [54]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [10]: {
  [Var ::= ID (*) , {EOF SEMICOLON RPAREN LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO }]
  [Exp ::= ID (*) LBRACK Exp RBRACK OF Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
}
transition on LBRACK to state [49]

-------------------
lalr_state [11]: {
  [Exp ::= error (*) , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
}

-------------------
lalr_state [12]: {
  [Exp ::= (*) Exp PLUS Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp EQ Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp GE Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) BREAK SEMICOLON , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [ExpSeq ::= (*) Exp Rest , {RPAREN }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) INT , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) MINUS Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp LE Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= LPAREN (*) ExpSeq RPAREN , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) WHILE Exp DO Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= (*) Var DOT ID , {SEMICOLON RPAREN LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
  [Exp ::= (*) error , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp TIMES Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp NEQ Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) STRING , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [ExpSeq ::= (*) , {RPAREN }]
  [Var ::= (*) ID , {SEMICOLON RPAREN LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
  [Exp ::= (*) Exp MINUS Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Var ASSIGN Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp GT Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [If ::= (*) IF Exp THEN Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Var , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp DIVIDE Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp LT Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) NIL , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) If , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {SEMICOLON RPAREN LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
}
transition on BREAK to state [14]
transition on Var to state [13]
transition on LPAREN to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [44]
transition on ExpSeq to state [43]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [13]: {
  [Exp ::= Var (*) , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Var ::= Var (*) LBRACK Exp RBRACK , {EOF SEMICOLON RPAREN LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO }]
  [Exp ::= Var (*) ASSIGN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Var ::= Var (*) DOT ID , {EOF SEMICOLON RPAREN LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO }]
}
transition on ASSIGN to state [18]
transition on DOT to state [17]
transition on LBRACK to state [16]

-------------------
lalr_state [14]: {
  [Exp ::= BREAK (*) SEMICOLON , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
}
transition on SEMICOLON to state [15]

-------------------
lalr_state [15]: {
  [Exp ::= BREAK SEMICOLON (*) , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
}

-------------------
lalr_state [16]: {
  [Exp ::= (*) Exp PLUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp EQ Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp GE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) BREAK SEMICOLON , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) INT , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) MINUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp LE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) WHILE Exp DO Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= (*) Var DOT ID , {LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
  [Exp ::= (*) error , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp TIMES Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp NEQ Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) STRING , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= (*) ID , {LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
  [Exp ::= (*) Exp MINUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Var ASSIGN Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp GT Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [If ::= (*) IF Exp THEN Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Var , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp DIVIDE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp LT Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) NIL , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) If , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= Var LBRACK (*) Exp RBRACK , {EOF SEMICOLON RPAREN LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
}
transition on BREAK to state [14]
transition on Var to state [13]
transition on LPAREN to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [41]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [17]: {
  [Var ::= Var DOT (*) ID , {EOF SEMICOLON RPAREN LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO }]
}
transition on ID to state [40]

-------------------
lalr_state [18]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) INT , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Var ::= (*) Var DOT ID , {EOF SEMICOLON RPAREN LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO }]
  [Exp ::= (*) error , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) STRING , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Var ::= (*) ID , {EOF SEMICOLON RPAREN LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO }]
  [Exp ::= Var ASSIGN (*) Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [If ::= (*) IF Exp THEN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Var , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) NIL , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) If , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {EOF SEMICOLON RPAREN LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO }]
}
transition on BREAK to state [14]
transition on Var to state [13]
transition on LPAREN to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [19]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [19]: {
  [Exp ::= Exp (*) GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Var ASSIGN Exp (*) , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
}
transition on LT to state [29]
transition on TIMES to state [28]
transition on GT to state [27]
transition on LE to state [26]
transition on EQ to state [25]
transition on PLUS to state [24]
transition on NEQ to state [23]
transition on GE to state [22]
transition on DIVIDE to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [20]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) INT , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Var ::= (*) Var DOT ID , {EOF SEMICOLON RPAREN LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO }]
  [Exp ::= (*) error , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) STRING , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Var ::= (*) ID , {EOF SEMICOLON RPAREN LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO }]
  [Exp ::= Exp MINUS (*) Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [If ::= (*) IF Exp THEN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Var , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) NIL , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) If , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {EOF SEMICOLON RPAREN LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO }]
}
transition on BREAK to state [14]
transition on Var to state [13]
transition on LPAREN to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [39]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [21]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) INT , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Var ::= (*) Var DOT ID , {EOF SEMICOLON RPAREN LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO }]
  [Exp ::= (*) error , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) STRING , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Var ::= (*) ID , {EOF SEMICOLON RPAREN LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO }]
  [Exp ::= (*) Exp MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [If ::= (*) IF Exp THEN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp DIVIDE (*) Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Var , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) NIL , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) If , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {EOF SEMICOLON RPAREN LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO }]
}
transition on BREAK to state [14]
transition on Var to state [13]
transition on LPAREN to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [38]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [22]: {
  [Exp ::= Exp GE (*) Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) INT , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Var ::= (*) Var DOT ID , {EOF SEMICOLON RPAREN LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO }]
  [Exp ::= (*) error , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) STRING , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Var ::= (*) ID , {EOF SEMICOLON RPAREN LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO }]
  [Exp ::= (*) Exp MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [If ::= (*) IF Exp THEN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Var , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) NIL , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) If , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {EOF SEMICOLON RPAREN LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO }]
}
transition on BREAK to state [14]
transition on Var to state [13]
transition on LPAREN to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [37]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [23]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) INT , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Var ::= (*) Var DOT ID , {EOF SEMICOLON RPAREN LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO }]
  [Exp ::= (*) error , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp NEQ (*) Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) STRING , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Var ::= (*) ID , {EOF SEMICOLON RPAREN LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO }]
  [Exp ::= (*) Exp MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [If ::= (*) IF Exp THEN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Var , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) NIL , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) If , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {EOF SEMICOLON RPAREN LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO }]
}
transition on BREAK to state [14]
transition on Var to state [13]
transition on LPAREN to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [36]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [24]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) INT , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Var ::= (*) Var DOT ID , {EOF SEMICOLON RPAREN LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO }]
  [Exp ::= (*) error , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) STRING , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Var ::= (*) ID , {EOF SEMICOLON RPAREN LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO }]
  [Exp ::= (*) Exp MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [If ::= (*) IF Exp THEN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Var , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) NIL , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) If , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {EOF SEMICOLON RPAREN LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO }]
  [Exp ::= Exp PLUS (*) Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
}
transition on BREAK to state [14]
transition on Var to state [13]
transition on LPAREN to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [35]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [25]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) INT , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Var ::= (*) Var DOT ID , {EOF SEMICOLON RPAREN LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO }]
  [Exp ::= (*) error , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) STRING , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Var ::= (*) ID , {EOF SEMICOLON RPAREN LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO }]
  [Exp ::= (*) Exp MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [If ::= (*) IF Exp THEN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Var , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) NIL , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) If , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {EOF SEMICOLON RPAREN LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO }]
  [Exp ::= Exp EQ (*) Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
}
transition on BREAK to state [14]
transition on Var to state [13]
transition on LPAREN to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [34]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [26]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) INT , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp LE (*) Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Var ::= (*) Var DOT ID , {EOF SEMICOLON RPAREN LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO }]
  [Exp ::= (*) error , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) STRING , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Var ::= (*) ID , {EOF SEMICOLON RPAREN LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO }]
  [Exp ::= (*) Exp MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [If ::= (*) IF Exp THEN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Var , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) NIL , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) If , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {EOF SEMICOLON RPAREN LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO }]
}
transition on BREAK to state [14]
transition on Var to state [13]
transition on LPAREN to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [33]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [27]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) INT , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Var ::= (*) Var DOT ID , {EOF SEMICOLON RPAREN LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO }]
  [Exp ::= (*) error , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) STRING , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Var ::= (*) ID , {EOF SEMICOLON RPAREN LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO }]
  [Exp ::= (*) Exp MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp GT (*) Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [If ::= (*) IF Exp THEN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Var , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) NIL , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) If , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {EOF SEMICOLON RPAREN LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO }]
}
transition on BREAK to state [14]
transition on Var to state [13]
transition on LPAREN to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [32]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [28]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) INT , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Var ::= (*) Var DOT ID , {EOF SEMICOLON RPAREN LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO }]
  [Exp ::= Exp TIMES (*) Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) error , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) STRING , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Var ::= (*) ID , {EOF SEMICOLON RPAREN LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO }]
  [Exp ::= (*) Exp MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [If ::= (*) IF Exp THEN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Var , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) NIL , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) If , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {EOF SEMICOLON RPAREN LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO }]
}
transition on BREAK to state [14]
transition on Var to state [13]
transition on LPAREN to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [31]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [29]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) INT , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Var ::= (*) Var DOT ID , {EOF SEMICOLON RPAREN LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO }]
  [Exp ::= (*) error , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) STRING , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Var ::= (*) ID , {EOF SEMICOLON RPAREN LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO }]
  [Exp ::= (*) Exp MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [If ::= (*) IF Exp THEN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp LT (*) Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Var , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) NIL , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) If , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {EOF SEMICOLON RPAREN LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO }]
}
transition on BREAK to state [14]
transition on Var to state [13]
transition on LPAREN to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [30]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [30]: {
  [Exp ::= Exp (*) GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp LT Exp (*) , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
}
transition on LT to state [29]
transition on TIMES to state [28]
transition on GT to state [27]
transition on LE to state [26]
transition on EQ to state [25]
transition on PLUS to state [24]
transition on NEQ to state [23]
transition on GE to state [22]
transition on DIVIDE to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [31]: {
  [Exp ::= Exp (*) GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp TIMES Exp (*) , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
}
transition on LT to state [29]
transition on TIMES to state [28]
transition on GT to state [27]
transition on LE to state [26]
transition on EQ to state [25]
transition on PLUS to state [24]
transition on NEQ to state [23]
transition on GE to state [22]
transition on DIVIDE to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [32]: {
  [Exp ::= Exp (*) GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp GT Exp (*) , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
}
transition on LT to state [29]
transition on TIMES to state [28]
transition on GT to state [27]
transition on LE to state [26]
transition on EQ to state [25]
transition on PLUS to state [24]
transition on NEQ to state [23]
transition on GE to state [22]
transition on DIVIDE to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [33]: {
  [Exp ::= Exp (*) GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp LE Exp (*) , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
}
transition on LT to state [29]
transition on TIMES to state [28]
transition on GT to state [27]
transition on LE to state [26]
transition on EQ to state [25]
transition on PLUS to state [24]
transition on NEQ to state [23]
transition on GE to state [22]
transition on DIVIDE to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [34]: {
  [Exp ::= Exp (*) GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp EQ Exp (*) , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
}
transition on LT to state [29]
transition on TIMES to state [28]
transition on GT to state [27]
transition on LE to state [26]
transition on EQ to state [25]
transition on PLUS to state [24]
transition on NEQ to state [23]
transition on GE to state [22]
transition on DIVIDE to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [35]: {
  [Exp ::= Exp (*) GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp PLUS Exp (*) , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
}
transition on LT to state [29]
transition on TIMES to state [28]
transition on GT to state [27]
transition on LE to state [26]
transition on EQ to state [25]
transition on PLUS to state [24]
transition on NEQ to state [23]
transition on GE to state [22]
transition on DIVIDE to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [36]: {
  [Exp ::= Exp NEQ Exp (*) , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
}
transition on LT to state [29]
transition on TIMES to state [28]
transition on GT to state [27]
transition on LE to state [26]
transition on EQ to state [25]
transition on PLUS to state [24]
transition on NEQ to state [23]
transition on GE to state [22]
transition on DIVIDE to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [37]: {
  [Exp ::= Exp (*) GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp GE Exp (*) , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
}
transition on LT to state [29]
transition on TIMES to state [28]
transition on GT to state [27]
transition on LE to state [26]
transition on EQ to state [25]
transition on PLUS to state [24]
transition on NEQ to state [23]
transition on GE to state [22]
transition on DIVIDE to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [38]: {
  [Exp ::= Exp (*) GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp DIVIDE Exp (*) , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
}
transition on LT to state [29]
transition on TIMES to state [28]
transition on GT to state [27]
transition on LE to state [26]
transition on EQ to state [25]
transition on PLUS to state [24]
transition on NEQ to state [23]
transition on GE to state [22]
transition on DIVIDE to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [39]: {
  [Exp ::= Exp (*) GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp MINUS Exp (*) , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
}
transition on LT to state [29]
transition on TIMES to state [28]
transition on GT to state [27]
transition on LE to state [26]
transition on EQ to state [25]
transition on PLUS to state [24]
transition on NEQ to state [23]
transition on GE to state [22]
transition on DIVIDE to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [40]: {
  [Var ::= Var DOT ID (*) , {EOF SEMICOLON RPAREN LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO }]
}

-------------------
lalr_state [41]: {
  [Exp ::= Exp (*) GT Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) NEQ Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) PLUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) LE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) EQ Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) DIVIDE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) MINUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= Var LBRACK Exp (*) RBRACK , {EOF SEMICOLON RPAREN LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO }]
  [Exp ::= Exp (*) GE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) LT Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) TIMES Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
}
transition on LT to state [29]
transition on TIMES to state [28]
transition on RBRACK to state [42]
transition on GT to state [27]
transition on LE to state [26]
transition on EQ to state [25]
transition on PLUS to state [24]
transition on NEQ to state [23]
transition on GE to state [22]
transition on DIVIDE to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [42]: {
  [Var ::= Var LBRACK Exp RBRACK (*) , {EOF SEMICOLON RPAREN LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO }]
}

-------------------
lalr_state [43]: {
  [Exp ::= LPAREN ExpSeq (*) RPAREN , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
}
transition on RPAREN to state [48]

-------------------
lalr_state [44]: {
  [Exp ::= Exp (*) GT Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) NEQ Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) PLUS Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Rest ::= (*) , {RPAREN }]
  [ExpSeq ::= Exp (*) Rest , {RPAREN }]
  [Exp ::= Exp (*) LE Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) EQ Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) DIVIDE Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) MINUS Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Rest ::= (*) SEMICOLON ExpSeq , {RPAREN }]
  [Exp ::= Exp (*) GE Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) LT Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) TIMES Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
}
transition on LT to state [29]
transition on TIMES to state [28]
transition on SEMICOLON to state [46]
transition on GT to state [27]
transition on LE to state [26]
transition on Rest to state [45]
transition on EQ to state [25]
transition on PLUS to state [24]
transition on NEQ to state [23]
transition on GE to state [22]
transition on DIVIDE to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [45]: {
  [ExpSeq ::= Exp Rest (*) , {RPAREN }]
}

-------------------
lalr_state [46]: {
  [Exp ::= (*) Exp PLUS Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp EQ Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp GE Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) BREAK SEMICOLON , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [ExpSeq ::= (*) Exp Rest , {RPAREN }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) INT , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) MINUS Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp LE Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) WHILE Exp DO Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= (*) Var DOT ID , {SEMICOLON RPAREN LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
  [Exp ::= (*) error , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp TIMES Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp NEQ Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) STRING , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [ExpSeq ::= (*) , {RPAREN }]
  [Var ::= (*) ID , {SEMICOLON RPAREN LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
  [Exp ::= (*) Exp MINUS Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Var ASSIGN Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp GT Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [If ::= (*) IF Exp THEN Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Var , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp DIVIDE Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp LT Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) NIL , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) If , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Rest ::= SEMICOLON (*) ExpSeq , {RPAREN }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {SEMICOLON RPAREN LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
}
transition on BREAK to state [14]
transition on Var to state [13]
transition on LPAREN to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [44]
transition on ExpSeq to state [47]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [47]: {
  [Rest ::= SEMICOLON ExpSeq (*) , {RPAREN }]
}

-------------------
lalr_state [48]: {
  [Exp ::= LPAREN ExpSeq RPAREN (*) , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
}

-------------------
lalr_state [49]: {
  [Exp ::= (*) Exp PLUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp EQ Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp GE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) BREAK SEMICOLON , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) INT , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) MINUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp LE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) WHILE Exp DO Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= (*) Var DOT ID , {LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
  [Exp ::= (*) error , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp TIMES Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp NEQ Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) STRING , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= (*) ID , {LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
  [Exp ::= (*) Exp MINUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Var ASSIGN Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= ID LBRACK (*) Exp RBRACK OF Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp GT Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [If ::= (*) IF Exp THEN Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Var , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp DIVIDE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) Exp LT Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) NIL , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= (*) If , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN }]
}
transition on BREAK to state [14]
transition on Var to state [13]
transition on LPAREN to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [50]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [50]: {
  [Exp ::= Exp (*) GT Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) NEQ Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) PLUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= ID LBRACK Exp (*) RBRACK OF Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) LE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) EQ Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) DIVIDE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) MINUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) GE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) LT Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
  [Exp ::= Exp (*) TIMES Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE }]
}
transition on LT to state [29]
transition on TIMES to state [28]
transition on RBRACK to state [51]
transition on GT to state [27]
transition on LE to state [26]
transition on EQ to state [25]
transition on PLUS to state [24]
transition on NEQ to state [23]
transition on GE to state [22]
transition on DIVIDE to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [51]: {
  [Exp ::= ID LBRACK Exp RBRACK (*) OF Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
}
transition on OF to state [52]

-------------------
lalr_state [52]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) INT , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Var ::= (*) Var DOT ID , {EOF SEMICOLON RPAREN LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO }]
  [Exp ::= (*) error , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) STRING , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Var ::= (*) ID , {EOF SEMICOLON RPAREN LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO }]
  [Exp ::= ID LBRACK Exp RBRACK OF (*) Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [If ::= (*) IF Exp THEN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Var , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) NIL , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) If , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {EOF SEMICOLON RPAREN LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO }]
}
transition on BREAK to state [14]
transition on Var to state [13]
transition on LPAREN to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [53]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [53]: {
  [Exp ::= Exp (*) GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= ID LBRACK Exp RBRACK OF Exp (*) , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
}
transition on LT to state [29]
transition on TIMES to state [28]
transition on GT to state [27]
transition on LE to state [26]
transition on EQ to state [25]
transition on PLUS to state [24]
transition on NEQ to state [23]
transition on GE to state [22]
transition on DIVIDE to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [54]: {
  [Exp ::= Exp (*) GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= Exp (*) NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= Exp (*) PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= Exp (*) LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [If ::= IF Exp (*) THEN Exp ELSE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= Exp (*) DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= Exp (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= Exp (*) GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [Exp ::= Exp (*) LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
  [If ::= IF Exp (*) THEN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN }]
}
transition on LT to state [29]
transition on TIMES to state [28]
transition on GT to state [27]
transition on LE to state [26]
transition on EQ to state [25]
transition on PLUS to state [24]
transition on NEQ to state [23]
transition on THEN to state [55]
transition on GE to state [22]
transition on DIVIDE to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [55]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [If ::= IF Exp THEN (*) Exp ELSE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) INT , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Var ::= (*) Var DOT ID , {EOF SEMICOLON RPAREN LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO }]
  [Exp ::= (*) error , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) STRING , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Var ::= (*) ID , {EOF SEMICOLON RPAREN LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO }]
  [Exp ::= (*) Exp MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [If ::= IF Exp THEN (*) Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [If ::= (*) IF Exp THEN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Var , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) NIL , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) If , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {EOF SEMICOLON RPAREN LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO }]
}
transition on BREAK to state [14]
transition on Var to state [13]
transition on LPAREN to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [56]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [56]: {
  [Exp ::= Exp (*) GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [If ::= IF Exp THEN Exp (*) ELSE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [If ::= IF Exp THEN Exp (*) , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
}
transition on LT to state [29]
transition on TIMES to state [28]
transition on GT to state [27]
transition on ELSE to state [57]
transition on LE to state [26]
transition on EQ to state [25]
transition on PLUS to state [24]
transition on NEQ to state [23]
transition on GE to state [22]
transition on DIVIDE to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [57]: {
  [If ::= IF Exp THEN Exp ELSE (*) Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) INT , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Var ::= (*) Var DOT ID , {EOF SEMICOLON RPAREN LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO }]
  [Exp ::= (*) error , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) STRING , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Var ::= (*) ID , {EOF SEMICOLON RPAREN LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO }]
  [Exp ::= (*) Exp MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [If ::= (*) IF Exp THEN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Var , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) NIL , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) If , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {EOF SEMICOLON RPAREN LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO }]
}
transition on BREAK to state [14]
transition on Var to state [13]
transition on LPAREN to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [58]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [58]: {
  [Exp ::= Exp (*) GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [If ::= IF Exp THEN Exp ELSE Exp (*) , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
}
transition on LT to state [29]
transition on TIMES to state [28]
transition on GT to state [27]
transition on LE to state [26]
transition on EQ to state [25]
transition on PLUS to state [24]
transition on NEQ to state [23]
transition on GE to state [22]
transition on DIVIDE to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [59]: {
  [$START ::= Exp EOF (*) , {EOF }]
}

-------------------
lalr_state [60]: {
  [Exp ::= Exp (*) GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= Exp (*) NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= Exp (*) PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= Exp (*) LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= Exp (*) EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= Exp (*) DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= Exp (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= FOR Exp (*) TO Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= Exp (*) LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
  [Exp ::= Exp (*) TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE TO }]
}
transition on LT to state [29]
transition on TIMES to state [28]
transition on GT to state [27]
transition on LE to state [26]
transition on EQ to state [25]
transition on PLUS to state [24]
transition on NEQ to state [23]
transition on TO to state [61]
transition on GE to state [22]
transition on DIVIDE to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [61]: {
  [Exp ::= (*) Exp PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) BREAK SEMICOLON , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) INT , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) WHILE Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Var ::= (*) Var DOT ID , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN DO }]
  [Exp ::= (*) error , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= FOR Exp TO (*) Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) STRING , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Var ::= (*) ID , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN DO }]
  [Exp ::= (*) Exp MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Var ASSIGN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [If ::= (*) IF Exp THEN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Var , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) Exp LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) NIL , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= (*) If , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN DO }]
}
transition on BREAK to state [14]
transition on Var to state [13]
transition on LPAREN to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [62]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [62]: {
  [Exp ::= Exp (*) GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= FOR Exp TO Exp (*) DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
}
transition on DO to state [63]
transition on LT to state [29]
transition on TIMES to state [28]
transition on GT to state [27]
transition on LE to state [26]
transition on EQ to state [25]
transition on PLUS to state [24]
transition on NEQ to state [23]
transition on GE to state [22]
transition on DIVIDE to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [63]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) INT , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Var ::= (*) Var DOT ID , {EOF SEMICOLON RPAREN LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO }]
  [Exp ::= FOR Exp TO Exp DO (*) Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) error , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) STRING , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Var ::= (*) ID , {EOF SEMICOLON RPAREN LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO }]
  [Exp ::= (*) Exp MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [If ::= (*) IF Exp THEN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Var , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) NIL , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) If , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {EOF SEMICOLON RPAREN LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO }]
}
transition on BREAK to state [14]
transition on Var to state [13]
transition on LPAREN to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [64]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [64]: {
  [Exp ::= Exp (*) GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= FOR Exp TO Exp DO Exp (*) , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
}
transition on LT to state [29]
transition on TIMES to state [28]
transition on GT to state [27]
transition on LE to state [26]
transition on EQ to state [25]
transition on PLUS to state [24]
transition on NEQ to state [23]
transition on GE to state [22]
transition on DIVIDE to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [65]: {
  [Exp ::= Exp (*) GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= WHILE Exp (*) DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
  [Exp ::= Exp (*) TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE DO }]
}
transition on DO to state [66]
transition on LT to state [29]
transition on TIMES to state [28]
transition on GT to state [27]
transition on LE to state [26]
transition on EQ to state [25]
transition on PLUS to state [24]
transition on NEQ to state [23]
transition on GE to state [22]
transition on DIVIDE to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [66]: {
  [Exp ::= (*) Exp PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) BREAK SEMICOLON , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [If ::= (*) IF Exp THEN Exp ELSE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) INT , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= WHILE Exp DO (*) Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) LPAREN ExpSeq RPAREN , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Var ::= (*) Var DOT ID , {EOF SEMICOLON RPAREN LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO }]
  [Exp ::= (*) error , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) STRING , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) FOR Exp TO Exp DO Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Var ::= (*) ID , {EOF SEMICOLON RPAREN LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO }]
  [Exp ::= (*) Exp MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [If ::= (*) IF Exp THEN Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Var , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) Exp LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) NIL , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= (*) If , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Var ::= (*) Var LBRACK Exp RBRACK , {EOF SEMICOLON RPAREN LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE ASSIGN THEN ELSE TO DO }]
}
transition on BREAK to state [14]
transition on Var to state [13]
transition on LPAREN to state [12]
transition on error to state [11]
transition on ID to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [67]
transition on NIL to state [6]
transition on FOR to state [5]
transition on If to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [67]: {
  [Exp ::= Exp (*) GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= WHILE Exp DO Exp (*) , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
}
transition on LT to state [29]
transition on TIMES to state [28]
transition on GT to state [27]
transition on LE to state [26]
transition on EQ to state [25]
transition on PLUS to state [24]
transition on NEQ to state [23]
transition on GE to state [22]
transition on DIVIDE to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [68]: {
  [Exp ::= Exp (*) GT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= MINUS Exp (*) , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) NEQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) PLUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) LE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) EQ Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) MINUS Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) GE Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) LT Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
  [Exp ::= Exp (*) TIMES Exp , {EOF SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE THEN ELSE TO DO }]
}
transition on LT to state [29]
transition on TIMES to state [28]
transition on GT to state [27]
transition on LE to state [26]
transition on EQ to state [25]
transition on PLUS to state [24]
transition on NEQ to state [23]
transition on GE to state [22]
transition on DIVIDE to state [21]
transition on MINUS to state [20]

-------------------
Closing files...
------- CUP v0.10g Parser Generation Summary -------
  0 errors and 31 warnings
  45 terminals, 17 non terminals, and 56 productions declared, 
  producing 69 unique parse states.
  6 terminals declared but not used.
  0 non terminals declared but not used.
  0 productions never reduced.
  2 conflicts detected (3 expected).
  Code written to "Grm.java", and "sym.java".
---------------------------------------------------- (v0.10g)
