
//----------------------------------------------------
// The following code was generated by CUP v0.10g
// Thu Mar 02 15:04:09 CST 2023
//----------------------------------------------------

package Parse;


public class Grm extends java_cup.runtime.lr_parser {

  /** constructor */
  public Grm() {super();}

  /** production table */
  protected static final short _production_table[][] = {
        {0, 2},     {1, 1},     {1, 1},     {1, 1},     {1, 3}, 
        {1, 3},     {1, 3},     {1, 3},     {1, 2},     {1, 3}, 
        {1, 3},     {1, 3},     {1, 3},     {1, 3},     {1, 3}, 
        {1, 3},     {1, 1},     {1, 4},     {1, 6},     {1, 2}, 
        {1, 6},     {1, 6},     {1, 5},     {1, 1},     {2, 4}, 
        {2, 6},     {4, 1},     {4, 4},     {4, 3},     {5, 1}, 
        {5, 3},     {5, 3},     {6, 0},     {6, 4},     {7, 1}, 
        {7, 1},     {7, 1},     {9, 3},     {10, 4},     {10, 6}, 
        {11, 6},     {11, 9}  };

  /** access to production table */
  public short[][] production_table() {return _production_table;}

  /** parse action table */
  protected static final short[][] _action_table = {
    /*0*/{1,11,2,10,3,8,4,4,16,2,29,9,32,3,33,6,36,12,40,13,-1,0},
    /*1*/{1,11,2,10,3,8,4,4,16,2,29,9,32,3,33,6,36,12,40,13,-1,0},
    /*2*/{1,11,2,10,3,8,4,4,16,2,29,9,32,3,33,6,36,12,40,13,-1,0},
    /*3*/{0,-4,11,-4,13,-4,15,-4,16,-4,17,-4,18,-4,19,-4,20,-4,21,-4,22,-4,23,-4,24,-4,30,-4,31,-4,34,-4,35,-4,38,-4,-1,0},
    /*4*/{0,-24,11,-24,13,-24,15,-24,16,-24,17,-24,18,-24,19,-24,20,-24,21,-24,22,-24,23,-24,24,-24,30,-24,31,-24,34,-24,35,-24,38,-24,-1,0},
    /*5*/{1,11,2,10,3,8,4,4,16,2,29,9,32,3,33,6,36,12,40,13,43,60,-1,0},
    /*6*/{0,57,15,23,16,19,17,27,18,20,19,24,20,22,21,28,22,25,23,26,24,21,-1,0},
    /*7*/{0,-17,11,-17,13,-17,15,-17,16,-17,17,-17,18,-17,19,-17,20,-17,21,-17,22,-17,23,-17,24,-17,30,-17,31,-17,34,-17,35,-17,38,-17,-1,0},
    /*8*/{1,11,2,10,3,8,4,4,16,2,29,9,32,3,33,6,36,12,40,13,-1,0},
    /*9*/{0,-27,10,-27,11,-27,12,47,13,-27,14,-27,15,-27,16,-27,17,-27,18,-27,19,-27,20,-27,21,-27,22,-27,23,-27,24,-27,27,-27,30,-27,31,-27,34,-27,35,-27,38,-27,-1,0},
    /*10*/{0,-2,11,-2,13,-2,15,-2,16,-2,17,-2,18,-2,19,-2,20,-2,21,-2,22,-2,23,-2,24,-2,30,-2,31,-2,34,-2,35,-2,38,-2,-1,0},
    /*11*/{-1,0},
    /*12*/{7,42,-1,0},
    /*13*/{0,-3,10,15,11,-3,13,-3,14,16,15,-3,16,-3,17,-3,18,-3,19,-3,20,-3,21,-3,22,-3,23,-3,24,-3,27,17,30,-3,31,-3,34,-3,35,-3,38,-3,-1,0},
    /*14*/{1,11,2,10,3,8,4,4,16,2,29,9,32,3,33,6,36,12,40,13,-1,0},
    /*15*/{2,39,-1,0},
    /*16*/{1,11,2,10,3,8,4,4,16,2,29,9,32,3,33,6,36,12,40,13,-1,0},
    /*17*/{0,-10,11,-10,13,-10,15,23,16,19,17,27,18,20,19,24,20,22,21,28,22,25,23,26,24,21,30,-10,31,-10,34,-10,35,-10,38,-10,-1,0},
    /*18*/{1,11,2,10,3,8,4,4,16,2,29,9,32,3,33,6,36,12,40,13,-1,0},
    /*19*/{1,11,2,10,3,8,4,4,16,2,29,9,32,3,33,6,36,12,40,13,-1,0},
    /*20*/{1,11,2,10,3,8,4,4,16,2,29,9,32,3,33,6,36,12,40,13,-1,0},
    /*21*/{1,11,2,10,3,8,4,4,16,2,29,9,32,3,33,6,36,12,40,13,-1,0},
    /*22*/{1,11,2,10,3,8,4,4,16,2,29,9,32,3,33,6,36,12,40,13,-1,0},
    /*23*/{1,11,2,10,3,8,4,4,16,2,29,9,32,3,33,6,36,12,40,13,-1,0},
    /*24*/{1,11,2,10,3,8,4,4,16,2,29,9,32,3,33,6,36,12,40,13,-1,0},
    /*25*/{1,11,2,10,3,8,4,4,16,2,29,9,32,3,33,6,36,12,40,13,-1,0},
    /*26*/{1,11,2,10,3,8,4,4,16,2,29,9,32,3,33,6,36,12,40,13,-1,0},
    /*27*/{1,11,2,10,3,8,4,4,16,2,29,9,32,3,33,6,36,12,40,13,-1,0},
    /*28*/{0,-13,11,-13,13,-13,15,23,16,19,17,27,18,20,30,-13,31,-13,34,-13,35,-13,38,-13,-1,0},
    /*29*/{0,-7,11,-7,13,-7,15,-7,16,-7,17,-7,18,-7,19,-7,20,-7,21,-7,22,-7,23,-7,24,-7,30,-7,31,-7,34,-7,35,-7,38,-7,-1,0},
    /*30*/{0,-15,11,-15,13,-15,15,23,16,19,17,27,18,20,30,-15,31,-15,34,-15,35,-15,38,-15,-1,0},
    /*31*/{0,-14,11,-14,13,-14,15,23,16,19,17,27,18,20,30,-14,31,-14,34,-14,35,-14,38,-14,-1,0},
    /*32*/{0,-11,11,-11,13,-11,15,23,16,19,17,27,18,20,30,-11,31,-11,34,-11,35,-11,38,-11,-1,0},
    /*33*/{0,-6,11,-6,13,-6,15,-6,16,-6,17,27,18,20,19,-6,20,-6,21,-6,22,-6,23,-6,24,-6,30,-6,31,-6,34,-6,35,-6,38,-6,-1,0},
    /*34*/{0,-12,11,-12,13,-12,15,23,16,19,17,27,18,20,30,-12,31,-12,34,-12,35,-12,38,-12,-1,0},
    /*35*/{0,-16,11,-16,13,-16,15,23,16,19,17,27,18,20,30,-16,31,-16,34,-16,35,-16,38,-16,-1,0},
    /*36*/{0,-8,11,-8,13,-8,15,-8,16,-8,17,-8,18,-8,19,-8,20,-8,21,-8,22,-8,23,-8,24,-8,30,-8,31,-8,34,-8,35,-8,38,-8,-1,0},
    /*37*/{0,-5,11,-5,13,-5,15,-5,16,-5,17,27,18,20,19,-5,20,-5,21,-5,22,-5,23,-5,24,-5,30,-5,31,-5,34,-5,35,-5,38,-5,-1,0},
    /*38*/{0,-29,10,-29,11,-29,13,-29,14,-29,15,-29,16,-29,17,-29,18,-29,19,-29,20,-29,21,-29,22,-29,23,-29,24,-29,27,-29,30,-29,31,-29,34,-29,35,-29,38,-29,-1,0},
    /*39*/{11,41,15,23,16,19,17,27,18,20,19,24,20,22,21,28,22,25,23,26,24,21,-1,0},
    /*40*/{0,-28,10,-28,11,-28,13,-28,14,-28,15,-28,16,-28,17,-28,18,-28,19,-28,20,-28,21,-28,22,-28,23,-28,24,-28,27,-28,30,-28,31,-28,34,-28,35,-28,38,-28,-1,0},
    /*41*/{0,-20,11,-20,13,-20,15,-20,16,-20,17,-20,18,-20,19,-20,20,-20,21,-20,22,-20,23,-20,24,-20,30,-20,31,-20,34,-20,35,-20,38,-20,-1,0},
    /*42*/{37,44,-1,0},
    /*43*/{1,11,2,10,3,8,4,4,16,2,29,9,32,3,33,6,36,12,40,13,-1,0},
    /*44*/{15,23,16,19,17,27,18,20,19,24,20,22,21,28,22,25,23,26,24,21,38,46,-1,0},
    /*45*/{0,-23,11,-23,13,-23,15,-23,16,-23,17,-23,18,-23,19,-23,20,-23,21,-23,22,-23,23,-23,24,-23,30,-23,31,-23,34,-23,35,-23,38,-23,-1,0},
    /*46*/{1,11,2,10,3,8,4,4,16,2,29,9,32,3,33,6,36,12,40,13,-1,0},
    /*47*/{13,49,15,23,16,19,17,27,18,20,19,24,20,22,21,28,22,25,23,26,24,21,-1,0},
    /*48*/{39,50,-1,0},
    /*49*/{1,11,2,10,3,8,4,4,16,2,29,9,32,3,33,6,36,12,40,13,-1,0},
    /*50*/{0,-19,11,-19,13,-19,15,23,16,19,17,27,18,20,19,24,20,22,21,28,22,25,23,26,24,21,30,-19,31,-19,34,-19,35,-19,38,-19,-1,0},
    /*51*/{15,23,16,19,17,27,18,20,19,24,20,22,21,28,22,25,23,26,24,21,30,53,-1,0},
    /*52*/{1,11,2,10,3,8,4,4,16,2,29,9,32,3,33,6,36,12,40,13,-1,0},
    /*53*/{0,-25,11,-25,13,-25,15,23,16,19,17,27,18,20,19,24,20,22,21,28,22,25,23,26,24,21,30,-25,31,55,34,-25,35,-25,38,-25,-1,0},
    /*54*/{1,11,2,10,3,8,4,4,16,2,29,9,32,3,33,6,36,12,40,13,-1,0},
    /*55*/{0,-26,11,-26,13,-26,15,23,16,19,17,27,18,20,19,24,20,22,21,28,22,25,23,26,24,21,30,-26,31,-26,34,-26,35,-26,38,-26,-1,0},
    /*56*/{0,-1,-1,0},
    /*57*/{34,83,-1,0},
    /*58*/{15,23,16,19,17,27,18,20,19,24,20,22,21,28,22,25,23,26,24,21,34,79,-1,0},
    /*59*/{2,61,-1,0},
    /*60*/{6,62,27,63,-1,0},
    /*61*/{2,65,12,66,28,68,-1,0},
    /*62*/{1,11,2,10,3,8,4,4,16,2,29,9,32,3,33,6,36,12,40,13,-1,0},
    /*63*/{15,23,16,19,17,27,18,20,19,24,20,22,21,28,22,25,23,26,24,21,34,-39,-1,0},
    /*64*/{27,-30,-1,0},
    /*65*/{2,73,13,-33,-1,0},
    /*66*/{27,71,-1,0},
    /*67*/{39,69,-1,0},
    /*68*/{2,70,-1,0},
    /*69*/{27,-31,-1,0},
    /*70*/{1,11,2,10,3,8,4,4,16,2,29,9,32,3,33,6,36,12,40,13,-1,0},
    /*71*/{15,23,16,19,17,27,18,20,19,24,20,22,21,28,22,25,23,26,24,21,34,-40,-1,0},
    /*72*/{6,76,-1,0},
    /*73*/{13,75,-1,0},
    /*74*/{27,-32,-1,0},
    /*75*/{2,77,-1,0},
    /*76*/{2,73,13,-33,-1,0},
    /*77*/{13,-34,-1,0},
    /*78*/{1,11,2,10,3,8,4,4,16,2,29,9,32,3,33,6,36,12,40,13,-1,0},
    /*79*/{15,23,16,19,17,27,18,20,19,24,20,22,21,28,22,25,23,26,24,21,35,81,-1,0},
    /*80*/{1,11,2,10,3,8,4,4,16,2,29,9,32,3,33,6,36,12,40,13,-1,0},
    /*81*/{0,-21,11,-21,13,-21,15,23,16,19,17,27,18,20,19,24,20,22,21,28,22,25,23,26,24,21,30,-21,31,-21,34,-21,35,-21,38,-21,-1,0},
    /*82*/{1,11,2,10,3,8,4,4,16,2,29,9,32,3,33,6,36,12,40,13,-1,0},
    /*83*/{15,23,16,19,17,27,18,20,19,24,20,22,21,28,22,25,23,26,24,21,35,85,-1,0},
    /*84*/{1,11,2,10,3,8,4,4,16,2,29,9,32,3,33,6,36,12,40,13,-1,0},
    /*85*/{0,-22,11,-22,13,-22,15,23,16,19,17,27,18,20,19,24,20,22,21,28,22,25,23,26,24,21,30,-22,31,-22,34,-22,35,-22,38,-22,-1,0},
    /*86*/{15,23,16,19,17,27,18,20,19,24,20,22,21,28,22,25,23,26,24,21,35,88,-1,0},
    /*87*/{1,11,2,10,3,8,4,4,16,2,29,9,32,3,33,6,36,12,40,13,-1,0},
    /*88*/{0,-18,11,-18,13,-18,15,23,16,19,17,27,18,20,19,24,20,22,21,28,22,25,23,26,24,21,30,-18,31,-18,34,-18,35,-18,38,-18,-1,0},
    /*89*/{0,-9,11,-9,13,-9,15,-9,16,-9,17,-9,18,-9,19,-9,20,-9,21,-9,22,-9,23,-9,24,-9,30,-9,31,-9,34,-9,35,-9,38,-9,-1,0},
  };

  /** access to parse action table */
  public short[][] action_table() {return _action_table;}

  /** reduce_goto table */
  protected static final short[][] _reduce_table = {
    /*0*/{1,6,2,4,4,13,-1,-1},
    /*1*/{1,89,2,4,4,13,-1,-1},
    /*2*/{1,86,2,4,4,13,-1,-1},
    /*3*/{-1,-1},
    /*4*/{-1,-1},
    /*5*/{1,58,2,4,4,13,10,57,-1,-1},
    /*6*/{-1,-1},
    /*7*/{-1,-1},
    /*8*/{1,51,2,4,4,13,-1,-1},
    /*9*/{-1,-1},
    /*10*/{-1,-1},
    /*11*/{8,42,-1,-1},
    /*12*/{-1,-1},
    /*13*/{-1,-1},
    /*14*/{1,39,2,4,4,13,-1,-1},
    /*15*/{-1,-1},
    /*16*/{1,17,2,4,4,13,-1,-1},
    /*17*/{-1,-1},
    /*18*/{1,37,2,4,4,13,-1,-1},
    /*19*/{1,36,2,4,4,13,-1,-1},
    /*20*/{1,35,2,4,4,13,-1,-1},
    /*21*/{1,34,2,4,4,13,-1,-1},
    /*22*/{1,33,2,4,4,13,-1,-1},
    /*23*/{1,32,2,4,4,13,-1,-1},
    /*24*/{1,31,2,4,4,13,-1,-1},
    /*25*/{1,30,2,4,4,13,-1,-1},
    /*26*/{1,29,2,4,4,13,-1,-1},
    /*27*/{1,28,2,4,4,13,-1,-1},
    /*28*/{-1,-1},
    /*29*/{-1,-1},
    /*30*/{-1,-1},
    /*31*/{-1,-1},
    /*32*/{-1,-1},
    /*33*/{-1,-1},
    /*34*/{-1,-1},
    /*35*/{-1,-1},
    /*36*/{-1,-1},
    /*37*/{-1,-1},
    /*38*/{-1,-1},
    /*39*/{-1,-1},
    /*40*/{-1,-1},
    /*41*/{-1,-1},
    /*42*/{-1,-1},
    /*43*/{1,44,2,4,4,13,-1,-1},
    /*44*/{-1,-1},
    /*45*/{-1,-1},
    /*46*/{1,47,2,4,4,13,-1,-1},
    /*47*/{-1,-1},
    /*48*/{-1,-1},
    /*49*/{1,50,2,4,4,13,-1,-1},
    /*50*/{-1,-1},
    /*51*/{-1,-1},
    /*52*/{1,53,2,4,4,13,-1,-1},
    /*53*/{-1,-1},
    /*54*/{1,55,2,4,4,13,-1,-1},
    /*55*/{-1,-1},
    /*56*/{-1,-1},
    /*57*/{-1,-1},
    /*58*/{-1,-1},
    /*59*/{-1,-1},
    /*60*/{-1,-1},
    /*61*/{5,66,-1,-1},
    /*62*/{1,63,2,4,4,13,-1,-1},
    /*63*/{-1,-1},
    /*64*/{-1,-1},
    /*65*/{6,73,-1,-1},
    /*66*/{-1,-1},
    /*67*/{-1,-1},
    /*68*/{-1,-1},
    /*69*/{-1,-1},
    /*70*/{1,71,2,4,4,13,-1,-1},
    /*71*/{-1,-1},
    /*72*/{-1,-1},
    /*73*/{-1,-1},
    /*74*/{-1,-1},
    /*75*/{-1,-1},
    /*76*/{6,77,-1,-1},
    /*77*/{-1,-1},
    /*78*/{1,79,2,4,4,13,-1,-1},
    /*79*/{-1,-1},
    /*80*/{1,81,2,4,4,13,-1,-1},
    /*81*/{-1,-1},
    /*82*/{1,83,2,4,4,13,-1,-1},
    /*83*/{-1,-1},
    /*84*/{1,85,2,4,4,13,-1,-1},
    /*85*/{-1,-1},
    /*86*/{-1,-1},
    /*87*/{1,88,2,4,4,13,-1,-1},
    /*88*/{-1,-1},
    /*89*/{-1,-1},
  };

  /** access to reduce_goto table */
  public short[][] reduce_table() {return _reduce_table;}

  /** instance of action encapsulation class */
  protected CUP$Grm$actions action_obj;

  /** action encapsulation object initializer */
  protected void init_actions()
    {
      action_obj = new CUP$Grm$actions();
    }

  /** invoke a user supplied parse action */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Grm$do_action(act_num, parser, stack, top);
  }

  /** start state */
  public int start_state() {return 0;}
  /** start production */
  public int start_production() {return 0;}

  /** EOF Symbol index */
  public int EOF_sym() {return 0;}

  /** error Symbol index */
  public int error_sym() {return 1;}


  /** scan to get the next Symbol */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.nextToken(); 
    }

 
  Lexer lexer;

  public void syntax_error(java_cup.runtime.Symbol current) {
   report_error("Syntax error (" + current.sym + ")", current);
  }

  ErrorMsg.ErrorMsg errorMsg;

  public void report_error(String message, java_cup.runtime.Symbol info) {
      errorMsg.error(info.left, message);
  }

  public Grm(Lexer l, ErrorMsg.ErrorMsg err) {
    this();
    errorMsg=err;
    lexer=l;
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Grm$actions {

 static Symbol.Symbol sym(String s) {
	         return Symbol.Symbol.symbol(s);
	        }
	    

  /** Constructor */
  CUP$Grm$actions() { }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Grm$do_action(
    int                        CUP$Grm$act_num,
    java_cup.runtime.lr_parser CUP$Grm$parser,
    java.util.Stack            CUP$Grm$stack,
    int                        CUP$Grm$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Grm$result;

      /* select the action based on the action number */
      switch (CUP$Grm$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // fundec ::= FUNCTION ID LPAREN TyFields RPAREN COLON tydec ASSIGN Exp 
            {
              Absyn.Dec RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-7)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		Absyn.Ty f = (Absyn.Ty)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Dec t = (Absyn.Dec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp exp = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new Absyn.FunctionDec(fleft, sym(n), f, null, exp); 
              CUP$Grm$result = new java_cup.runtime.Symbol(11/*fundec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // fundec ::= ID ID LPAREN TyFields RPAREN SEMICOLON 
            {
              Absyn.Dec RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Ty f = (Absyn.Ty)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		 RESULT = new Absyn.FunctionDec(rleft, sym(n), f, r, exp, this); 
              CUP$Grm$result = new java_cup.runtime.Symbol(11/*fundec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // vardec ::= VAR ID COLON Ty ASSIGN Exp 
            {
              Absyn.Dec RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Ty t = (Absyn.Ty)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp i = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.VarDec(nleft, sym(n), t, i); 
              CUP$Grm$result = new java_cup.runtime.Symbol(10/*vardec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // vardec ::= VAR ID ASSIGN Exp 
            {
              Absyn.Dec RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp i = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.VarDec(nleft, sym(n), null, i); 
              CUP$Grm$result = new java_cup.runtime.Symbol(10/*vardec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // tydec ::= TYPEDEF Ty ID 
            {
              Absyn.Dec RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Ty t = (Absyn.Ty)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.TypeDec(tleft, sym(n), t, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(9/*tydec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Dec ::= fundec 
            {
              Absyn.Dec RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(7/*Dec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Dec ::= vardec 
            {
              Absyn.Dec RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(7/*Dec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Dec ::= tydec 
            {
              Absyn.Dec RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(7/*Dec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TyFields ::= ID COLON ID TyFields 
            {
              Absyn.Ty RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Ty f = (Absyn.Ty)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.FieldList(nleft, sym(n), sym(t), f); 
              CUP$Grm$result = new java_cup.runtime.Symbol(6/*TyFields*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TyFields ::= 
            {
              Absyn.Ty RESULT = null;
		 RESULT = new Absyn.NilExp(0); 
              CUP$Grm$result = new java_cup.runtime.Symbol(6/*TyFields*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Ty ::= LBRACE TyFields RBRACE 
            {
              Absyn.Ty RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Ty f = (Absyn.Ty)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.RecordTy(lleft, sym(f)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(5/*Ty*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Ty ::= ARRAY OF ID 
            {
              Absyn.Ty RESULT = null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object arr = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.ArrayTy(nleft, sym(n)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(5/*Ty*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Ty ::= ID 
            {
              Absyn.Ty RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.NameTy(nleft, sym(n)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(5/*Ty*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Var ::= Var DOT ID 
            {
              Absyn.Var RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Var v = (Absyn.Var)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.FieldVar(vleft, v, sym(f)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(4/*Var*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Var ::= Var LBRACK Exp RBRACK 
            {
              Absyn.Var RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Absyn.Var v = (Absyn.Var)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp i = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.SubscriptVar(vleft, v, i); 
              CUP$Grm$result = new java_cup.runtime.Symbol(4/*Var*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Var ::= ID 
            {
              Absyn.Var RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.SimpleVar(nleft, sym(n)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(4/*Var*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // If ::= IF Exp THEN Exp ELSE Exp 
            {
              Absyn.Exp RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Absyn.Exp t = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp b = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.IfExp(tleft, t, b, e); /* is this ambiguous? */
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*If*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // If ::= IF Exp THEN Exp 
            {
              Absyn.Exp RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp t = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp b = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.IfExp(tleft, t, b); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*If*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Exp ::= If 
            {
              Absyn.Exp RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Exp ::= LET decs IN Exp END 
            {
              Absyn.Exp RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Absyn.Dec d = (Absyn.Dec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp b = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.LetExp(lleft, d, b); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Exp ::= FOR vardec TO Exp DO Exp 
            {
              Absyn.Exp RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Absyn.Dec v = (Absyn.Dec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp exp2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int exp3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int exp3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp exp3 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.ForExp(fleft, v, exp2, exp3); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Exp ::= FOR Exp TO Exp DO Exp 
            {
              Absyn.Exp RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Absyn.Exp exp1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp exp2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int exp3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int exp3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp exp3 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.ForExp(fleft, exp1, exp2, exp3); 
        /* exp1 is either 
        ID:type-id ID:id ASSIGN Exp:e
        or
        ID:id ASSIGN Exp:e
        */ 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Exp ::= BREAK SEMICOLON 
            {
              Absyn.Exp RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.BreakExp(bleft); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Exp ::= ID LBRACE Exp RBRACE OF Exp 
            {
              Absyn.Exp RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Absyn.Exp exp1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp exp2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.ArrayExp(nleft, sym(n), exp1, exp2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Exp ::= WHILE Exp DO Exp 
            {
              Absyn.Exp RESULT = null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp exp1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp exp2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 Result = new Absyn.WhileExp(wleft, exp1, exp2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Exp ::= STRING 
            {
              Absyn.Exp RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.StringExp(sleft, s); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Exp ::= Exp GE Exp 
            {
              Absyn.Exp RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp l = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp r = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(oleft, l, Absyn.OpExp.GE, r); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Exp ::= Exp GT Exp 
            {
              Absyn.Exp RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp l = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp r = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(oleft, l, Absyn.OpExp.GT, r); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Exp ::= Exp LE Exp 
            {
              Absyn.Exp RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp l = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp r = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(oleft, l, Absyn.OpExp.LE, r); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Exp ::= Exp LT Exp 
            {
              Absyn.Exp RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp l = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp r = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(oleft, l, Absyn.OpExp.LT, r); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Exp ::= Exp NEQ Exp 
            {
              Absyn.Exp RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp l = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp r = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(oleft, l, Absyn.OpExp.NE, r); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Exp ::= Exp EQ Exp 
            {
              Absyn.Exp RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp l = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp r = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(oleft, l, Absyn.OpExp.EQ, r); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Exp ::= Var ASSIGN Exp 
            {
              Absyn.Exp RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Var v = (Absyn.Var)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.AssignExp(vleft, v, e); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Exp ::= MINUS Exp 
            {
              Absyn.Exp RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Exp ::= Exp DIVIDE Exp 
            {
              Absyn.Exp RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp l = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp r = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(oleft, l, Absyn.OpExp.DIV, r); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Exp ::= Exp TIMES Exp 
            {
              Absyn.Exp RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp l = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp r = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(oleft, l, Absyn.OpExp.MUL, r); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Exp ::= Exp PLUS Exp 
            {
              Absyn.Exp RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp l = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp r = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(oleft, l, Absyn.OpExp.PLUS, r); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Exp ::= Exp MINUS Exp 
            {
              Absyn.Exp RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp l = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp r = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(oleft, l, Absyn.OpExp.MINUS, r); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Exp ::= INT 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.IntExp(eleft, e.intValue()); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Exp ::= Var 
            {
              Absyn.Exp RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Var v = (Absyn.Var)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.VarExp(vleft, v); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Exp ::= error 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.SeqExp(eleft, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Exp EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp start_val = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		RESULT = start_val;
              CUP$Grm$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Grm$parser.done_parsing();
          return CUP$Grm$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

